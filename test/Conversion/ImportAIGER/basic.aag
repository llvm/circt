// RUN: circt-translate --import-aiger %s --split-input-file | FileCheck %s

// Test basic AND gate
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, in %[[INPUT1:.+]] : i1, out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    %[[AND:.+]] = aig.and_inv %[[INPUT1]], %[[INPUT0]] : i1
// CHECK-NEXT:    hw.output %[[AND]] : i1
// CHECK-NEXT: }
aag 3 2 0 1 1
2
4
6
6 4 2

// -----
// Test invert
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, in %[[INPUT1:.+]] : i1, out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    %[[AND:.+]] = aig.and_inv not %[[INPUT1]], not %[[INPUT0]] : i1
// CHECK-NEXT:    hw.output %[[AND]] : i1
// CHECK-NEXT: }
aag 3 2 0 1 1
2
4
6
6 5 3

// -----
// Test multiple outputs
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, in %[[INPUT1:.+]] : i1, out [[OUTPUT0:.+]] : i1, out [[OUTPUT1:.+]] : i1) {
// CHECK-NEXT:    %[[VAL0:.+]] = aig.and_inv %[[INPUT1]], %[[INPUT0]] : i1
// CHECK-NEXT:    %[[VAL1:.+]] = aig.and_inv %[[VAL0]], %[[INPUT1]] : i1
// CHECK-NEXT:    hw.output %[[VAL0]], %[[VAL1]] : i1, i1
// CHECK-NEXT:  }
aag 4 2 0 2 2
2
4
6
8
6 4 2
8 6 4

// -----
// Test latch
// CHECK-LABEL:  hw.module @aiger_top
// CHECK-SAME:     (in %[[INPUT0:.+]] : i1, out [[OUTPUT0:.+]] : i1, in %[[CLOCK:.+]] : !seq.clock) {
// CHECK-NEXT:    %[[REG:.+]] = seq.compreg %[[AND:.+]], %[[CLOCK]] : i1
// CHECK-NEXT:    %[[AND]] = aig.and_inv %[[REG]], %[[INPUT0]] : i1
// CHECK-NEXT:    hw.output %[[REG]] : i1
// CHECK-NEXT:  }
aag 3 1 1 1 1
2
4 6
4
6 4 2

// -----
// Test with comments
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, in %[[INPUT1:.+]] : i1, out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    %[[VAL:.+]] = aig.and_inv %[[INPUT1]], %[[INPUT0]] : i1
// CHECK-NEXT:    hw.output %[[VAL]] : i1
// CHECK-NEXT:  }
aag 3 2 0 1 1
2
4
6
6 4 2
c
This is a comment line

// -----
// Test symbol table
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[IN1:in1]] : i1, in %[[IN2:in2]] : i1, out out : i1, in %[[CLOCK:.+]] : !seq.clock) {
// CHECK-NEXT:    %[[LATCH:latch]] = seq.compreg %[[AND:.+]], %[[CLOCK]] : i1
// CHECK-NEXT:    %[[AND]] = aig.and_inv %[[IN2]], %[[IN1]] : i1
// CHECK-NEXT:    hw.output %[[AND]] : i1
// CHECK-NEXT:  }
aag 3 2 1 1 1
2
4
8 6
6
6 4 2
i0 in1
i1 in2
l0 latch
o0 out

// -----
// Test constant FALSE output
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    %[[FALSE:.+]] = hw.constant false
// CHECK-NEXT:    hw.output %[[FALSE]] : i1
// CHECK-NEXT: }
aag 0 0 0 1 0
0

// -----
// Test constant TRUE output
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    %[[TRUE:.+]] = hw.constant true
// CHECK-NEXT:    hw.output %[[TRUE]] : i1
// CHECK-NEXT: }
aag 0 0 0 1 0
1

// -----
// Test buffer (identity function)
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    hw.output %[[INPUT0]] : i1
// CHECK-NEXT: }
aag 1 1 0 1 0
2
2

// -----
// Test inverter (NOT gate)
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:    %[[VAL:.+]] = aig.and_inv not %[[INPUT0]] : i1
// CHECK-NEXT:    hw.output %[[VAL]] : i1
// CHECK-NEXT: }
aag 1 1 0 1 0
2
3

// -----
// Test complex combinational logic (half adder)
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[X:.+]] : i1, in %[[Y:.+]] : i1, out sum : i1, out carry : i1) {
// CHECK-NEXT:         %[[VAL0:.+]] = aig.and_inv not %[[Y]], not %[[X]] : i1
// CHECK-NEXT:         %[[VAL1:.+]] = aig.and_inv %[[X]], %[[Y]] : i1
// CHECK-NEXT:         %[[VAL2:.+]] = aig.and_inv not %[[VAL1]], not %[[VAL0]] : i1
// CHECK-NEXT:         hw.output %[[VAL0]], %[[VAL1]] : i1, i1
// CHECK-NEXT: }
aag 7 2 0 2 3
2
4
6
12
6 5 3
12 2 4
14 13 7
i0 x
i1 y
o0 sum
o1 carry

// -----
// Test multiple latches with different next states
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, out [[OUTPUT0:.+]] : i1, out [[OUTPUT1:.+]] : i1, in %[[CLOCK:.+]] : !seq.clock) {
// CHECK-NEXT:         %[[Q1:q1]] = seq.compreg %[[VAL1:.+]], %[[CLOCK]] : i1
// CHECK-NEXT:         %[[Q2:q2]] = seq.compreg %[[VAL0:.+]], %[[CLOCK]] : i1
// CHECK-NEXT:         %[[VAL0]] = aig.and_inv %[[Q1]], %[[INPUT0]] : i1
// CHECK-NEXT:         %[[FALSE:.+]] = hw.constant false
// CHECK-NEXT:         %[[VAL1]] = aig.and_inv not %[[Q2]], %[[FALSE]] : i1
// CHECK-NEXT:         hw.output %[[Q1]], %[[Q2]] : i1, i1
// CHECK-NEXT: }
aag 5 1 2 2 2
2
4 10
6 8
4
6
8 4 2
10 7 0
l0 q1
l1 q2

// -----
// Test chain of AND gates
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, in %[[INPUT1:.+]] : i1, in %[[INPUT2:.+]] : i1, out [[OUTPUT0:.+]] : i1) {
// CHECK-NEXT:         %[[VAL0:.+]] = aig.and_inv %[[INPUT1]], %[[INPUT0]] : i1
// CHECK-NEXT:         %[[VAL1:.+]] = aig.and_inv %[[INPUT2]], %[[VAL0]] : i1
// CHECK-NEXT:         hw.output %[[VAL1]] : i1
// CHECK-NEXT: }
aag 5 3 0 1 2
2
4
6
10
8 4 2
10 6 8

// -----
// Test empty circuit (no inputs, no outputs)
// CHECK-LABEL: hw.module @aiger_top() {
// CHECK-NEXT:    hw.output
// CHECK-NEXT: }
aag 0 0 0 0 0

// -----
// Test circuit with only inputs (no logic)
// CHECK-LABEL: hw.module @aiger_top
// CHECK-SAME:    (in %[[INPUT0:.+]] : i1, in %[[INPUT1:.+]] : i1, out [[OUTPUT0:.+]] : i1, out [[OUTPUT1:.+]] : i1) {
// CHECK-NEXT:    hw.output %[[INPUT0]], %[[INPUT1]] : i1, i1
// CHECK-NEXT: }
aag 2 2 0 2 0
2
4
2
4
