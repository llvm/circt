// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: circt-opt %s -llhd-memory-to-block-argument -split-input-file -verify-diagnostics | FileCheck %s

// CHECK-LABEL:   hw.module @check_simple() {
// CHECK:           llhd.process {
// CHECK:             %[[ALLSET:.*]] = hw.constant -1 : i32
// CHECK:             %[[VAL_0:.*]] = hw.constant 5 : i32
// CHECK:             %[[VAL_1:.*]] = hw.constant true
// CHECK:             cf.cond_br %[[VAL_1]], ^bb1, ^bb2
// CHECK:           ^bb1:
// CHECK:             %[[VAL_2:.*]] = hw.constant 6 : i32
// CHECK:             cf.br ^bb3(%[[VAL_2]] : i32)
// CHECK:           ^bb2:
// CHECK:             %[[VAL_3:.*]] = hw.constant 7 : i32
// CHECK:             cf.br ^bb3(%[[VAL_3]] : i32)
// CHECK:           ^bb3(%[[VAL_4:.*]]: i32):
// CHECK:             %[[VAL_5:.*]] = comb.xor %[[VAL_4]], %[[ALLSET]] : i32
// CHECK:             llhd.halt
// CHECK:           }
// CHECK:         }
hw.module @check_simple() {
  llhd.process {
    %allset = hw.constant -1 : i32
    %c5 = hw.constant 5 : i32
    %cond = hw.constant 1 : i1
    %ptr = llhd.var %c5 : i32
    cf.cond_br %cond, ^bb1, ^bb2
  ^bb1:
    %c6 = hw.constant 6 : i32
    llhd.store %ptr, %c6 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb2:
    %c7 = hw.constant 7 : i32
    llhd.store %ptr, %c7 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb3:
    %ld = llhd.load %ptr : !llhd.ptr<i32>
    %res = comb.xor %ld, %allset : i32
    llhd.halt
  }
}

// CHECK-LABEL:   func @allocate_mem() -> !llhd.ptr<i32> {
// CHECK:           %[[VAL_0:.*]] = hw.constant 0 : i32
// CHECK:           %[[VAL_1:.*]] = llhd.var %[[VAL_0]] : i32
// CHECK:           return %[[VAL_1]] : !llhd.ptr<i32>
// CHECK:         }
func.func @allocate_mem() -> !llhd.ptr<i32> {
  %c = hw.constant 0 : i32
  %ptr = llhd.var %c : i32
  return %ptr : !llhd.ptr<i32>
}

// CHECK-LABEL:   @pointer_returned_from_call
// CHECK:           %[[ALLSET:.*]] = hw.constant -1 : i32
// CHECK:           %[[VAL_0:.*]] = hw.constant true
// CHECK:           %[[VAL_1:.*]] = func.call @allocate_mem() : () -> !llhd.ptr<i32>
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1, ^bb2
// CHECK:         ^bb1:
// CHECK:           %[[VAL_2:.*]] = hw.constant 6 : i32
// CHECK:           llhd.store %[[VAL_1]], %[[VAL_2]] : !llhd.ptr<i32>
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           %[[VAL_3:.*]] = hw.constant 7 : i32
// CHECK:           llhd.store %[[VAL_1]], %[[VAL_3]] : !llhd.ptr<i32>
// CHECK:           cf.br ^bb3
// CHECK:         ^bb3:
// CHECK:           %[[VAL_4:.*]] = llhd.load %[[VAL_1]] : !llhd.ptr<i32>
// CHECK:           %[[VAL_5:.*]] = comb.xor %[[VAL_4]], %[[ALLSET]] : i32
// CHECK:           llhd.halt
// CHECK:         }
hw.module @pointer_returned_from_call() {
  llhd.process {
    %allset = hw.constant -1 : i32
    %cond = hw.constant 1 : i1
    %ptr = func.call @allocate_mem() : () -> !llhd.ptr<i32>
    cf.cond_br %cond, ^bb1, ^bb2
  ^bb1:
    %c6 = hw.constant 6 : i32
    llhd.store %ptr, %c6 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb2:
    %c7 = hw.constant 7 : i32
    llhd.store %ptr, %c7 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb3:
    %ld = llhd.load %ptr : !llhd.ptr<i32>
    %res = comb.xor %ld, %allset : i32
    llhd.halt
  }
}

// CHECK-LABEL:   func @store_something(
// CHECK-SAME:                          %[[VAL_0:.*]]: !llhd.ptr<i32>) {
// CHECK:           %[[VAL_1:.*]] = hw.constant 0 : i32
// CHECK:           llhd.store %[[VAL_0]], %[[VAL_1]] : !llhd.ptr<i32>
// CHECK:           return
// CHECK:         }
func.func @store_something(%ptr : !llhd.ptr<i32>) {
  %c = hw.constant 0 : i32
  llhd.store %ptr, %c : !llhd.ptr<i32>
  return
}

// CHECK-LABEL:   @pointer_passed_to_function
// CHECK:           %[[ALLSET:.*]] = hw.constant -1 : i32
// CHECK:           %[[VAL_0:.*]] = hw.constant true
// CHECK:           %[[VAL_1:.*]] = hw.constant 5 : i32
// CHECK:           %[[VAL_2:.*]] = llhd.var %[[VAL_1]] : i32
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1, ^bb2
// CHECK:         ^bb1:
// CHECK:           call @store_something(%[[VAL_2]]) : (!llhd.ptr<i32>) -> ()
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           %[[VAL_3:.*]] = hw.constant 7 : i32
// CHECK:           llhd.store %[[VAL_2]], %[[VAL_3]] : !llhd.ptr<i32>
// CHECK:           cf.br ^bb3
// CHECK:         ^bb3:
// CHECK:           %[[VAL_4:.*]] = llhd.load %[[VAL_2]] : !llhd.ptr<i32>
// CHECK:           %[[VAL_5:.*]] = comb.xor %[[VAL_4]], %[[ALLSET]] : i32
// CHECK:           llhd.halt
// CHECK:         }
hw.module @pointer_passed_to_function() {
  llhd.process {
    %allset = hw.constant -1 : i32
    %cond = hw.constant 1 : i1
    %c5 = hw.constant 5 : i32
    %ptr = llhd.var %c5 : i32
    cf.cond_br %cond, ^bb1, ^bb2
  ^bb1:
    func.call @store_something(%ptr) : (!llhd.ptr<i32>) -> ()
    cf.br ^bb3
  ^bb2:
    %c7 = hw.constant 7 : i32
    llhd.store %ptr, %c7 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb3:
    %ld = llhd.load %ptr : !llhd.ptr<i32>
    %res = comb.xor %ld, %allset : i32
    llhd.halt
  }
}

// CHECK-LABEL:   @pointer_block_argument
// CHECK:           %[[ALLSET:.*]] = hw.constant -1 : i32
// CHECK:           %[[VAL_0:.*]] = hw.constant 5 : i32
// CHECK:           %[[VAL_1:.*]] = hw.constant true
// CHECK:           %[[VAL_2:.*]] = llhd.var %[[VAL_0]] : i32
// CHECK:           cf.cond_br %[[VAL_1]], ^bb1(%[[VAL_2]] : !llhd.ptr<i32>), ^bb2
// CHECK:         ^bb1(%[[VAL_3:.*]]: !llhd.ptr<i32>):
// CHECK:           %[[VAL_4:.*]] = hw.constant 6 : i32
// CHECK:           llhd.store %[[VAL_3]], %[[VAL_4]] : !llhd.ptr<i32>
// CHECK:           cf.br ^bb3
// CHECK:         ^bb2:
// CHECK:           %[[VAL_5:.*]] = hw.constant 7 : i32
// CHECK:           llhd.store %[[VAL_2]], %[[VAL_5]] : !llhd.ptr<i32>
// CHECK:           cf.br ^bb3
// CHECK:         ^bb3:
// CHECK:           %[[VAL_6:.*]] = llhd.load %[[VAL_2]] : !llhd.ptr<i32>
// CHECK:           %[[VAL_7:.*]] = comb.xor %[[VAL_6]], %[[ALLSET]] : i32
// CHECK:           llhd.halt
// CHECK:         }
hw.module @pointer_block_argument() {
  llhd.process {
    %allset = hw.constant -1 : i32
    %c5 = hw.constant 5 : i32
    %cond = hw.constant 1 : i1
    %ptr = llhd.var %c5 : i32
    cf.cond_br %cond, ^bb1(%ptr : !llhd.ptr<i32>), ^bb2
  ^bb1(%p : !llhd.ptr<i32>):
    %c6 = hw.constant 6 : i32
    llhd.store %p, %c6 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb2:
    %c7 = hw.constant 7 : i32
    llhd.store %ptr, %c7 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb3:
    %ld = llhd.load %ptr : !llhd.ptr<i32>
    %res = comb.xor %ld, %allset : i32
    llhd.halt
  }
}

// CHECK-LABEL:   @two_block_arguments
// CHECK:           %[[ALLSET:.*]] = hw.constant -1 : i32
// CHECK:           %[[VAL_0:.*]] = hw.constant 5 : i32
// CHECK:           %[[VAL_1:.*]] = hw.constant true
// CHECK:           cf.cond_br %[[VAL_1]], ^bb1, ^bb2
// CHECK:         ^bb1:
// CHECK:           %[[VAL_2:.*]] = hw.constant 6 : i32
// CHECK:           cf.br ^bb3(%[[VAL_2]], %[[VAL_0]] : i32, i32)
// CHECK:         ^bb2:
// CHECK:           %[[VAL_3:.*]] = hw.constant 7 : i32
// CHECK:           cf.br ^bb3(%[[VAL_3]], %[[VAL_3]] : i32, i32)
// CHECK:         ^bb3(%[[VAL_4:.*]]: i32, %[[VAL_5:.*]]: i32):
// CHECK:           %[[VAL_6:.*]] = comb.xor %[[VAL_4]], %[[ALLSET]] : i32
// CHECK:           %[[VAL_7:.*]] = comb.xor %[[VAL_5]], %[[ALLSET]] : i32
// CHECK:           llhd.halt
// CHECK:         }
hw.module @two_block_arguments() {
  llhd.process {
    %allset = hw.constant -1 : i32
    %c5 = hw.constant 5 : i32
    %cond = hw.constant 1 : i1
    %ptr = llhd.var %c5 : i32
    %ptr2 = llhd.var %c5 : i32
    cf.cond_br %cond, ^bb1, ^bb2
  ^bb1:
    %c6 = hw.constant 6 : i32
    llhd.store %ptr, %c6 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb2:
    %c7 = hw.constant 7 : i32
    llhd.store %ptr, %c7 : !llhd.ptr<i32>
    llhd.store %ptr2, %c7 : !llhd.ptr<i32>
    cf.br ^bb3
  ^bb3:
    %ld = llhd.load %ptr : !llhd.ptr<i32>
    %ld2 = llhd.load %ptr2 : !llhd.ptr<i32>
    %res = comb.xor %ld, %allset : i32
    %res2 = comb.xor %ld2, %allset : i32
    llhd.halt
  }
}

// CHECK-LABEL:   @multiple_store_one_block
// CHECK:           %[[ALLSET:.*]] = hw.constant -1 : i32
// CHECK:           %[[VAL_0:.*]] = hw.constant 5 : i32
// CHECK:           %[[VAL_1:.*]] = hw.constant true
// CHECK:           cf.cond_br %[[VAL_1]], ^bb1, ^bb2(%[[VAL_0]] : i32)
// CHECK:         ^bb1:
// CHECK:           %[[VAL_2:.*]] = hw.constant 7 : i32
// CHECK:           %[[VAL_3:.*]] = comb.xor %[[VAL_2]], %[[ALLSET]] : i32
// CHECK:           %[[VAL_4:.*]] = hw.constant 8 : i32
// CHECK:           cf.br ^bb2(%[[VAL_4]] : i32)
// CHECK:         ^bb2(%[[VAL_5:.*]]: i32):
// CHECK:           %[[VAL_6:.*]] = comb.xor %[[VAL_5]], %[[ALLSET]] : i32
// CHECK:           llhd.halt
// CHECK:         }
hw.module @multiple_store_one_block() {
  llhd.process {
    %allset = hw.constant -1 : i32
    %c5 = hw.constant 5 : i32
    %cond = hw.constant 1 : i1
    %ptr = llhd.var %c5 : i32
    cf.cond_br %cond, ^bb1, ^bb2
  ^bb1:
    %c7 = hw.constant 7 : i32
    llhd.store %ptr, %c7 : !llhd.ptr<i32>
    %ld_tmp = llhd.load %ptr : !llhd.ptr<i32>
    %tmp = comb.xor %ld_tmp, %allset : i32
    %c8 = hw.constant 8 : i32
    llhd.store %ptr, %c8 : !llhd.ptr<i32>
    cf.br ^bb2
  ^bb2:
    %ld = llhd.load %ptr : !llhd.ptr<i32>
    %res = comb.xor %ld, %allset : i32
    llhd.halt
  }
}

// CHECK-LABEL:   @loop
// CHECK-SAME:    (inout %[[VAL_0:.*]] : i2)
// CHECK:           cf.br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_1:.*]] = hw.constant 0 : i32
// CHECK:           cf.br ^bb2(%[[VAL_1]] : i32)
// CHECK:         ^bb2(%[[VAL_2:.*]]: i32):
// CHECK:           %[[VAL_3:.*]] = hw.constant 2 : i32
// CHECK:           %[[VAL_4:.*]] = comb.icmp ult %[[VAL_2]], %[[VAL_3]] : i32
// CHECK:           cf.cond_br %[[VAL_4]], ^bb4, ^bb3
// CHECK:         ^bb3:
// CHECK:           llhd.wait (%[[VAL_0]] : !hw.inout<i2>), ^bb1
// CHECK:         ^bb4:
// CHECK:           %[[VAL_5:.*]] = hw.constant 0 : i2
// CHECK:           %[[VAL_6:.*]] = hw.constant 1 : i32
// CHECK:           %[[VAL_7:.*]] = comb.add %[[VAL_2]], %[[VAL_6]] : i32
// CHECK:           cf.br ^bb2(%[[VAL_7]] : i32)
// CHECK:         }
hw.module @loop(inout %in_i : i2) {
  llhd.process {
    cf.br ^body
  ^body:
    %0 = hw.constant 0 : i32
    %i = llhd.var %0 : i32
    cf.br ^loop_body
  ^loop_body:
    %i_ld = llhd.load %i : !llhd.ptr<i32>
    %1 = hw.constant 2 : i32
    %2 = comb.icmp ult %i_ld, %1 : i32
    cf.cond_br %2, ^loop_continue, ^check
  ^check:
    llhd.wait (%in_i : !hw.inout<i2>), ^body
  ^loop_continue:
    %3 = hw.constant 0 : i2
    %5 = hw.constant 1 : i32
    %i_ld4 = llhd.load %i : !llhd.ptr<i32>
    %14 = comb.add %i_ld4, %5 : i32
    llhd.store %i, %14 : !llhd.ptr<i32>
    cf.br ^loop_body
  }
}

// CHECK-LABEL:   @more_complicated
// CHECK:           %[[ALLSET:.*]] = hw.constant -1 : i8
// CHECK:           %[[VAL_0:.*]] = hw.constant true
// CHECK:           %[[VAL_1:.*]] = hw.constant 3 : i8
// CHECK:           %[[VAL_2:.*]] = comb.xor %[[ALLSET]], %[[VAL_1]] : i8
// CHECK:           cf.br ^bb1(%[[VAL_1]] : i8)
// CHECK:         ^bb1(%[[VAL_3:.*]]: i8):
// CHECK:           %[[VAL_4:.*]] = comb.xor %[[ALLSET]], %[[VAL_3]] : i8
// CHECK:           cf.br ^bb2(%[[VAL_3]] : i8)
// CHECK:         ^bb2(%[[VAL_5:.*]]: i8):
// CHECK:           %[[VAL_6:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           cf.cond_br %[[VAL_0]], ^bb3, ^bb4
// CHECK:         ^bb3:
// CHECK:           %[[VAL_7:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           %[[VAL_8:.*]] = hw.constant 4 : i8
// CHECK:           cf.br ^bb2(%[[VAL_8]] : i8)
// CHECK:         ^bb4:
// CHECK:           %[[VAL_9:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1(%[[VAL_5]] : i8), ^bb5
// CHECK:         ^bb5:
// CHECK:           %[[VAL_10:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           cf.cond_br %[[VAL_0]], ^bb6, ^bb7
// CHECK:         ^bb6:
// CHECK:           %[[VAL_11:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           cf.cond_br %[[VAL_0]], ^bb8, ^bb9(%[[VAL_5]] : i8)
// CHECK:         ^bb7:
// CHECK:           %[[VAL_12:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           %[[VAL_13:.*]] = hw.constant 5 : i8
// CHECK:           cf.br ^bb9(%[[VAL_13]] : i8)
// CHECK:         ^bb8:
// CHECK:           %[[VAL_14:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           cf.br ^bb10
// CHECK:         ^bb9(%[[VAL_15:.*]]: i8):
// CHECK:           %[[VAL_16:.*]] = comb.xor %[[ALLSET]], %[[VAL_15]] : i8
// CHECK:           cf.br ^bb11(%[[VAL_15]] : i8)
// CHECK:         ^bb10:
// CHECK:           %[[VAL_17:.*]] = comb.xor %[[ALLSET]], %[[VAL_5]] : i8
// CHECK:           cf.cond_br %[[VAL_0]], ^bb8, ^bb11(%[[VAL_5]] : i8)
// CHECK:         ^bb11(%[[VAL_18:.*]]: i8):
// CHECK:           %[[VAL_19:.*]] = comb.xor %[[ALLSET]], %[[VAL_18]] : i8
// CHECK:           llhd.halt
// CHECK:         }
hw.module @more_complicated() {
  llhd.process {
    %allset = hw.constant -1 : i8
    %cond = hw.constant 1 : i1
    %init = hw.constant 3 : i8
    %ptr = llhd.var %init : i8
    %ld = llhd.load %ptr : !llhd.ptr<i8>
    %res = comb.xor %allset,  %ld : i8
    cf.br ^bb1
  ^bb1:
    %ld1 = llhd.load %ptr : !llhd.ptr<i8>
    %res1 = comb.xor %allset,  %ld1 : i8
    cf.br ^bb2
  ^bb2:
    %ld2 = llhd.load %ptr : !llhd.ptr<i8>
    %res2 = comb.xor %allset,  %ld2 : i8
    cf.cond_br %cond, ^bb3, ^bb4
  ^bb3:
    %ld3 = llhd.load %ptr : !llhd.ptr<i8>
    %res3 = comb.xor %allset,  %ld3 : i8
    %c4 = hw.constant 4 : i8
    llhd.store %ptr, %c4 : !llhd.ptr<i8>
    cf.br ^bb2
  ^bb4:
    %ld4 = llhd.load %ptr : !llhd.ptr<i8>
    %res4 = comb.xor %allset,  %ld4 : i8
    cf.cond_br %cond, ^bb1, ^bb41
  ^bb41:
    %ld5 = llhd.load %ptr : !llhd.ptr<i8>
    %res5 = comb.xor %allset,  %ld5 : i8
    cf.cond_br %cond, ^bb5, ^bb6
  ^bb5:
    %ld6 = llhd.load %ptr : !llhd.ptr<i8>
    %res6 = comb.xor %allset,  %ld6 : i8
    cf.cond_br %cond, ^bb7, ^bb8
  ^bb6:
    %ld7 = llhd.load %ptr : !llhd.ptr<i8>
    %res7 = comb.xor %allset,  %ld7 : i8
    %c5 = hw.constant 5 : i8
    llhd.store %ptr, %c5 : !llhd.ptr<i8>
    cf.br ^bb8
  ^bb7:
    %ld8 = llhd.load %ptr : !llhd.ptr<i8>
    %res8 = comb.xor %allset,  %ld8 : i8
    cf.br ^bb9
  ^bb8:
    %ld9 = llhd.load %ptr : !llhd.ptr<i8>
    %res9 = comb.xor %allset,  %ld9 : i8
    cf.br ^bb10
  ^bb9:
    %ld10 = llhd.load %ptr : !llhd.ptr<i8>
    %res10 = comb.xor %allset,  %ld10 : i8
    cf.cond_br %cond, ^bb7, ^bb10
  ^bb10:
    %ld11 = llhd.load %ptr : !llhd.ptr<i8>
    %res11 = comb.xor %allset,  %ld11 : i8
    llhd.halt
  }
}
