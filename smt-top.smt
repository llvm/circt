(set-logic HORN)
(declare-fun F_A (Int) Bool)
(declare-fun F_B (Int) Bool)
(declare-fun F_C (Int) Bool)
(assert (let ((tmp (forall ((tmp_0 Int) (tmp_1 Int))
                   (let ((tmp_2 (F_A 0)))
                           (let ((tmp_3 (= tmp_1 0)))
                           (let ((tmp_4 (=> tmp_3 tmp_2)))
                           tmp_4))))))
        tmp))
(assert (let ((tmp_5 (forall ((tmp_6 Int) (tmp_7 Int))
                     (let ((tmp_8 (+ tmp_7 1)))
                             (let ((tmp_9 (F_B tmp_8)))
                             (let ((tmp_10 (F_A tmp_7)))
                             (let ((tmp_11 (and tmp_10 true)))
                             (let ((tmp_12 (=> tmp_11 tmp_9)))
                             tmp_12))))))))
        tmp_5))
(assert (let ((tmp_13 (forall ((tmp_14 Int) (tmp_15 Int))
                      (let ((tmp_16 (+ tmp_15 1)))
                              (let ((tmp_17 (F_C tmp_16)))
                              (let ((tmp_18 (= tmp_14 1)))
                              (let ((tmp_19 (F_B tmp_15)))
                              (let ((tmp_20 (and tmp_19 tmp_18)))
                              (let ((tmp_21 (=> tmp_20 tmp_17)))
                              tmp_21)))))))))
        tmp_13))
(assert (let ((tmp_22 (forall ((tmp_23 Int) (tmp_24 Int))
                      (let ((tmp_25 (+ tmp_24 1)))
                              (let ((tmp_26 (F_B tmp_25)))
                              (let ((tmp_27 (distinct tmp_23 1)))
                              (let ((tmp_28 (F_B tmp_24)))
                              (let ((tmp_29 (and tmp_28 tmp_27)))
                              (let ((tmp_30 (=> tmp_29 tmp_26)))
                              tmp_30)))))))))
        tmp_22))
(assert (let ((tmp_31 (forall ((tmp_32 Int) (tmp_33 Int))
                      (let ((tmp_34 (+ tmp_33 1)))
                              (let ((tmp_35 (F_A tmp_34)))
                              (let ((tmp_36 (= tmp_32 1)))
                              (let ((tmp_37 (F_C tmp_33)))
                              (let ((tmp_38 (and tmp_37 tmp_36)))
                              (let ((tmp_39 (=> tmp_38 tmp_35)))
                              tmp_39)))))))))
        tmp_31))
(assert (let ((tmp_40 (forall ((tmp_41 Int) (tmp_42 Int))
                      (let ((tmp_43 (+ tmp_42 1)))
                              (let ((tmp_44 (F_B tmp_43)))
                              (let ((tmp_45 (distinct tmp_41 1)))
                              (let ((tmp_46 (F_C tmp_42)))
                              (let ((tmp_47 (and tmp_46 tmp_45)))
                              (let ((tmp_48 (=> tmp_47 tmp_44)))
                              tmp_48)))))))))
        tmp_40))
(assert (let ((tmp_49 (forall ((tmp_50 Int) (tmp_51 Int))
                      (let ((tmp_52 (F_C tmp_51)))
                              (let ((tmp_53 (not tmp_52)))
                              (let ((tmp_54 (F_B tmp_51)))
                              (let ((tmp_55 (not tmp_54)))
                              (let ((tmp_56 (and true tmp_55)))
                              (let ((tmp_57 (and tmp_56 tmp_53)))
                              (let ((tmp_58 (F_A tmp_51)))
                              (let ((tmp_59 (=> tmp_58 tmp_57)))
                              tmp_59)))))))))))
        tmp_49))
(assert (let ((tmp_60 (forall ((tmp_61 Int) (tmp_62 Int))
                      (let ((tmp_63 (F_C tmp_62)))
                              (let ((tmp_64 (not tmp_63)))
                              (let ((tmp_65 (F_A tmp_62)))
                              (let ((tmp_66 (not tmp_65)))
                              (let ((tmp_67 (and true tmp_66)))
                              (let ((tmp_68 (and tmp_67 tmp_64)))
                              (let ((tmp_69 (F_B tmp_62)))
                              (let ((tmp_70 (=> tmp_69 tmp_68)))
                              tmp_70)))))))))))
        tmp_60))
(assert (let ((tmp_71 (forall ((tmp_72 Int) (tmp_73 Int))
                      (let ((tmp_74 (F_B tmp_73)))
                              (let ((tmp_75 (not tmp_74)))
                              (let ((tmp_76 (F_A tmp_73)))
                              (let ((tmp_77 (not tmp_76)))
                              (let ((tmp_78 (and true tmp_77)))
                              (let ((tmp_79 (and tmp_78 tmp_75)))
                              (let ((tmp_80 (F_C tmp_73)))
                              (let ((tmp_81 (=> tmp_80 tmp_79)))
                              tmp_81)))))))))))
        tmp_71))
(check-sat)
(get-model)
(reset)
