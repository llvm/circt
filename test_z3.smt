; 
(set-info :status unknown)
(declare-fun _0 (Int Int Int) Bool) ; invariant of state 0
(declare-fun input-arg0 (Int) Int) ; function that models input
(declare-fun _1 (Int Int Int) Bool) ; invariant of state 1
(declare-fun _2 (Int Int Int) Bool) ; inv. of state 2
(declare-fun ERR (Int Int Int) Bool) ; invariant of error state.
(declare-fun _3 (Int Int Int) Bool) ; inv. of state 3
(declare-fun _4 (Int Int Int) Bool) ; " of state 4
(declare-fun _5 (Int Int Int) Bool)
(declare-fun var1 () Int) ; ought to be state of the FSM.

(assert
 (forall ((var1 Int) )(let ((?x11 (input-arg0 0)))
 (_0 ?x11 (ite false 1 0) 0)))
 )
(assert
 (forall ((time Int) )(let (($x64 (forall ((var1 Int) )(let ((?x59 (input-arg0 time)))
 (let (($x60 (and (distinct ?x59 1) true)))
 (let (($x61 (_0 ?x59 var1 time)))
 (=> (and $x61 $x60) (_1 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x64)))))
 )
(assert
 (forall ((time Int) )(let (($x90 (forall ((var1 Int) )(let ((?x59 (input-arg0 time)))
 (let (($x60 (and (distinct ?x59 1) true)))
 (let (($x71 (_1 ?x59 var1 time)))
 (=> (and $x71 $x60) (_2 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x90)))))
 )
(assert
 (forall ((time Int) )(let (($x102 (forall ((var1 Int) )(let ((?x56 (+ time 1)))
 (let ((?x57 (input-arg0 ?x56)))
 (let (($x54 (ERR ?x57 var1 ?x56)))
 (let ((?x59 (input-arg0 time)))
 (let (($x74 (= ?x59 1)))
 (let (($x71 (_1 ?x59 var1 time)))
 (let (($x93 (and $x71 $x74)))
 (=> $x93 $x54)))))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x102)))))
 )
(assert
 (forall ((time Int) )(let (($x116 (forall ((var1 Int) )(let ((?x59 (input-arg0 time)))
 (let (($x60 (and (distinct ?x59 1) true)))
 (let (($x113 (_2 ?x59 var1 time)))
 (=> (and $x113 $x60) (_3 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x116)))))
 )
(assert
 (forall ((time Int) )(let (($x120 (forall ((var1 Int) )(let ((?x56 (+ time 1)))
 (let ((?x57 (input-arg0 ?x56)))
 (let (($x54 (ERR ?x57 var1 ?x56)))
 (let ((?x59 (input-arg0 time)))
 (let (($x74 (= ?x59 1)))
 (let (($x113 (_2 ?x59 var1 time)))
 (let (($x105 (and $x113 $x74)))
 (=> $x105 $x54)))))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x120)))))
 )
(assert
 (forall ((time Int) )(let (($x140 (forall ((var1 Int) )(let ((?x59 (input-arg0 time)))
 (let (($x60 (and (distinct ?x59 1) true)))
 (let (($x137 (_3 ?x59 var1 time)))
 (=> (and $x137 $x60) (_4 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x140)))))
 )
(assert
 (forall ((time Int) )(let (($x144 (forall ((var1 Int) )(let ((?x56 (+ time 1)))
 (let ((?x57 (input-arg0 ?x56)))
 (let (($x54 (ERR ?x57 var1 ?x56)))
 (let ((?x59 (input-arg0 time)))
 (let (($x74 (= ?x59 1)))
 (let (($x137 (_3 ?x59 var1 time)))
 (let (($x130 (and $x137 $x74)))
 (=> $x130 $x54)))))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x144)))))
 )
(assert
 (forall ((time Int) )(let (($x164 (forall ((var1 Int) )(let ((?x59 (input-arg0 time)))
 (let (($x60 (and (distinct ?x59 1) true)))
 (let (($x161 (_4 ?x59 var1 time)))
 (=> (and $x161 $x60) (_5 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x164)))))
 )
(assert
 (forall ((time Int) )(let (($x168 (forall ((var1 Int) )(let ((?x56 (+ time 1)))
 (let ((?x57 (input-arg0 ?x56)))
 (let (($x54 (ERR ?x57 var1 ?x56)))
 (let ((?x59 (input-arg0 time)))
 (let (($x74 (= ?x59 1)))
 (let (($x161 (_4 ?x59 var1 time)))
 (let (($x154 (and $x161 $x74)))
 (=> $x154 $x54)))))))))
 ))
 (let (($x66 (>= time 0)))
 (let (($x67 (and $x66 (< time 3))))
 (=> $x67 $x168)))))
 )
(assert
 (forall ((time Int) )(let (($x179 (forall ((var1 Int) )(let ((?x56 (+ time 1)))
 (let ((?x57 (input-arg0 ?x56)))
 (let (($x54 (ERR ?x57 var1 ?x56)))
 (not $x54)))))
 ))
 (let ((?x185 (input-arg0 time)))
 (let (($x186 (_1 ?x185 var1 time)))
 (=> (and (and (and (> time 0) (< time 2)) (= ?x185 1)) $x186) $x179)))))
 )
(check-sat)
(get-model)