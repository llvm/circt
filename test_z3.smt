; 
(set-info :status unknown)
(declare-fun _0 (Int Int) Bool)
(declare-fun _1 (Int Int) Bool)
(declare-fun _2 (Int Int) Bool)
(declare-fun _3 (Int Int) Bool)
(declare-fun _4 (Int Int) Bool)
(declare-fun _5 (Int Int) Bool)
(declare-fun arg0 () Int)
(assert
 (forall ((arg0 Int) )(_0 0 0))
 )
(assert
 (forall ((time Int) )(let (($x51 (forall ((arg0 Int) )(let (($x49 (_0 arg0 time)))
 (=> $x49 (_1 (+ arg0 1) (+ time 1)))))
 ))
 (let (($x53 (>= time 0)))
 (let (($x54 (and $x53 (< time 10))))
 (=> $x54 $x51)))))
 )
(assert
 (forall ((time Int) )(let (($x72 (forall ((arg0 Int) )(let (($x58 (_1 arg0 time)))
 (=> $x58 (_2 (+ arg0 1) (+ time 1)))))
 ))
 (let (($x53 (>= time 0)))
 (let (($x54 (and $x53 (< time 10))))
 (=> $x54 $x72)))))
 )
(assert
 (forall ((time Int) )(let (($x84 (forall ((arg0 Int) )(let (($x76 (_2 arg0 time)))
 (=> $x76 (_3 (+ arg0 1) (+ time 1)))))
 ))
 (let (($x53 (>= time 0)))
 (let (($x54 (and $x53 (< time 10))))
 (=> $x54 $x84)))))
 )
(assert
 (forall ((time Int) )(let (($x96 (forall ((arg0 Int) )(let (($x88 (_3 arg0 time)))
 (=> $x88 (_4 (+ arg0 1) (+ time 1)))))
 ))
 (let (($x53 (>= time 0)))
 (let (($x54 (and $x53 (< time 10))))
 (=> $x54 $x96)))))
 )
(assert
 (forall ((time Int) )(let (($x108 (forall ((arg0 Int) )(let (($x100 (_4 arg0 time)))
 (=> $x100 (_5 (+ arg0 1) (+ time 1)))))
 ))
 (let (($x53 (>= time 0)))
 (let (($x54 (and $x53 (< time 10))))
 (=> $x54 $x108)))))
 )
(assert
    (forall ((time Int) )(forall ((arg0 Int) )
        (= (_5 arg0 time) (distinct arg0 5))
    ))
)
(check-sat)
