module {
  hw.module @fsm10(in %clk : !seq.clock, in %rst : i1) {
    %is_second_state = comb.icmp bin eq %c8_i16, %state_reg : i16
    verif.cover %is_second_state : i1
    %c0_i1 = hw.constant 0 : i1
    %no_rst = comb.icmp bin eq %c0_i1, %rst : i1
    verif.assume %no_rst : i1
    %c0_i16 = hw.constant 0 : i16
    %c1_i16 = hw.constant 1 : i16
    %c2_i16 = hw.constant 2 : i16
    %c3_i16 = hw.constant 3 : i16
    %c4_i16 = hw.constant 4 : i16
    %c5_i16 = hw.constant 5 : i16
    %c6_i16 = hw.constant 6 : i16
    %c7_i16 = hw.constant 7 : i16
    %c8_i16 = hw.constant 8 : i16
    %c9_i16 = hw.constant 9 : i16
    %c10_i16 = hw.constant 10 : i16
    %state_reg = seq.compreg sym @state_reg  %65, %clk reset %rst, %c0_i16 : i16  
    %c0_i16_0 = hw.constant 0 : i16
    %x0 = seq.compreg sym @x0  %62, %clk reset %rst, %c0_i16_0 : i16  
    %c5_i16_1 = hw.constant 5 : i16
    %c12_i16 = hw.constant 12 : i16
    %c1_i16_2 = hw.constant 1 : i16
    %0 = comb.icmp bin eq %state_reg, %c0_i16 : i16
    %1 = comb.add bin %x0, %c1_i16_2 : i16
    %2 = comb.mux bin %0, %1, %62 : i16
    %3 = comb.mux bin %0, %c1_i16, %state_reg : i16
    %4 = comb.icmp bin eq %state_reg, %c1_i16 : i16
    %5 = comb.add bin %x0, %c1_i16_2 : i16
    %6 = comb.mux bin %4, %5, %2 : i16
    %7 = comb.mux bin %4, %c2_i16, %3 : i16
    %8 = comb.icmp bin eq %state_reg, %c2_i16 : i16
    %9 = comb.add bin %x0, %c1_i16_2 : i16
    %10 = comb.mux bin %8, %9, %6 : i16
    %11 = comb.mux bin %8, %c3_i16, %7 : i16
    %12 = comb.icmp bin eq %state_reg, %c3_i16 : i16
    %13 = comb.add bin %x0, %c1_i16_2 : i16
    %14 = comb.mux bin %12, %13, %10 : i16
    %15 = comb.mux bin %12, %c4_i16, %11 : i16
    %16 = comb.icmp bin eq %state_reg, %c4_i16 : i16
    %17 = comb.add bin %x0, %c1_i16_2 : i16
    %18 = comb.icmp bin uge %x0, %c5_i16_1 : i16
    %19 = comb.icmp bin eq %state_reg, %c4_i16 : i16
    %20 = comb.add bin %x0, %c1_i16_2 : i16
    %21 = comb.icmp bin ult %x0, %c5_i16_1 : i16
    %22 = comb.icmp bin eq %state_reg, %c4_i16 : i16
    %23 = comb.mux bin %22, %c4_i16, %15 : i16
    %24 = comb.mux bin %21, %c2_i16, %c4_i16 : i16
    %25 = comb.and bin %21, %19 : i1
    %26 = comb.mux bin %25, %20, %14 : i16
    %27 = comb.mux bin %19, %24, %23 : i16
    %28 = comb.mux bin %18, %c5_i16, %24 : i16
    %29 = comb.and bin %18, %16 : i1
    %30 = comb.mux bin %29, %17, %26 : i16
    %31 = comb.mux bin %16, %28, %27 : i16
    %32 = comb.icmp bin eq %state_reg, %c5_i16 : i16
    %33 = comb.add bin %x0, %c1_i16_2 : i16
    %34 = comb.mux bin %32, %33, %30 : i16
    %35 = comb.mux bin %32, %c6_i16, %31 : i16
    %36 = comb.icmp bin eq %state_reg, %c6_i16 : i16
    %37 = comb.add bin %x0, %c1_i16_2 : i16
    %38 = comb.mux bin %36, %37, %34 : i16
    %39 = comb.mux bin %36, %c7_i16, %35 : i16
    %40 = comb.icmp bin eq %state_reg, %c7_i16 : i16
    %41 = comb.add bin %x0, %c1_i16_2 : i16
    %42 = comb.mux bin %40, %41, %38 : i16
    %43 = comb.mux bin %40, %c8_i16, %39 : i16
    %44 = comb.icmp bin eq %state_reg, %c8_i16 : i16
    %45 = comb.add bin %x0, %c1_i16_2 : i16
    %46 = comb.icmp bin uge %x0, %c12_i16 : i16
    %47 = comb.icmp bin eq %state_reg, %c8_i16 : i16
    %48 = comb.add bin %x0, %c1_i16_2 : i16
    %49 = comb.icmp bin ult %x0, %c12_i16 : i16
    %50 = comb.icmp bin eq %state_reg, %c8_i16 : i16
    %51 = comb.mux bin %50, %c8_i16, %43 : i16
    %52 = comb.mux bin %49, %c3_i16, %c8_i16 : i16
    %53 = comb.and bin %49, %47 : i1
    %54 = comb.mux bin %53, %48, %42 : i16
    %55 = comb.mux bin %47, %52, %51 : i16
    %56 = comb.mux bin %46, %c9_i16, %52 : i16
    %57 = comb.and bin %46, %44 : i1
    %58 = comb.mux bin %57, %45, %54 : i16
    %59 = comb.mux bin %44, %56, %55 : i16
    %60 = comb.icmp bin eq %state_reg, %c9_i16 : i16
    %61 = comb.add bin %x0, %c1_i16_2 : i16
    %62 = comb.mux bin %60, %61, %58 : i16
    %63 = comb.mux bin %60, %c10_i16, %59 : i16
    %64 = comb.icmp bin eq %state_reg, %c10_i16 : i16
    %65 = comb.mux bin %64, %c10_i16, %63 : i16
    hw.output
  }
}

