; 
(set-info :status unknown)
(declare-sort STATE 0)
 (declare-fun _0 () STATE)
(declare-fun time-to-state (Int) STATE)
(declare-fun input-arg0 (Int) Int)
(declare-fun var1_0 (Int) Int)
(declare-fun _1 () STATE)
(declare-fun ERR () STATE)
(declare-fun _2 () STATE)
(declare-fun _3 () STATE)
(declare-fun _4 () STATE)
(declare-fun _5 () STATE)
(declare-fun _6 () STATE)
(declare-fun _7 () STATE)
(declare-fun _8 () STATE)
(declare-fun _9 () STATE)
(declare-fun _10 () STATE)
(assert
 (let ((?x19 (time-to-state 0)))
 (= ?x19 _0)))
(assert
 (let ((?x39 (input-arg0 0)))
 (= ?x39 0)))
(assert
 (let ((?x41 (var1_0 0)))
 (= ?x41 0)))
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _0) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _1) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x70 (= ?x69 _0)))
 (let (($x86 (and $x70 $x85)))
 (=> $x86 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _1) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _2) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x100 (= ?x69 _1)))
 (let (($x105 (and $x100 $x85)))
 (=> $x105 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _2) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _3) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x118 (= ?x69 _2)))
 (let (($x123 (and $x118 $x85)))
 (=> $x123 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _3) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _4) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x136 (= ?x69 _3)))
 (let (($x141 (and $x136 $x85)))
 (=> $x141 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _4) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _5) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x154 (= ?x69 _4)))
 (let (($x159 (and $x154 $x85)))
 (=> $x159 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _5) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _6) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x172 (= ?x69 _5)))
 (let (($x177 (and $x172 $x85)))
 (=> $x177 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _6) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _7) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x190 (= ?x69 _6)))
 (let (($x195 (and $x190 $x85)))
 (=> $x195 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _7) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _8) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x208 (= ?x69 _7)))
 (let (($x213 (and $x208 $x85)))
 (=> $x213 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _8) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _9) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x226 (= ?x69 _8)))
 (let (($x231 (and $x226 $x85)))
 (=> $x231 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let (($x63 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _9) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _10) $x63))))
 )
(assert
 (forall ((time Int) )(let ((?x61 (+ time 1)))
 (let ((?x64 (time-to-state ?x61)))
 (let (($x84 (= ?x64 ERR)))
 (let ((?x67 (input-arg0 time)))
 (let (($x85 (= ?x67 1)))
 (let ((?x69 (time-to-state time)))
 (let (($x244 (= ?x69 _9)))
 (let (($x249 (and $x244 $x85)))
 (=> $x249 $x84))))))))))
 )
(assert
 (forall ((time Int) )(let ((?x69 (time-to-state time)))
 (let (($x252 (= ?x69 ERR)))
 (and $x252 (and (distinct (input-arg0 time) 1) true)))))
 )
(assert
 (and (distinct _0 _1 ERR _2 _3 _4 _5 _6 _7 _8 _9 _10) true))
(check-sat)
