; 
(set-info :status unknown)
(declare-sort STATE 0)
 (declare-fun _0 () STATE)
(declare-fun time-to-state (Int) STATE)
(declare-fun input-arg0 (Int) Int)
(declare-fun var1_0 (Int) Int)
(declare-fun output-0 (Int) Int)
(declare-fun _1 () STATE)
(declare-fun ERR () STATE)
(declare-fun _2 () STATE)
(assert
 (let ((?x11 (time-to-state 0)))
 (= ?x11 _0)))
(assert
 (let ((?x31 (input-arg0 0)))
 (= ?x31 0)))
(assert
 (let ((?x33 (var1_0 0)))
 (= ?x33 0)))
(assert
 (let ((?x35 (output-0 0)))
 (= ?x35 0)))
(assert
 (forall ((time Int) )(let (($x64 (and (= (var1_0 (+ time 1)) (+ (var1_0 time) 1)) (= (output-0 (+ time 1)) (+ (var1_0 time) 1)))))
 (=> (and (= (time-to-state time) _0) (and (distinct (input-arg0 time) 1) true)) (and (= (time-to-state (+ time 1)) _1) $x64))))
 )
(assert
 (forall ((time Int) )(let ((?x59 (+ time 1)))
 (let ((?x65 (time-to-state ?x59)))
 (let (($x47 (= ?x65 ERR)))
 (let ((?x68 (input-arg0 time)))
 (let (($x48 (= ?x68 1)))
 (let ((?x70 (time-to-state time)))
 (let (($x71 (= ?x70 _0)))
 (let (($x55 (and $x71 $x48)))
 (=> $x55 $x47))))))))))
 )
(assert
 (forall ((time Int) )(let (($x64 (and (= (var1_0 (+ time 1)) (+ (var1_0 time) 1)) (= (output-0 (+ time 1)) (+ (var1_0 time) 1)))))
 (=> (and (= (time-to-state time) _1) (and (distinct (input-arg0 time) 1) true)) (and (= (time-to-state (+ time 1)) _2) $x64))))
 )
(assert
 (forall ((time Int) )(let ((?x59 (+ time 1)))
 (let ((?x65 (time-to-state ?x59)))
 (let (($x47 (= ?x65 ERR)))
 (let ((?x68 (input-arg0 time)))
 (let (($x48 (= ?x68 1)))
 (let ((?x70 (time-to-state time)))
 (let (($x104 (= ?x70 _1)))
 (let (($x93 (and $x104 $x48)))
 (=> $x93 $x47))))))))))
 )
(assert
 (forall ((time Int) )(let ((?x68 (input-arg0 time)))
 (let (($x69 (and (distinct ?x68 1) true)))
 (let ((?x70 (time-to-state time)))
 (let (($x92 (= ?x70 ERR)))
 (and $x92 $x69))))))
 )
(assert
 (and (distinct _0 _1 ERR _2) true))
(check-sat)
