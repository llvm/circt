; 
(set-info :status unknown)
(declare-sort STATE 0)
 (declare-fun _0 () STATE)
(declare-fun time-to-state (Int) STATE)
(declare-fun input-arg0 (Int) Int)
(declare-fun var1_0 (Int) Int)
(declare-fun _1 () STATE)
(declare-fun ERR () STATE)
(declare-fun _2 () STATE)
(declare-fun _3 () STATE)
(declare-fun _4 () STATE)
(declare-fun _5 () STATE)
(declare-fun _6 () STATE)
(declare-fun _7 () STATE)
(declare-fun _8 () STATE)
(declare-fun _9 () STATE)
(declare-fun _10 () STATE)
(declare-fun _11 () STATE)
(declare-fun _12 () STATE)
(declare-fun _13 () STATE)
(declare-fun _14 () STATE)
(declare-fun _15 () STATE)
(declare-fun _16 () STATE)
(declare-fun _17 () STATE)
(declare-fun _18 () STATE)
(declare-fun _19 () STATE)
(declare-fun _20 () STATE)
(declare-fun _21 () STATE)
(declare-fun _22 () STATE)
(declare-fun _23 () STATE)
(declare-fun _24 () STATE)
(declare-fun _25 () STATE)
(declare-fun _26 () STATE)
(declare-fun _27 () STATE)
(declare-fun _28 () STATE)
(declare-fun _29 () STATE)
(declare-fun _30 () STATE)
(assert
 (let ((?x39 (time-to-state 0)))
 (= ?x39 _0)))
(assert
 (let ((?x59 (input-arg0 0)))
 (= ?x59 0)))
(assert
 (let ((?x61 (var1_0 0)))
 (= ?x61 0)))
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _0) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _1) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x90 (= ?x89 _0)))
 (let (($x106 (and $x90 $x105)))
 (=> $x106 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _1) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _2) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x120 (= ?x89 _1)))
 (let (($x125 (and $x120 $x105)))
 (=> $x125 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _2) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _3) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x138 (= ?x89 _2)))
 (let (($x143 (and $x138 $x105)))
 (=> $x143 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _3) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _4) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x156 (= ?x89 _3)))
 (let (($x161 (and $x156 $x105)))
 (=> $x161 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _4) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _5) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x174 (= ?x89 _4)))
 (let (($x179 (and $x174 $x105)))
 (=> $x179 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _5) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _6) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x192 (= ?x89 _5)))
 (let (($x197 (and $x192 $x105)))
 (=> $x197 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _6) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _7) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x210 (= ?x89 _6)))
 (let (($x215 (and $x210 $x105)))
 (=> $x215 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _7) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _8) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x228 (= ?x89 _7)))
 (let (($x233 (and $x228 $x105)))
 (=> $x233 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _8) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _9) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x246 (= ?x89 _8)))
 (let (($x251 (and $x246 $x105)))
 (=> $x251 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _9) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _10) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x264 (= ?x89 _9)))
 (let (($x269 (and $x264 $x105)))
 (=> $x269 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _10) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _11) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x282 (= ?x89 _10)))
 (let (($x287 (and $x282 $x105)))
 (=> $x287 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _11) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _12) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x300 (= ?x89 _11)))
 (let (($x305 (and $x300 $x105)))
 (=> $x305 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _12) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _13) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x318 (= ?x89 _12)))
 (let (($x323 (and $x318 $x105)))
 (=> $x323 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _13) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _14) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x336 (= ?x89 _13)))
 (let (($x341 (and $x336 $x105)))
 (=> $x341 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _14) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _15) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x354 (= ?x89 _14)))
 (let (($x359 (and $x354 $x105)))
 (=> $x359 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _15) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _16) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x372 (= ?x89 _15)))
 (let (($x377 (and $x372 $x105)))
 (=> $x377 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _16) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _17) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x390 (= ?x89 _16)))
 (let (($x395 (and $x390 $x105)))
 (=> $x395 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _17) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _18) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x408 (= ?x89 _17)))
 (let (($x413 (and $x408 $x105)))
 (=> $x413 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _18) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _19) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x426 (= ?x89 _18)))
 (let (($x431 (and $x426 $x105)))
 (=> $x431 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _19) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _20) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x444 (= ?x89 _19)))
 (let (($x449 (and $x444 $x105)))
 (=> $x449 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _20) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _21) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x462 (= ?x89 _20)))
 (let (($x467 (and $x462 $x105)))
 (=> $x467 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _21) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _22) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x480 (= ?x89 _21)))
 (let (($x485 (and $x480 $x105)))
 (=> $x485 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _22) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _23) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x498 (= ?x89 _22)))
 (let (($x503 (and $x498 $x105)))
 (=> $x503 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _23) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _24) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x516 (= ?x89 _23)))
 (let (($x521 (and $x516 $x105)))
 (=> $x521 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _24) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _25) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x534 (= ?x89 _24)))
 (let (($x539 (and $x534 $x105)))
 (=> $x539 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _25) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _26) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x552 (= ?x89 _25)))
 (let (($x557 (and $x552 $x105)))
 (=> $x557 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _26) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _27) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x570 (= ?x89 _26)))
 (let (($x575 (and $x570 $x105)))
 (=> $x575 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _27) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _28) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x588 (= ?x89 _27)))
 (let (($x593 (and $x588 $x105)))
 (=> $x593 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _28) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _29) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x606 (= ?x89 _28)))
 (let (($x611 (and $x606 $x105)))
 (=> $x611 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let (($x83 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _29) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _30) $x83))))
 )
(assert
 (forall ((time Int) )(let ((?x81 (+ time 1)))
 (let ((?x84 (time-to-state ?x81)))
 (let (($x104 (= ?x84 ERR)))
 (let ((?x87 (input-arg0 time)))
 (let (($x105 (= ?x87 1)))
 (let ((?x89 (time-to-state time)))
 (let (($x624 (= ?x89 _29)))
 (let (($x629 (and $x624 $x105)))
 (=> $x629 $x104))))))))))
 )
(assert
 (forall ((time Int) )(let ((?x89 (time-to-state time)))
 (let (($x632 (= ?x89 ERR)))
 (and $x632 (and (distinct (input-arg0 time) 1) true)))))
 )
(assert
 (and (distinct _0 _1 ERR _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12 _13 _14 _15 _16 _17 _18 _19 _20 _21 _22 _23 _24 _25 _26 _27 _28 _29 _30) true))
(check-sat)
