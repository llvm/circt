; 
(set-info :status unknown)
(declare-sort STATE 0)
 (declare-fun _0 () STATE)
(declare-fun time-to-state (Int) STATE)
(declare-fun input-arg0 (Int) Int)
(declare-fun var1_0 (Int) Int)
(declare-fun _1 () STATE)
(declare-fun ERR () STATE)
(declare-fun _2 () STATE)
(declare-fun _3 () STATE)
(declare-fun _4 () STATE)
(declare-fun _5 () STATE)
(declare-fun _6 () STATE)
(declare-fun _7 () STATE)
(declare-fun _8 () STATE)
(declare-fun _9 () STATE)
(declare-fun _10 () STATE)
(declare-fun _11 () STATE)
(declare-fun _12 () STATE)
(declare-fun _13 () STATE)
(declare-fun _14 () STATE)
(declare-fun _15 () STATE)
(declare-fun _16 () STATE)
(declare-fun _17 () STATE)
(declare-fun _18 () STATE)
(declare-fun _19 () STATE)
(declare-fun _20 () STATE)
(declare-fun _21 () STATE)
(declare-fun _22 () STATE)
(declare-fun _23 () STATE)
(declare-fun _24 () STATE)
(declare-fun _25 () STATE)
(declare-fun _26 () STATE)
(declare-fun _27 () STATE)
(declare-fun _28 () STATE)
(declare-fun _29 () STATE)
(declare-fun _30 () STATE)
(declare-fun _31 () STATE)
(declare-fun _32 () STATE)
(declare-fun _33 () STATE)
(declare-fun _34 () STATE)
(declare-fun _35 () STATE)
(declare-fun _36 () STATE)
(declare-fun _37 () STATE)
(declare-fun _38 () STATE)
(declare-fun _39 () STATE)
(declare-fun _40 () STATE)
(declare-fun _41 () STATE)
(declare-fun _42 () STATE)
(declare-fun _43 () STATE)
(declare-fun _44 () STATE)
(declare-fun _45 () STATE)
(declare-fun _46 () STATE)
(declare-fun _47 () STATE)
(declare-fun _48 () STATE)
(declare-fun _49 () STATE)
(declare-fun _50 () STATE)
(declare-fun _51 () STATE)
(declare-fun _52 () STATE)
(declare-fun _53 () STATE)
(declare-fun _54 () STATE)
(declare-fun _55 () STATE)
(declare-fun _56 () STATE)
(declare-fun _57 () STATE)
(declare-fun _58 () STATE)
(declare-fun _59 () STATE)
(declare-fun _60 () STATE)
(declare-fun _61 () STATE)
(declare-fun _62 () STATE)
(declare-fun _63 () STATE)
(declare-fun _64 () STATE)
(declare-fun _65 () STATE)
(declare-fun _66 () STATE)
(declare-fun _67 () STATE)
(declare-fun _68 () STATE)
(declare-fun _69 () STATE)
(declare-fun _70 () STATE)
(declare-fun _71 () STATE)
(declare-fun _72 () STATE)
(declare-fun _73 () STATE)
(declare-fun _74 () STATE)
(declare-fun _75 () STATE)
(declare-fun _76 () STATE)
(declare-fun _77 () STATE)
(declare-fun _78 () STATE)
(declare-fun _79 () STATE)
(declare-fun _80 () STATE)
(declare-fun _81 () STATE)
(declare-fun _82 () STATE)
(declare-fun _83 () STATE)
(declare-fun _84 () STATE)
(declare-fun _85 () STATE)
(declare-fun _86 () STATE)
(declare-fun _87 () STATE)
(declare-fun _88 () STATE)
(declare-fun _89 () STATE)
(declare-fun _90 () STATE)
(declare-fun _91 () STATE)
(declare-fun _92 () STATE)
(declare-fun _93 () STATE)
(declare-fun _94 () STATE)
(declare-fun _95 () STATE)
(declare-fun _96 () STATE)
(declare-fun _97 () STATE)
(declare-fun _98 () STATE)
(declare-fun _99 () STATE)
(declare-fun _100 () STATE)
(declare-fun _101 () STATE)
(declare-fun _102 () STATE)
(declare-fun _103 () STATE)
(declare-fun _104 () STATE)
(declare-fun _105 () STATE)
(declare-fun _106 () STATE)
(declare-fun _107 () STATE)
(declare-fun _108 () STATE)
(declare-fun _109 () STATE)
(declare-fun _110 () STATE)
(declare-fun _111 () STATE)
(declare-fun _112 () STATE)
(declare-fun _113 () STATE)
(declare-fun _114 () STATE)
(declare-fun _115 () STATE)
(declare-fun _116 () STATE)
(declare-fun _117 () STATE)
(declare-fun _118 () STATE)
(declare-fun _119 () STATE)
(declare-fun _120 () STATE)
(declare-fun _121 () STATE)
(declare-fun _122 () STATE)
(declare-fun _123 () STATE)
(declare-fun _124 () STATE)
(declare-fun _125 () STATE)
(declare-fun _126 () STATE)
(declare-fun _127 () STATE)
(declare-fun _128 () STATE)
(declare-fun _129 () STATE)
(declare-fun _130 () STATE)
(declare-fun _131 () STATE)
(declare-fun _132 () STATE)
(declare-fun _133 () STATE)
(declare-fun _134 () STATE)
(declare-fun _135 () STATE)
(declare-fun _136 () STATE)
(declare-fun _137 () STATE)
(declare-fun _138 () STATE)
(declare-fun _139 () STATE)
(declare-fun _140 () STATE)
(declare-fun _141 () STATE)
(declare-fun _142 () STATE)
(declare-fun _143 () STATE)
(declare-fun _144 () STATE)
(declare-fun _145 () STATE)
(declare-fun _146 () STATE)
(declare-fun _147 () STATE)
(declare-fun _148 () STATE)
(declare-fun _149 () STATE)
(declare-fun _150 () STATE)
(declare-fun _151 () STATE)
(declare-fun _152 () STATE)
(declare-fun _153 () STATE)
(declare-fun _154 () STATE)
(declare-fun _155 () STATE)
(declare-fun _156 () STATE)
(declare-fun _157 () STATE)
(declare-fun _158 () STATE)
(declare-fun _159 () STATE)
(declare-fun _160 () STATE)
(declare-fun _161 () STATE)
(declare-fun _162 () STATE)
(declare-fun _163 () STATE)
(declare-fun _164 () STATE)
(declare-fun _165 () STATE)
(declare-fun _166 () STATE)
(declare-fun _167 () STATE)
(declare-fun _168 () STATE)
(declare-fun _169 () STATE)
(declare-fun _170 () STATE)
(declare-fun _171 () STATE)
(declare-fun _172 () STATE)
(declare-fun _173 () STATE)
(declare-fun _174 () STATE)
(declare-fun _175 () STATE)
(declare-fun _176 () STATE)
(declare-fun _177 () STATE)
(declare-fun _178 () STATE)
(declare-fun _179 () STATE)
(declare-fun _180 () STATE)
(declare-fun _181 () STATE)
(declare-fun _182 () STATE)
(declare-fun _183 () STATE)
(declare-fun _184 () STATE)
(declare-fun _185 () STATE)
(declare-fun _186 () STATE)
(declare-fun _187 () STATE)
(declare-fun _188 () STATE)
(declare-fun _189 () STATE)
(declare-fun _190 () STATE)
(declare-fun _191 () STATE)
(declare-fun _192 () STATE)
(declare-fun _193 () STATE)
(declare-fun _194 () STATE)
(declare-fun _195 () STATE)
(declare-fun _196 () STATE)
(declare-fun _197 () STATE)
(declare-fun _198 () STATE)
(declare-fun _199 () STATE)
(declare-fun _200 () STATE)
(declare-fun _201 () STATE)
(declare-fun _202 () STATE)
(declare-fun _203 () STATE)
(declare-fun _204 () STATE)
(declare-fun _205 () STATE)
(declare-fun _206 () STATE)
(declare-fun _207 () STATE)
(declare-fun _208 () STATE)
(declare-fun _209 () STATE)
(declare-fun _210 () STATE)
(declare-fun _211 () STATE)
(declare-fun _212 () STATE)
(declare-fun _213 () STATE)
(declare-fun _214 () STATE)
(declare-fun _215 () STATE)
(declare-fun _216 () STATE)
(declare-fun _217 () STATE)
(declare-fun _218 () STATE)
(declare-fun _219 () STATE)
(declare-fun _220 () STATE)
(declare-fun _221 () STATE)
(declare-fun _222 () STATE)
(declare-fun _223 () STATE)
(declare-fun _224 () STATE)
(declare-fun _225 () STATE)
(declare-fun _226 () STATE)
(declare-fun _227 () STATE)
(declare-fun _228 () STATE)
(declare-fun _229 () STATE)
(declare-fun _230 () STATE)
(declare-fun _231 () STATE)
(declare-fun _232 () STATE)
(declare-fun _233 () STATE)
(declare-fun _234 () STATE)
(declare-fun _235 () STATE)
(declare-fun _236 () STATE)
(declare-fun _237 () STATE)
(declare-fun _238 () STATE)
(declare-fun _239 () STATE)
(declare-fun _240 () STATE)
(declare-fun _241 () STATE)
(declare-fun _242 () STATE)
(declare-fun _243 () STATE)
(declare-fun _244 () STATE)
(declare-fun _245 () STATE)
(declare-fun _246 () STATE)
(declare-fun _247 () STATE)
(declare-fun _248 () STATE)
(declare-fun _249 () STATE)
(declare-fun _250 () STATE)
(declare-fun _251 () STATE)
(declare-fun _252 () STATE)
(declare-fun _253 () STATE)
(declare-fun _254 () STATE)
(declare-fun _255 () STATE)
(declare-fun _256 () STATE)
(declare-fun _257 () STATE)
(declare-fun _258 () STATE)
(declare-fun _259 () STATE)
(declare-fun _260 () STATE)
(declare-fun _261 () STATE)
(declare-fun _262 () STATE)
(declare-fun _263 () STATE)
(declare-fun _264 () STATE)
(declare-fun _265 () STATE)
(declare-fun _266 () STATE)
(declare-fun _267 () STATE)
(declare-fun _268 () STATE)
(declare-fun _269 () STATE)
(declare-fun _270 () STATE)
(declare-fun _271 () STATE)
(declare-fun _272 () STATE)
(declare-fun _273 () STATE)
(declare-fun _274 () STATE)
(declare-fun _275 () STATE)
(declare-fun _276 () STATE)
(declare-fun _277 () STATE)
(declare-fun _278 () STATE)
(declare-fun _279 () STATE)
(declare-fun _280 () STATE)
(declare-fun _281 () STATE)
(declare-fun _282 () STATE)
(declare-fun _283 () STATE)
(declare-fun _284 () STATE)
(declare-fun _285 () STATE)
(declare-fun _286 () STATE)
(declare-fun _287 () STATE)
(declare-fun _288 () STATE)
(declare-fun _289 () STATE)
(declare-fun _290 () STATE)
(declare-fun _291 () STATE)
(declare-fun _292 () STATE)
(declare-fun _293 () STATE)
(declare-fun _294 () STATE)
(declare-fun _295 () STATE)
(declare-fun _296 () STATE)
(declare-fun _297 () STATE)
(declare-fun _298 () STATE)
(declare-fun _299 () STATE)
(declare-fun _300 () STATE)
(declare-fun _301 () STATE)
(declare-fun _302 () STATE)
(declare-fun _303 () STATE)
(declare-fun _304 () STATE)
(declare-fun _305 () STATE)
(declare-fun _306 () STATE)
(declare-fun _307 () STATE)
(declare-fun _308 () STATE)
(declare-fun _309 () STATE)
(declare-fun _310 () STATE)
(declare-fun _311 () STATE)
(declare-fun _312 () STATE)
(declare-fun _313 () STATE)
(declare-fun _314 () STATE)
(declare-fun _315 () STATE)
(declare-fun _316 () STATE)
(declare-fun _317 () STATE)
(declare-fun _318 () STATE)
(declare-fun _319 () STATE)
(declare-fun _320 () STATE)
(declare-fun _321 () STATE)
(declare-fun _322 () STATE)
(declare-fun _323 () STATE)
(declare-fun _324 () STATE)
(declare-fun _325 () STATE)
(declare-fun _326 () STATE)
(declare-fun _327 () STATE)
(declare-fun _328 () STATE)
(declare-fun _329 () STATE)
(declare-fun _330 () STATE)
(declare-fun _331 () STATE)
(declare-fun _332 () STATE)
(declare-fun _333 () STATE)
(declare-fun _334 () STATE)
(declare-fun _335 () STATE)
(declare-fun _336 () STATE)
(declare-fun _337 () STATE)
(declare-fun _338 () STATE)
(declare-fun _339 () STATE)
(declare-fun _340 () STATE)
(declare-fun _341 () STATE)
(declare-fun _342 () STATE)
(declare-fun _343 () STATE)
(declare-fun _344 () STATE)
(declare-fun _345 () STATE)
(declare-fun _346 () STATE)
(declare-fun _347 () STATE)
(declare-fun _348 () STATE)
(declare-fun _349 () STATE)
(declare-fun _350 () STATE)
(declare-fun _351 () STATE)
(declare-fun _352 () STATE)
(declare-fun _353 () STATE)
(declare-fun _354 () STATE)
(declare-fun _355 () STATE)
(declare-fun _356 () STATE)
(declare-fun _357 () STATE)
(declare-fun _358 () STATE)
(declare-fun _359 () STATE)
(declare-fun _360 () STATE)
(declare-fun _361 () STATE)
(declare-fun _362 () STATE)
(declare-fun _363 () STATE)
(declare-fun _364 () STATE)
(declare-fun _365 () STATE)
(declare-fun _366 () STATE)
(declare-fun _367 () STATE)
(declare-fun _368 () STATE)
(declare-fun _369 () STATE)
(declare-fun _370 () STATE)
(declare-fun _371 () STATE)
(declare-fun _372 () STATE)
(declare-fun _373 () STATE)
(declare-fun _374 () STATE)
(declare-fun _375 () STATE)
(declare-fun _376 () STATE)
(declare-fun _377 () STATE)
(declare-fun _378 () STATE)
(declare-fun _379 () STATE)
(declare-fun _380 () STATE)
(declare-fun _381 () STATE)
(declare-fun _382 () STATE)
(declare-fun _383 () STATE)
(declare-fun _384 () STATE)
(declare-fun _385 () STATE)
(declare-fun _386 () STATE)
(declare-fun _387 () STATE)
(declare-fun _388 () STATE)
(declare-fun _389 () STATE)
(declare-fun _390 () STATE)
(declare-fun _391 () STATE)
(declare-fun _392 () STATE)
(declare-fun _393 () STATE)
(declare-fun _394 () STATE)
(declare-fun _395 () STATE)
(declare-fun _396 () STATE)
(declare-fun _397 () STATE)
(declare-fun _398 () STATE)
(declare-fun _399 () STATE)
(declare-fun _400 () STATE)
(declare-fun _401 () STATE)
(declare-fun _402 () STATE)
(declare-fun _403 () STATE)
(declare-fun _404 () STATE)
(declare-fun _405 () STATE)
(declare-fun _406 () STATE)
(declare-fun _407 () STATE)
(declare-fun _408 () STATE)
(declare-fun _409 () STATE)
(declare-fun _410 () STATE)
(declare-fun _411 () STATE)
(declare-fun _412 () STATE)
(declare-fun _413 () STATE)
(declare-fun _414 () STATE)
(declare-fun _415 () STATE)
(declare-fun _416 () STATE)
(declare-fun _417 () STATE)
(declare-fun _418 () STATE)
(declare-fun _419 () STATE)
(declare-fun _420 () STATE)
(declare-fun _421 () STATE)
(declare-fun _422 () STATE)
(declare-fun _423 () STATE)
(declare-fun _424 () STATE)
(declare-fun _425 () STATE)
(declare-fun _426 () STATE)
(declare-fun _427 () STATE)
(declare-fun _428 () STATE)
(declare-fun _429 () STATE)
(declare-fun _430 () STATE)
(assert
 (let ((?x439 (time-to-state 0)))
 (= ?x439 _0)))
(assert
 (let ((?x459 (input-arg0 0)))
 (= ?x459 0)))
(assert
 (let ((?x461 (var1_0 0)))
 (= ?x461 0)))
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _0) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _1) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x490 (= ?x489 _0)))
 (let (($x506 (and $x490 $x505)))
 (=> $x506 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _1) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _2) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x520 (= ?x489 _1)))
 (let (($x525 (and $x520 $x505)))
 (=> $x525 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _2) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _3) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x538 (= ?x489 _2)))
 (let (($x543 (and $x538 $x505)))
 (=> $x543 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _3) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _4) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x556 (= ?x489 _3)))
 (let (($x561 (and $x556 $x505)))
 (=> $x561 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _4) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _5) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x574 (= ?x489 _4)))
 (let (($x579 (and $x574 $x505)))
 (=> $x579 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _5) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _6) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x592 (= ?x489 _5)))
 (let (($x597 (and $x592 $x505)))
 (=> $x597 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _6) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _7) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x610 (= ?x489 _6)))
 (let (($x615 (and $x610 $x505)))
 (=> $x615 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _7) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _8) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x628 (= ?x489 _7)))
 (let (($x633 (and $x628 $x505)))
 (=> $x633 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _8) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _9) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x646 (= ?x489 _8)))
 (let (($x651 (and $x646 $x505)))
 (=> $x651 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _9) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _10) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x664 (= ?x489 _9)))
 (let (($x669 (and $x664 $x505)))
 (=> $x669 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _10) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _11) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x682 (= ?x489 _10)))
 (let (($x687 (and $x682 $x505)))
 (=> $x687 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _11) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _12) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x700 (= ?x489 _11)))
 (let (($x705 (and $x700 $x505)))
 (=> $x705 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _12) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _13) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x718 (= ?x489 _12)))
 (let (($x723 (and $x718 $x505)))
 (=> $x723 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _13) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _14) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x736 (= ?x489 _13)))
 (let (($x741 (and $x736 $x505)))
 (=> $x741 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _14) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _15) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x754 (= ?x489 _14)))
 (let (($x759 (and $x754 $x505)))
 (=> $x759 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _15) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _16) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x772 (= ?x489 _15)))
 (let (($x777 (and $x772 $x505)))
 (=> $x777 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _16) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _17) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x790 (= ?x489 _16)))
 (let (($x795 (and $x790 $x505)))
 (=> $x795 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _17) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _18) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x808 (= ?x489 _17)))
 (let (($x813 (and $x808 $x505)))
 (=> $x813 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _18) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _19) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x826 (= ?x489 _18)))
 (let (($x831 (and $x826 $x505)))
 (=> $x831 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _19) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _20) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x844 (= ?x489 _19)))
 (let (($x849 (and $x844 $x505)))
 (=> $x849 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _20) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _21) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x862 (= ?x489 _20)))
 (let (($x867 (and $x862 $x505)))
 (=> $x867 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _21) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _22) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x880 (= ?x489 _21)))
 (let (($x885 (and $x880 $x505)))
 (=> $x885 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _22) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _23) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x898 (= ?x489 _22)))
 (let (($x903 (and $x898 $x505)))
 (=> $x903 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _23) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _24) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x916 (= ?x489 _23)))
 (let (($x921 (and $x916 $x505)))
 (=> $x921 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _24) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _25) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x934 (= ?x489 _24)))
 (let (($x939 (and $x934 $x505)))
 (=> $x939 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _25) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _26) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x952 (= ?x489 _25)))
 (let (($x957 (and $x952 $x505)))
 (=> $x957 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _26) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _27) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x970 (= ?x489 _26)))
 (let (($x975 (and $x970 $x505)))
 (=> $x975 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _27) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _28) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x988 (= ?x489 _27)))
 (let (($x993 (and $x988 $x505)))
 (=> $x993 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _28) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _29) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1006 (= ?x489 _28)))
 (let (($x1011 (and $x1006 $x505)))
 (=> $x1011 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _29) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _30) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1024 (= ?x489 _29)))
 (let (($x1029 (and $x1024 $x505)))
 (=> $x1029 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _30) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _31) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1042 (= ?x489 _30)))
 (let (($x1047 (and $x1042 $x505)))
 (=> $x1047 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _31) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _32) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1060 (= ?x489 _31)))
 (let (($x1065 (and $x1060 $x505)))
 (=> $x1065 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _32) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _33) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1078 (= ?x489 _32)))
 (let (($x1083 (and $x1078 $x505)))
 (=> $x1083 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _33) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _34) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1096 (= ?x489 _33)))
 (let (($x1101 (and $x1096 $x505)))
 (=> $x1101 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _34) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _35) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1114 (= ?x489 _34)))
 (let (($x1119 (and $x1114 $x505)))
 (=> $x1119 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _35) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _36) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1132 (= ?x489 _35)))
 (let (($x1137 (and $x1132 $x505)))
 (=> $x1137 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _36) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _37) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1150 (= ?x489 _36)))
 (let (($x1155 (and $x1150 $x505)))
 (=> $x1155 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _37) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _38) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1168 (= ?x489 _37)))
 (let (($x1173 (and $x1168 $x505)))
 (=> $x1173 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _38) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _39) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1186 (= ?x489 _38)))
 (let (($x1191 (and $x1186 $x505)))
 (=> $x1191 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _39) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _40) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1204 (= ?x489 _39)))
 (let (($x1209 (and $x1204 $x505)))
 (=> $x1209 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _40) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _41) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1222 (= ?x489 _40)))
 (let (($x1227 (and $x1222 $x505)))
 (=> $x1227 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _41) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _42) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1240 (= ?x489 _41)))
 (let (($x1245 (and $x1240 $x505)))
 (=> $x1245 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _42) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _43) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1258 (= ?x489 _42)))
 (let (($x1263 (and $x1258 $x505)))
 (=> $x1263 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _43) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _44) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1276 (= ?x489 _43)))
 (let (($x1281 (and $x1276 $x505)))
 (=> $x1281 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _44) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _45) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1294 (= ?x489 _44)))
 (let (($x1299 (and $x1294 $x505)))
 (=> $x1299 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _45) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _46) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1312 (= ?x489 _45)))
 (let (($x1317 (and $x1312 $x505)))
 (=> $x1317 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _46) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _47) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1330 (= ?x489 _46)))
 (let (($x1335 (and $x1330 $x505)))
 (=> $x1335 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _47) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _48) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1348 (= ?x489 _47)))
 (let (($x1353 (and $x1348 $x505)))
 (=> $x1353 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _48) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _49) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1366 (= ?x489 _48)))
 (let (($x1371 (and $x1366 $x505)))
 (=> $x1371 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _49) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _50) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1384 (= ?x489 _49)))
 (let (($x1389 (and $x1384 $x505)))
 (=> $x1389 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _50) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _51) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1402 (= ?x489 _50)))
 (let (($x1407 (and $x1402 $x505)))
 (=> $x1407 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _51) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _52) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1420 (= ?x489 _51)))
 (let (($x1425 (and $x1420 $x505)))
 (=> $x1425 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _52) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _53) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1438 (= ?x489 _52)))
 (let (($x1443 (and $x1438 $x505)))
 (=> $x1443 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _53) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _54) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1456 (= ?x489 _53)))
 (let (($x1461 (and $x1456 $x505)))
 (=> $x1461 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _54) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _55) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1474 (= ?x489 _54)))
 (let (($x1479 (and $x1474 $x505)))
 (=> $x1479 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _55) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _56) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1492 (= ?x489 _55)))
 (let (($x1497 (and $x1492 $x505)))
 (=> $x1497 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _56) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _57) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1510 (= ?x489 _56)))
 (let (($x1515 (and $x1510 $x505)))
 (=> $x1515 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _57) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _58) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1528 (= ?x489 _57)))
 (let (($x1533 (and $x1528 $x505)))
 (=> $x1533 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _58) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _59) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1546 (= ?x489 _58)))
 (let (($x1551 (and $x1546 $x505)))
 (=> $x1551 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _59) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _60) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1564 (= ?x489 _59)))
 (let (($x1569 (and $x1564 $x505)))
 (=> $x1569 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _60) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _61) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1582 (= ?x489 _60)))
 (let (($x1587 (and $x1582 $x505)))
 (=> $x1587 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _61) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _62) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1600 (= ?x489 _61)))
 (let (($x1605 (and $x1600 $x505)))
 (=> $x1605 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _62) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _63) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1618 (= ?x489 _62)))
 (let (($x1623 (and $x1618 $x505)))
 (=> $x1623 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _63) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _64) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1636 (= ?x489 _63)))
 (let (($x1641 (and $x1636 $x505)))
 (=> $x1641 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _64) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _65) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1654 (= ?x489 _64)))
 (let (($x1659 (and $x1654 $x505)))
 (=> $x1659 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _65) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _66) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1672 (= ?x489 _65)))
 (let (($x1677 (and $x1672 $x505)))
 (=> $x1677 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _66) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _67) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1690 (= ?x489 _66)))
 (let (($x1695 (and $x1690 $x505)))
 (=> $x1695 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _67) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _68) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1708 (= ?x489 _67)))
 (let (($x1713 (and $x1708 $x505)))
 (=> $x1713 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _68) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _69) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1726 (= ?x489 _68)))
 (let (($x1731 (and $x1726 $x505)))
 (=> $x1731 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _69) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _70) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1744 (= ?x489 _69)))
 (let (($x1749 (and $x1744 $x505)))
 (=> $x1749 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _70) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _71) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1762 (= ?x489 _70)))
 (let (($x1767 (and $x1762 $x505)))
 (=> $x1767 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _71) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _72) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1780 (= ?x489 _71)))
 (let (($x1785 (and $x1780 $x505)))
 (=> $x1785 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _72) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _73) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1798 (= ?x489 _72)))
 (let (($x1803 (and $x1798 $x505)))
 (=> $x1803 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _73) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _74) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1816 (= ?x489 _73)))
 (let (($x1821 (and $x1816 $x505)))
 (=> $x1821 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _74) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _75) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1834 (= ?x489 _74)))
 (let (($x1839 (and $x1834 $x505)))
 (=> $x1839 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _75) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _76) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1852 (= ?x489 _75)))
 (let (($x1857 (and $x1852 $x505)))
 (=> $x1857 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _76) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _77) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1870 (= ?x489 _76)))
 (let (($x1875 (and $x1870 $x505)))
 (=> $x1875 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _77) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _78) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1888 (= ?x489 _77)))
 (let (($x1893 (and $x1888 $x505)))
 (=> $x1893 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _78) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _79) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1906 (= ?x489 _78)))
 (let (($x1911 (and $x1906 $x505)))
 (=> $x1911 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _79) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _80) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1924 (= ?x489 _79)))
 (let (($x1929 (and $x1924 $x505)))
 (=> $x1929 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _80) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _81) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1942 (= ?x489 _80)))
 (let (($x1947 (and $x1942 $x505)))
 (=> $x1947 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _81) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _82) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1960 (= ?x489 _81)))
 (let (($x1965 (and $x1960 $x505)))
 (=> $x1965 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _82) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _83) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1978 (= ?x489 _82)))
 (let (($x1983 (and $x1978 $x505)))
 (=> $x1983 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _83) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _84) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x1996 (= ?x489 _83)))
 (let (($x2001 (and $x1996 $x505)))
 (=> $x2001 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _84) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _85) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2014 (= ?x489 _84)))
 (let (($x2019 (and $x2014 $x505)))
 (=> $x2019 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _85) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _86) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2032 (= ?x489 _85)))
 (let (($x2037 (and $x2032 $x505)))
 (=> $x2037 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _86) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _87) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2050 (= ?x489 _86)))
 (let (($x2055 (and $x2050 $x505)))
 (=> $x2055 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _87) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _88) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2068 (= ?x489 _87)))
 (let (($x2073 (and $x2068 $x505)))
 (=> $x2073 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _88) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _89) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2086 (= ?x489 _88)))
 (let (($x2091 (and $x2086 $x505)))
 (=> $x2091 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _89) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _90) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2104 (= ?x489 _89)))
 (let (($x2109 (and $x2104 $x505)))
 (=> $x2109 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _90) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _91) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2122 (= ?x489 _90)))
 (let (($x2127 (and $x2122 $x505)))
 (=> $x2127 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _91) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _92) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2140 (= ?x489 _91)))
 (let (($x2145 (and $x2140 $x505)))
 (=> $x2145 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _92) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _93) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2158 (= ?x489 _92)))
 (let (($x2163 (and $x2158 $x505)))
 (=> $x2163 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _93) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _94) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2176 (= ?x489 _93)))
 (let (($x2181 (and $x2176 $x505)))
 (=> $x2181 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _94) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _95) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2194 (= ?x489 _94)))
 (let (($x2199 (and $x2194 $x505)))
 (=> $x2199 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _95) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _96) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2212 (= ?x489 _95)))
 (let (($x2217 (and $x2212 $x505)))
 (=> $x2217 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _96) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _97) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2230 (= ?x489 _96)))
 (let (($x2235 (and $x2230 $x505)))
 (=> $x2235 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _97) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _98) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2248 (= ?x489 _97)))
 (let (($x2253 (and $x2248 $x505)))
 (=> $x2253 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _98) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _99) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2266 (= ?x489 _98)))
 (let (($x2271 (and $x2266 $x505)))
 (=> $x2271 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _99) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _100) $x483))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2284 (= ?x489 _99)))
 (let (($x2289 (and $x2284 $x505)))
 (=> $x2289 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2302 (= ?x489 _100)))
 (=> (and $x2302 $x488) (and (= (time-to-state (+ time 1)) _101) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2302 (= ?x489 _100)))
 (let (($x2307 (and $x2302 $x505)))
 (=> $x2307 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2320 (= ?x489 _101)))
 (=> (and $x2320 $x488) (and (= (time-to-state (+ time 1)) _102) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2320 (= ?x489 _101)))
 (let (($x2325 (and $x2320 $x505)))
 (=> $x2325 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2338 (= ?x489 _102)))
 (=> (and $x2338 $x488) (and (= (time-to-state (+ time 1)) _103) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2338 (= ?x489 _102)))
 (let (($x2343 (and $x2338 $x505)))
 (=> $x2343 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2356 (= ?x489 _103)))
 (=> (and $x2356 $x488) (and (= (time-to-state (+ time 1)) _104) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2356 (= ?x489 _103)))
 (let (($x2361 (and $x2356 $x505)))
 (=> $x2361 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2374 (= ?x489 _104)))
 (=> (and $x2374 $x488) (and (= (time-to-state (+ time 1)) _105) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2374 (= ?x489 _104)))
 (let (($x2379 (and $x2374 $x505)))
 (=> $x2379 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2392 (= ?x489 _105)))
 (=> (and $x2392 $x488) (and (= (time-to-state (+ time 1)) _106) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2392 (= ?x489 _105)))
 (let (($x2397 (and $x2392 $x505)))
 (=> $x2397 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2410 (= ?x489 _106)))
 (=> (and $x2410 $x488) (and (= (time-to-state (+ time 1)) _107) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2410 (= ?x489 _106)))
 (let (($x2415 (and $x2410 $x505)))
 (=> $x2415 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2428 (= ?x489 _107)))
 (=> (and $x2428 $x488) (and (= (time-to-state (+ time 1)) _108) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2428 (= ?x489 _107)))
 (let (($x2433 (and $x2428 $x505)))
 (=> $x2433 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2446 (= ?x489 _108)))
 (=> (and $x2446 $x488) (and (= (time-to-state (+ time 1)) _109) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2446 (= ?x489 _108)))
 (let (($x2451 (and $x2446 $x505)))
 (=> $x2451 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2464 (= ?x489 _109)))
 (=> (and $x2464 $x488) (and (= (time-to-state (+ time 1)) _110) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2464 (= ?x489 _109)))
 (let (($x2469 (and $x2464 $x505)))
 (=> $x2469 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2482 (= ?x489 _110)))
 (=> (and $x2482 $x488) (and (= (time-to-state (+ time 1)) _111) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2482 (= ?x489 _110)))
 (let (($x2487 (and $x2482 $x505)))
 (=> $x2487 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2500 (= ?x489 _111)))
 (=> (and $x2500 $x488) (and (= (time-to-state (+ time 1)) _112) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2500 (= ?x489 _111)))
 (let (($x2505 (and $x2500 $x505)))
 (=> $x2505 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2518 (= ?x489 _112)))
 (=> (and $x2518 $x488) (and (= (time-to-state (+ time 1)) _113) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2518 (= ?x489 _112)))
 (let (($x2523 (and $x2518 $x505)))
 (=> $x2523 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2536 (= ?x489 _113)))
 (=> (and $x2536 $x488) (and (= (time-to-state (+ time 1)) _114) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2536 (= ?x489 _113)))
 (let (($x2541 (and $x2536 $x505)))
 (=> $x2541 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2554 (= ?x489 _114)))
 (=> (and $x2554 $x488) (and (= (time-to-state (+ time 1)) _115) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2554 (= ?x489 _114)))
 (let (($x2559 (and $x2554 $x505)))
 (=> $x2559 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2572 (= ?x489 _115)))
 (=> (and $x2572 $x488) (and (= (time-to-state (+ time 1)) _116) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2572 (= ?x489 _115)))
 (let (($x2577 (and $x2572 $x505)))
 (=> $x2577 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2590 (= ?x489 _116)))
 (=> (and $x2590 $x488) (and (= (time-to-state (+ time 1)) _117) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2590 (= ?x489 _116)))
 (let (($x2595 (and $x2590 $x505)))
 (=> $x2595 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2608 (= ?x489 _117)))
 (=> (and $x2608 $x488) (and (= (time-to-state (+ time 1)) _118) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2608 (= ?x489 _117)))
 (let (($x2613 (and $x2608 $x505)))
 (=> $x2613 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2626 (= ?x489 _118)))
 (=> (and $x2626 $x488) (and (= (time-to-state (+ time 1)) _119) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2626 (= ?x489 _118)))
 (let (($x2631 (and $x2626 $x505)))
 (=> $x2631 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2644 (= ?x489 _119)))
 (=> (and $x2644 $x488) (and (= (time-to-state (+ time 1)) _120) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2644 (= ?x489 _119)))
 (let (($x2649 (and $x2644 $x505)))
 (=> $x2649 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2662 (= ?x489 _120)))
 (=> (and $x2662 $x488) (and (= (time-to-state (+ time 1)) _121) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2662 (= ?x489 _120)))
 (let (($x2667 (and $x2662 $x505)))
 (=> $x2667 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2680 (= ?x489 _121)))
 (=> (and $x2680 $x488) (and (= (time-to-state (+ time 1)) _122) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2680 (= ?x489 _121)))
 (let (($x2685 (and $x2680 $x505)))
 (=> $x2685 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2698 (= ?x489 _122)))
 (=> (and $x2698 $x488) (and (= (time-to-state (+ time 1)) _123) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2698 (= ?x489 _122)))
 (let (($x2703 (and $x2698 $x505)))
 (=> $x2703 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2716 (= ?x489 _123)))
 (=> (and $x2716 $x488) (and (= (time-to-state (+ time 1)) _124) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2716 (= ?x489 _123)))
 (let (($x2721 (and $x2716 $x505)))
 (=> $x2721 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2734 (= ?x489 _124)))
 (=> (and $x2734 $x488) (and (= (time-to-state (+ time 1)) _125) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2734 (= ?x489 _124)))
 (let (($x2739 (and $x2734 $x505)))
 (=> $x2739 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2752 (= ?x489 _125)))
 (=> (and $x2752 $x488) (and (= (time-to-state (+ time 1)) _126) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2752 (= ?x489 _125)))
 (let (($x2757 (and $x2752 $x505)))
 (=> $x2757 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2770 (= ?x489 _126)))
 (=> (and $x2770 $x488) (and (= (time-to-state (+ time 1)) _127) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2770 (= ?x489 _126)))
 (let (($x2775 (and $x2770 $x505)))
 (=> $x2775 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2788 (= ?x489 _127)))
 (=> (and $x2788 $x488) (and (= (time-to-state (+ time 1)) _128) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2788 (= ?x489 _127)))
 (let (($x2793 (and $x2788 $x505)))
 (=> $x2793 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2806 (= ?x489 _128)))
 (=> (and $x2806 $x488) (and (= (time-to-state (+ time 1)) _129) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2806 (= ?x489 _128)))
 (let (($x2811 (and $x2806 $x505)))
 (=> $x2811 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2824 (= ?x489 _129)))
 (=> (and $x2824 $x488) (and (= (time-to-state (+ time 1)) _130) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2824 (= ?x489 _129)))
 (let (($x2829 (and $x2824 $x505)))
 (=> $x2829 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2842 (= ?x489 _130)))
 (=> (and $x2842 $x488) (and (= (time-to-state (+ time 1)) _131) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2842 (= ?x489 _130)))
 (let (($x2847 (and $x2842 $x505)))
 (=> $x2847 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2860 (= ?x489 _131)))
 (=> (and $x2860 $x488) (and (= (time-to-state (+ time 1)) _132) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2860 (= ?x489 _131)))
 (let (($x2865 (and $x2860 $x505)))
 (=> $x2865 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2878 (= ?x489 _132)))
 (=> (and $x2878 $x488) (and (= (time-to-state (+ time 1)) _133) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2878 (= ?x489 _132)))
 (let (($x2883 (and $x2878 $x505)))
 (=> $x2883 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2896 (= ?x489 _133)))
 (=> (and $x2896 $x488) (and (= (time-to-state (+ time 1)) _134) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2896 (= ?x489 _133)))
 (let (($x2901 (and $x2896 $x505)))
 (=> $x2901 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2914 (= ?x489 _134)))
 (=> (and $x2914 $x488) (and (= (time-to-state (+ time 1)) _135) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2914 (= ?x489 _134)))
 (let (($x2919 (and $x2914 $x505)))
 (=> $x2919 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2932 (= ?x489 _135)))
 (=> (and $x2932 $x488) (and (= (time-to-state (+ time 1)) _136) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2932 (= ?x489 _135)))
 (let (($x2937 (and $x2932 $x505)))
 (=> $x2937 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2950 (= ?x489 _136)))
 (=> (and $x2950 $x488) (and (= (time-to-state (+ time 1)) _137) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2950 (= ?x489 _136)))
 (let (($x2955 (and $x2950 $x505)))
 (=> $x2955 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2968 (= ?x489 _137)))
 (=> (and $x2968 $x488) (and (= (time-to-state (+ time 1)) _138) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2968 (= ?x489 _137)))
 (let (($x2973 (and $x2968 $x505)))
 (=> $x2973 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x2986 (= ?x489 _138)))
 (=> (and $x2986 $x488) (and (= (time-to-state (+ time 1)) _139) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x2986 (= ?x489 _138)))
 (let (($x2991 (and $x2986 $x505)))
 (=> $x2991 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3004 (= ?x489 _139)))
 (=> (and $x3004 $x488) (and (= (time-to-state (+ time 1)) _140) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3004 (= ?x489 _139)))
 (let (($x3009 (and $x3004 $x505)))
 (=> $x3009 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3022 (= ?x489 _140)))
 (=> (and $x3022 $x488) (and (= (time-to-state (+ time 1)) _141) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3022 (= ?x489 _140)))
 (let (($x3027 (and $x3022 $x505)))
 (=> $x3027 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3040 (= ?x489 _141)))
 (=> (and $x3040 $x488) (and (= (time-to-state (+ time 1)) _142) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3040 (= ?x489 _141)))
 (let (($x3045 (and $x3040 $x505)))
 (=> $x3045 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3058 (= ?x489 _142)))
 (=> (and $x3058 $x488) (and (= (time-to-state (+ time 1)) _143) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3058 (= ?x489 _142)))
 (let (($x3063 (and $x3058 $x505)))
 (=> $x3063 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3076 (= ?x489 _143)))
 (=> (and $x3076 $x488) (and (= (time-to-state (+ time 1)) _144) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3076 (= ?x489 _143)))
 (let (($x3081 (and $x3076 $x505)))
 (=> $x3081 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3094 (= ?x489 _144)))
 (=> (and $x3094 $x488) (and (= (time-to-state (+ time 1)) _145) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3094 (= ?x489 _144)))
 (let (($x3099 (and $x3094 $x505)))
 (=> $x3099 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3112 (= ?x489 _145)))
 (=> (and $x3112 $x488) (and (= (time-to-state (+ time 1)) _146) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3112 (= ?x489 _145)))
 (let (($x3117 (and $x3112 $x505)))
 (=> $x3117 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3130 (= ?x489 _146)))
 (=> (and $x3130 $x488) (and (= (time-to-state (+ time 1)) _147) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3130 (= ?x489 _146)))
 (let (($x3135 (and $x3130 $x505)))
 (=> $x3135 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3148 (= ?x489 _147)))
 (=> (and $x3148 $x488) (and (= (time-to-state (+ time 1)) _148) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3148 (= ?x489 _147)))
 (let (($x3153 (and $x3148 $x505)))
 (=> $x3153 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3166 (= ?x489 _148)))
 (=> (and $x3166 $x488) (and (= (time-to-state (+ time 1)) _149) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3166 (= ?x489 _148)))
 (let (($x3171 (and $x3166 $x505)))
 (=> $x3171 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3184 (= ?x489 _149)))
 (=> (and $x3184 $x488) (and (= (time-to-state (+ time 1)) _150) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3184 (= ?x489 _149)))
 (let (($x3189 (and $x3184 $x505)))
 (=> $x3189 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3202 (= ?x489 _150)))
 (=> (and $x3202 $x488) (and (= (time-to-state (+ time 1)) _151) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3202 (= ?x489 _150)))
 (let (($x3207 (and $x3202 $x505)))
 (=> $x3207 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3220 (= ?x489 _151)))
 (=> (and $x3220 $x488) (and (= (time-to-state (+ time 1)) _152) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3220 (= ?x489 _151)))
 (let (($x3225 (and $x3220 $x505)))
 (=> $x3225 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3238 (= ?x489 _152)))
 (=> (and $x3238 $x488) (and (= (time-to-state (+ time 1)) _153) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3238 (= ?x489 _152)))
 (let (($x3243 (and $x3238 $x505)))
 (=> $x3243 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3256 (= ?x489 _153)))
 (=> (and $x3256 $x488) (and (= (time-to-state (+ time 1)) _154) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3256 (= ?x489 _153)))
 (let (($x3261 (and $x3256 $x505)))
 (=> $x3261 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3274 (= ?x489 _154)))
 (=> (and $x3274 $x488) (and (= (time-to-state (+ time 1)) _155) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3274 (= ?x489 _154)))
 (let (($x3279 (and $x3274 $x505)))
 (=> $x3279 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3292 (= ?x489 _155)))
 (=> (and $x3292 $x488) (and (= (time-to-state (+ time 1)) _156) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3292 (= ?x489 _155)))
 (let (($x3297 (and $x3292 $x505)))
 (=> $x3297 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3310 (= ?x489 _156)))
 (=> (and $x3310 $x488) (and (= (time-to-state (+ time 1)) _157) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3310 (= ?x489 _156)))
 (let (($x3315 (and $x3310 $x505)))
 (=> $x3315 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3328 (= ?x489 _157)))
 (=> (and $x3328 $x488) (and (= (time-to-state (+ time 1)) _158) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3328 (= ?x489 _157)))
 (let (($x3333 (and $x3328 $x505)))
 (=> $x3333 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3346 (= ?x489 _158)))
 (=> (and $x3346 $x488) (and (= (time-to-state (+ time 1)) _159) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3346 (= ?x489 _158)))
 (let (($x3351 (and $x3346 $x505)))
 (=> $x3351 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3364 (= ?x489 _159)))
 (=> (and $x3364 $x488) (and (= (time-to-state (+ time 1)) _160) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3364 (= ?x489 _159)))
 (let (($x3369 (and $x3364 $x505)))
 (=> $x3369 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3382 (= ?x489 _160)))
 (=> (and $x3382 $x488) (and (= (time-to-state (+ time 1)) _161) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3382 (= ?x489 _160)))
 (let (($x3387 (and $x3382 $x505)))
 (=> $x3387 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3400 (= ?x489 _161)))
 (=> (and $x3400 $x488) (and (= (time-to-state (+ time 1)) _162) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3400 (= ?x489 _161)))
 (let (($x3405 (and $x3400 $x505)))
 (=> $x3405 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3418 (= ?x489 _162)))
 (=> (and $x3418 $x488) (and (= (time-to-state (+ time 1)) _163) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3418 (= ?x489 _162)))
 (let (($x3423 (and $x3418 $x505)))
 (=> $x3423 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3436 (= ?x489 _163)))
 (=> (and $x3436 $x488) (and (= (time-to-state (+ time 1)) _164) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3436 (= ?x489 _163)))
 (let (($x3441 (and $x3436 $x505)))
 (=> $x3441 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3454 (= ?x489 _164)))
 (=> (and $x3454 $x488) (and (= (time-to-state (+ time 1)) _165) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3454 (= ?x489 _164)))
 (let (($x3459 (and $x3454 $x505)))
 (=> $x3459 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3472 (= ?x489 _165)))
 (=> (and $x3472 $x488) (and (= (time-to-state (+ time 1)) _166) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3472 (= ?x489 _165)))
 (let (($x3477 (and $x3472 $x505)))
 (=> $x3477 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3490 (= ?x489 _166)))
 (=> (and $x3490 $x488) (and (= (time-to-state (+ time 1)) _167) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3490 (= ?x489 _166)))
 (let (($x3495 (and $x3490 $x505)))
 (=> $x3495 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3508 (= ?x489 _167)))
 (=> (and $x3508 $x488) (and (= (time-to-state (+ time 1)) _168) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3508 (= ?x489 _167)))
 (let (($x3513 (and $x3508 $x505)))
 (=> $x3513 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3526 (= ?x489 _168)))
 (=> (and $x3526 $x488) (and (= (time-to-state (+ time 1)) _169) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3526 (= ?x489 _168)))
 (let (($x3531 (and $x3526 $x505)))
 (=> $x3531 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3544 (= ?x489 _169)))
 (=> (and $x3544 $x488) (and (= (time-to-state (+ time 1)) _170) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3544 (= ?x489 _169)))
 (let (($x3549 (and $x3544 $x505)))
 (=> $x3549 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3562 (= ?x489 _170)))
 (=> (and $x3562 $x488) (and (= (time-to-state (+ time 1)) _171) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3562 (= ?x489 _170)))
 (let (($x3567 (and $x3562 $x505)))
 (=> $x3567 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3580 (= ?x489 _171)))
 (=> (and $x3580 $x488) (and (= (time-to-state (+ time 1)) _172) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3580 (= ?x489 _171)))
 (let (($x3585 (and $x3580 $x505)))
 (=> $x3585 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3598 (= ?x489 _172)))
 (=> (and $x3598 $x488) (and (= (time-to-state (+ time 1)) _173) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3598 (= ?x489 _172)))
 (let (($x3603 (and $x3598 $x505)))
 (=> $x3603 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3616 (= ?x489 _173)))
 (=> (and $x3616 $x488) (and (= (time-to-state (+ time 1)) _174) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3616 (= ?x489 _173)))
 (let (($x3621 (and $x3616 $x505)))
 (=> $x3621 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3634 (= ?x489 _174)))
 (=> (and $x3634 $x488) (and (= (time-to-state (+ time 1)) _175) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3634 (= ?x489 _174)))
 (let (($x3639 (and $x3634 $x505)))
 (=> $x3639 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3652 (= ?x489 _175)))
 (=> (and $x3652 $x488) (and (= (time-to-state (+ time 1)) _176) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3652 (= ?x489 _175)))
 (let (($x3657 (and $x3652 $x505)))
 (=> $x3657 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3670 (= ?x489 _176)))
 (=> (and $x3670 $x488) (and (= (time-to-state (+ time 1)) _177) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3670 (= ?x489 _176)))
 (let (($x3675 (and $x3670 $x505)))
 (=> $x3675 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3688 (= ?x489 _177)))
 (=> (and $x3688 $x488) (and (= (time-to-state (+ time 1)) _178) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3688 (= ?x489 _177)))
 (let (($x3693 (and $x3688 $x505)))
 (=> $x3693 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3706 (= ?x489 _178)))
 (=> (and $x3706 $x488) (and (= (time-to-state (+ time 1)) _179) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3706 (= ?x489 _178)))
 (let (($x3711 (and $x3706 $x505)))
 (=> $x3711 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3724 (= ?x489 _179)))
 (=> (and $x3724 $x488) (and (= (time-to-state (+ time 1)) _180) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3724 (= ?x489 _179)))
 (let (($x3729 (and $x3724 $x505)))
 (=> $x3729 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3742 (= ?x489 _180)))
 (=> (and $x3742 $x488) (and (= (time-to-state (+ time 1)) _181) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3742 (= ?x489 _180)))
 (let (($x3747 (and $x3742 $x505)))
 (=> $x3747 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3760 (= ?x489 _181)))
 (=> (and $x3760 $x488) (and (= (time-to-state (+ time 1)) _182) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3760 (= ?x489 _181)))
 (let (($x3765 (and $x3760 $x505)))
 (=> $x3765 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3778 (= ?x489 _182)))
 (=> (and $x3778 $x488) (and (= (time-to-state (+ time 1)) _183) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3778 (= ?x489 _182)))
 (let (($x3783 (and $x3778 $x505)))
 (=> $x3783 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3796 (= ?x489 _183)))
 (=> (and $x3796 $x488) (and (= (time-to-state (+ time 1)) _184) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3796 (= ?x489 _183)))
 (let (($x3801 (and $x3796 $x505)))
 (=> $x3801 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3814 (= ?x489 _184)))
 (=> (and $x3814 $x488) (and (= (time-to-state (+ time 1)) _185) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3814 (= ?x489 _184)))
 (let (($x3819 (and $x3814 $x505)))
 (=> $x3819 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3832 (= ?x489 _185)))
 (=> (and $x3832 $x488) (and (= (time-to-state (+ time 1)) _186) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3832 (= ?x489 _185)))
 (let (($x3837 (and $x3832 $x505)))
 (=> $x3837 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3850 (= ?x489 _186)))
 (=> (and $x3850 $x488) (and (= (time-to-state (+ time 1)) _187) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3850 (= ?x489 _186)))
 (let (($x3855 (and $x3850 $x505)))
 (=> $x3855 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3868 (= ?x489 _187)))
 (=> (and $x3868 $x488) (and (= (time-to-state (+ time 1)) _188) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3868 (= ?x489 _187)))
 (let (($x3873 (and $x3868 $x505)))
 (=> $x3873 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3886 (= ?x489 _188)))
 (=> (and $x3886 $x488) (and (= (time-to-state (+ time 1)) _189) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3886 (= ?x489 _188)))
 (let (($x3891 (and $x3886 $x505)))
 (=> $x3891 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3904 (= ?x489 _189)))
 (=> (and $x3904 $x488) (and (= (time-to-state (+ time 1)) _190) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3904 (= ?x489 _189)))
 (let (($x3909 (and $x3904 $x505)))
 (=> $x3909 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3922 (= ?x489 _190)))
 (=> (and $x3922 $x488) (and (= (time-to-state (+ time 1)) _191) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3922 (= ?x489 _190)))
 (let (($x3927 (and $x3922 $x505)))
 (=> $x3927 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3940 (= ?x489 _191)))
 (=> (and $x3940 $x488) (and (= (time-to-state (+ time 1)) _192) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3940 (= ?x489 _191)))
 (let (($x3945 (and $x3940 $x505)))
 (=> $x3945 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3958 (= ?x489 _192)))
 (=> (and $x3958 $x488) (and (= (time-to-state (+ time 1)) _193) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3958 (= ?x489 _192)))
 (let (($x3963 (and $x3958 $x505)))
 (=> $x3963 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3976 (= ?x489 _193)))
 (=> (and $x3976 $x488) (and (= (time-to-state (+ time 1)) _194) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3976 (= ?x489 _193)))
 (let (($x3981 (and $x3976 $x505)))
 (=> $x3981 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x3994 (= ?x489 _194)))
 (=> (and $x3994 $x488) (and (= (time-to-state (+ time 1)) _195) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x3994 (= ?x489 _194)))
 (let (($x3999 (and $x3994 $x505)))
 (=> $x3999 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4012 (= ?x489 _195)))
 (=> (and $x4012 $x488) (and (= (time-to-state (+ time 1)) _196) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4012 (= ?x489 _195)))
 (let (($x4017 (and $x4012 $x505)))
 (=> $x4017 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4030 (= ?x489 _196)))
 (=> (and $x4030 $x488) (and (= (time-to-state (+ time 1)) _197) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4030 (= ?x489 _196)))
 (let (($x4035 (and $x4030 $x505)))
 (=> $x4035 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4048 (= ?x489 _197)))
 (=> (and $x4048 $x488) (and (= (time-to-state (+ time 1)) _198) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4048 (= ?x489 _197)))
 (let (($x4053 (and $x4048 $x505)))
 (=> $x4053 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4066 (= ?x489 _198)))
 (=> (and $x4066 $x488) (and (= (time-to-state (+ time 1)) _199) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4066 (= ?x489 _198)))
 (let (($x4071 (and $x4066 $x505)))
 (=> $x4071 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4084 (= ?x489 _199)))
 (=> (and $x4084 $x488) (and (= (time-to-state (+ time 1)) _200) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4084 (= ?x489 _199)))
 (let (($x4089 (and $x4084 $x505)))
 (=> $x4089 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4102 (= ?x489 _200)))
 (=> (and $x4102 $x488) (and (= (time-to-state (+ time 1)) _201) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4102 (= ?x489 _200)))
 (let (($x4107 (and $x4102 $x505)))
 (=> $x4107 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4120 (= ?x489 _201)))
 (=> (and $x4120 $x488) (and (= (time-to-state (+ time 1)) _202) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4120 (= ?x489 _201)))
 (let (($x4125 (and $x4120 $x505)))
 (=> $x4125 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4138 (= ?x489 _202)))
 (=> (and $x4138 $x488) (and (= (time-to-state (+ time 1)) _203) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4138 (= ?x489 _202)))
 (let (($x4143 (and $x4138 $x505)))
 (=> $x4143 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4156 (= ?x489 _203)))
 (=> (and $x4156 $x488) (and (= (time-to-state (+ time 1)) _204) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4156 (= ?x489 _203)))
 (let (($x4161 (and $x4156 $x505)))
 (=> $x4161 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4174 (= ?x489 _204)))
 (=> (and $x4174 $x488) (and (= (time-to-state (+ time 1)) _205) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4174 (= ?x489 _204)))
 (let (($x4179 (and $x4174 $x505)))
 (=> $x4179 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4192 (= ?x489 _205)))
 (=> (and $x4192 $x488) (and (= (time-to-state (+ time 1)) _206) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4192 (= ?x489 _205)))
 (let (($x4197 (and $x4192 $x505)))
 (=> $x4197 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4210 (= ?x489 _206)))
 (=> (and $x4210 $x488) (and (= (time-to-state (+ time 1)) _207) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4210 (= ?x489 _206)))
 (let (($x4215 (and $x4210 $x505)))
 (=> $x4215 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4228 (= ?x489 _207)))
 (=> (and $x4228 $x488) (and (= (time-to-state (+ time 1)) _208) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4228 (= ?x489 _207)))
 (let (($x4233 (and $x4228 $x505)))
 (=> $x4233 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4246 (= ?x489 _208)))
 (=> (and $x4246 $x488) (and (= (time-to-state (+ time 1)) _209) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4246 (= ?x489 _208)))
 (let (($x4251 (and $x4246 $x505)))
 (=> $x4251 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4264 (= ?x489 _209)))
 (=> (and $x4264 $x488) (and (= (time-to-state (+ time 1)) _210) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4264 (= ?x489 _209)))
 (let (($x4269 (and $x4264 $x505)))
 (=> $x4269 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4282 (= ?x489 _210)))
 (=> (and $x4282 $x488) (and (= (time-to-state (+ time 1)) _211) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4282 (= ?x489 _210)))
 (let (($x4287 (and $x4282 $x505)))
 (=> $x4287 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4300 (= ?x489 _211)))
 (=> (and $x4300 $x488) (and (= (time-to-state (+ time 1)) _212) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4300 (= ?x489 _211)))
 (let (($x4305 (and $x4300 $x505)))
 (=> $x4305 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4318 (= ?x489 _212)))
 (=> (and $x4318 $x488) (and (= (time-to-state (+ time 1)) _213) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4318 (= ?x489 _212)))
 (let (($x4323 (and $x4318 $x505)))
 (=> $x4323 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4336 (= ?x489 _213)))
 (=> (and $x4336 $x488) (and (= (time-to-state (+ time 1)) _214) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4336 (= ?x489 _213)))
 (let (($x4341 (and $x4336 $x505)))
 (=> $x4341 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4354 (= ?x489 _214)))
 (=> (and $x4354 $x488) (and (= (time-to-state (+ time 1)) _215) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4354 (= ?x489 _214)))
 (let (($x4359 (and $x4354 $x505)))
 (=> $x4359 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4372 (= ?x489 _215)))
 (=> (and $x4372 $x488) (and (= (time-to-state (+ time 1)) _216) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4372 (= ?x489 _215)))
 (let (($x4377 (and $x4372 $x505)))
 (=> $x4377 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4390 (= ?x489 _216)))
 (=> (and $x4390 $x488) (and (= (time-to-state (+ time 1)) _217) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4390 (= ?x489 _216)))
 (let (($x4395 (and $x4390 $x505)))
 (=> $x4395 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4408 (= ?x489 _217)))
 (=> (and $x4408 $x488) (and (= (time-to-state (+ time 1)) _218) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4408 (= ?x489 _217)))
 (let (($x4413 (and $x4408 $x505)))
 (=> $x4413 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4426 (= ?x489 _218)))
 (=> (and $x4426 $x488) (and (= (time-to-state (+ time 1)) _219) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4426 (= ?x489 _218)))
 (let (($x4431 (and $x4426 $x505)))
 (=> $x4431 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4444 (= ?x489 _219)))
 (=> (and $x4444 $x488) (and (= (time-to-state (+ time 1)) _220) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4444 (= ?x489 _219)))
 (let (($x4449 (and $x4444 $x505)))
 (=> $x4449 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4462 (= ?x489 _220)))
 (=> (and $x4462 $x488) (and (= (time-to-state (+ time 1)) _221) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4462 (= ?x489 _220)))
 (let (($x4467 (and $x4462 $x505)))
 (=> $x4467 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4480 (= ?x489 _221)))
 (=> (and $x4480 $x488) (and (= (time-to-state (+ time 1)) _222) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4480 (= ?x489 _221)))
 (let (($x4485 (and $x4480 $x505)))
 (=> $x4485 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4498 (= ?x489 _222)))
 (=> (and $x4498 $x488) (and (= (time-to-state (+ time 1)) _223) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4498 (= ?x489 _222)))
 (let (($x4503 (and $x4498 $x505)))
 (=> $x4503 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4516 (= ?x489 _223)))
 (=> (and $x4516 $x488) (and (= (time-to-state (+ time 1)) _224) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4516 (= ?x489 _223)))
 (let (($x4521 (and $x4516 $x505)))
 (=> $x4521 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4534 (= ?x489 _224)))
 (=> (and $x4534 $x488) (and (= (time-to-state (+ time 1)) _225) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4534 (= ?x489 _224)))
 (let (($x4539 (and $x4534 $x505)))
 (=> $x4539 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4552 (= ?x489 _225)))
 (=> (and $x4552 $x488) (and (= (time-to-state (+ time 1)) _226) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4552 (= ?x489 _225)))
 (let (($x4557 (and $x4552 $x505)))
 (=> $x4557 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4570 (= ?x489 _226)))
 (=> (and $x4570 $x488) (and (= (time-to-state (+ time 1)) _227) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4570 (= ?x489 _226)))
 (let (($x4575 (and $x4570 $x505)))
 (=> $x4575 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4588 (= ?x489 _227)))
 (=> (and $x4588 $x488) (and (= (time-to-state (+ time 1)) _228) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4588 (= ?x489 _227)))
 (let (($x4593 (and $x4588 $x505)))
 (=> $x4593 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4606 (= ?x489 _228)))
 (=> (and $x4606 $x488) (and (= (time-to-state (+ time 1)) _229) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4606 (= ?x489 _228)))
 (let (($x4611 (and $x4606 $x505)))
 (=> $x4611 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4624 (= ?x489 _229)))
 (=> (and $x4624 $x488) (and (= (time-to-state (+ time 1)) _230) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4624 (= ?x489 _229)))
 (let (($x4629 (and $x4624 $x505)))
 (=> $x4629 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4642 (= ?x489 _230)))
 (=> (and $x4642 $x488) (and (= (time-to-state (+ time 1)) _231) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4642 (= ?x489 _230)))
 (let (($x4647 (and $x4642 $x505)))
 (=> $x4647 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4660 (= ?x489 _231)))
 (=> (and $x4660 $x488) (and (= (time-to-state (+ time 1)) _232) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4660 (= ?x489 _231)))
 (let (($x4665 (and $x4660 $x505)))
 (=> $x4665 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4678 (= ?x489 _232)))
 (=> (and $x4678 $x488) (and (= (time-to-state (+ time 1)) _233) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4678 (= ?x489 _232)))
 (let (($x4683 (and $x4678 $x505)))
 (=> $x4683 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4696 (= ?x489 _233)))
 (=> (and $x4696 $x488) (and (= (time-to-state (+ time 1)) _234) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4696 (= ?x489 _233)))
 (let (($x4701 (and $x4696 $x505)))
 (=> $x4701 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4714 (= ?x489 _234)))
 (=> (and $x4714 $x488) (and (= (time-to-state (+ time 1)) _235) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4714 (= ?x489 _234)))
 (let (($x4719 (and $x4714 $x505)))
 (=> $x4719 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4732 (= ?x489 _235)))
 (=> (and $x4732 $x488) (and (= (time-to-state (+ time 1)) _236) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4732 (= ?x489 _235)))
 (let (($x4737 (and $x4732 $x505)))
 (=> $x4737 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4750 (= ?x489 _236)))
 (=> (and $x4750 $x488) (and (= (time-to-state (+ time 1)) _237) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4750 (= ?x489 _236)))
 (let (($x4755 (and $x4750 $x505)))
 (=> $x4755 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4768 (= ?x489 _237)))
 (=> (and $x4768 $x488) (and (= (time-to-state (+ time 1)) _238) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4768 (= ?x489 _237)))
 (let (($x4773 (and $x4768 $x505)))
 (=> $x4773 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4786 (= ?x489 _238)))
 (=> (and $x4786 $x488) (and (= (time-to-state (+ time 1)) _239) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4786 (= ?x489 _238)))
 (let (($x4791 (and $x4786 $x505)))
 (=> $x4791 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4804 (= ?x489 _239)))
 (=> (and $x4804 $x488) (and (= (time-to-state (+ time 1)) _240) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4804 (= ?x489 _239)))
 (let (($x4809 (and $x4804 $x505)))
 (=> $x4809 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4822 (= ?x489 _240)))
 (=> (and $x4822 $x488) (and (= (time-to-state (+ time 1)) _241) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4822 (= ?x489 _240)))
 (let (($x4827 (and $x4822 $x505)))
 (=> $x4827 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4840 (= ?x489 _241)))
 (=> (and $x4840 $x488) (and (= (time-to-state (+ time 1)) _242) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4840 (= ?x489 _241)))
 (let (($x4845 (and $x4840 $x505)))
 (=> $x4845 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4858 (= ?x489 _242)))
 (=> (and $x4858 $x488) (and (= (time-to-state (+ time 1)) _243) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4858 (= ?x489 _242)))
 (let (($x4863 (and $x4858 $x505)))
 (=> $x4863 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4876 (= ?x489 _243)))
 (=> (and $x4876 $x488) (and (= (time-to-state (+ time 1)) _244) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4876 (= ?x489 _243)))
 (let (($x4881 (and $x4876 $x505)))
 (=> $x4881 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4894 (= ?x489 _244)))
 (=> (and $x4894 $x488) (and (= (time-to-state (+ time 1)) _245) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4894 (= ?x489 _244)))
 (let (($x4899 (and $x4894 $x505)))
 (=> $x4899 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4912 (= ?x489 _245)))
 (=> (and $x4912 $x488) (and (= (time-to-state (+ time 1)) _246) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4912 (= ?x489 _245)))
 (let (($x4917 (and $x4912 $x505)))
 (=> $x4917 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4930 (= ?x489 _246)))
 (=> (and $x4930 $x488) (and (= (time-to-state (+ time 1)) _247) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4930 (= ?x489 _246)))
 (let (($x4935 (and $x4930 $x505)))
 (=> $x4935 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4948 (= ?x489 _247)))
 (=> (and $x4948 $x488) (and (= (time-to-state (+ time 1)) _248) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4948 (= ?x489 _247)))
 (let (($x4953 (and $x4948 $x505)))
 (=> $x4953 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4966 (= ?x489 _248)))
 (=> (and $x4966 $x488) (and (= (time-to-state (+ time 1)) _249) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4966 (= ?x489 _248)))
 (let (($x4971 (and $x4966 $x505)))
 (=> $x4971 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x4984 (= ?x489 _249)))
 (=> (and $x4984 $x488) (and (= (time-to-state (+ time 1)) _250) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x4984 (= ?x489 _249)))
 (let (($x4989 (and $x4984 $x505)))
 (=> $x4989 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5002 (= ?x489 _250)))
 (=> (and $x5002 $x488) (and (= (time-to-state (+ time 1)) _251) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5002 (= ?x489 _250)))
 (let (($x5007 (and $x5002 $x505)))
 (=> $x5007 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5020 (= ?x489 _251)))
 (=> (and $x5020 $x488) (and (= (time-to-state (+ time 1)) _252) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5020 (= ?x489 _251)))
 (let (($x5025 (and $x5020 $x505)))
 (=> $x5025 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5038 (= ?x489 _252)))
 (=> (and $x5038 $x488) (and (= (time-to-state (+ time 1)) _253) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5038 (= ?x489 _252)))
 (let (($x5043 (and $x5038 $x505)))
 (=> $x5043 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5056 (= ?x489 _253)))
 (=> (and $x5056 $x488) (and (= (time-to-state (+ time 1)) _254) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5056 (= ?x489 _253)))
 (let (($x5061 (and $x5056 $x505)))
 (=> $x5061 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5074 (= ?x489 _254)))
 (=> (and $x5074 $x488) (and (= (time-to-state (+ time 1)) _255) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5074 (= ?x489 _254)))
 (let (($x5079 (and $x5074 $x505)))
 (=> $x5079 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5092 (= ?x489 _255)))
 (=> (and $x5092 $x488) (and (= (time-to-state (+ time 1)) _256) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5092 (= ?x489 _255)))
 (let (($x5097 (and $x5092 $x505)))
 (=> $x5097 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5110 (= ?x489 _256)))
 (=> (and $x5110 $x488) (and (= (time-to-state (+ time 1)) _257) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5110 (= ?x489 _256)))
 (let (($x5115 (and $x5110 $x505)))
 (=> $x5115 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5128 (= ?x489 _257)))
 (=> (and $x5128 $x488) (and (= (time-to-state (+ time 1)) _258) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5128 (= ?x489 _257)))
 (let (($x5133 (and $x5128 $x505)))
 (=> $x5133 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5146 (= ?x489 _258)))
 (=> (and $x5146 $x488) (and (= (time-to-state (+ time 1)) _259) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5146 (= ?x489 _258)))
 (let (($x5151 (and $x5146 $x505)))
 (=> $x5151 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5164 (= ?x489 _259)))
 (=> (and $x5164 $x488) (and (= (time-to-state (+ time 1)) _260) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5164 (= ?x489 _259)))
 (let (($x5169 (and $x5164 $x505)))
 (=> $x5169 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5182 (= ?x489 _260)))
 (=> (and $x5182 $x488) (and (= (time-to-state (+ time 1)) _261) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5182 (= ?x489 _260)))
 (let (($x5187 (and $x5182 $x505)))
 (=> $x5187 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5200 (= ?x489 _261)))
 (=> (and $x5200 $x488) (and (= (time-to-state (+ time 1)) _262) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5200 (= ?x489 _261)))
 (let (($x5205 (and $x5200 $x505)))
 (=> $x5205 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5218 (= ?x489 _262)))
 (=> (and $x5218 $x488) (and (= (time-to-state (+ time 1)) _263) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5218 (= ?x489 _262)))
 (let (($x5223 (and $x5218 $x505)))
 (=> $x5223 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5236 (= ?x489 _263)))
 (=> (and $x5236 $x488) (and (= (time-to-state (+ time 1)) _264) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5236 (= ?x489 _263)))
 (let (($x5241 (and $x5236 $x505)))
 (=> $x5241 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5254 (= ?x489 _264)))
 (=> (and $x5254 $x488) (and (= (time-to-state (+ time 1)) _265) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5254 (= ?x489 _264)))
 (let (($x5259 (and $x5254 $x505)))
 (=> $x5259 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5272 (= ?x489 _265)))
 (=> (and $x5272 $x488) (and (= (time-to-state (+ time 1)) _266) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5272 (= ?x489 _265)))
 (let (($x5277 (and $x5272 $x505)))
 (=> $x5277 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5290 (= ?x489 _266)))
 (=> (and $x5290 $x488) (and (= (time-to-state (+ time 1)) _267) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5290 (= ?x489 _266)))
 (let (($x5295 (and $x5290 $x505)))
 (=> $x5295 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5308 (= ?x489 _267)))
 (=> (and $x5308 $x488) (and (= (time-to-state (+ time 1)) _268) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5308 (= ?x489 _267)))
 (let (($x5313 (and $x5308 $x505)))
 (=> $x5313 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5326 (= ?x489 _268)))
 (=> (and $x5326 $x488) (and (= (time-to-state (+ time 1)) _269) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5326 (= ?x489 _268)))
 (let (($x5331 (and $x5326 $x505)))
 (=> $x5331 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5344 (= ?x489 _269)))
 (=> (and $x5344 $x488) (and (= (time-to-state (+ time 1)) _270) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5344 (= ?x489 _269)))
 (let (($x5349 (and $x5344 $x505)))
 (=> $x5349 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5362 (= ?x489 _270)))
 (=> (and $x5362 $x488) (and (= (time-to-state (+ time 1)) _271) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5362 (= ?x489 _270)))
 (let (($x5367 (and $x5362 $x505)))
 (=> $x5367 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5380 (= ?x489 _271)))
 (=> (and $x5380 $x488) (and (= (time-to-state (+ time 1)) _272) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5380 (= ?x489 _271)))
 (let (($x5385 (and $x5380 $x505)))
 (=> $x5385 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5398 (= ?x489 _272)))
 (=> (and $x5398 $x488) (and (= (time-to-state (+ time 1)) _273) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5398 (= ?x489 _272)))
 (let (($x5403 (and $x5398 $x505)))
 (=> $x5403 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5416 (= ?x489 _273)))
 (=> (and $x5416 $x488) (and (= (time-to-state (+ time 1)) _274) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5416 (= ?x489 _273)))
 (let (($x5421 (and $x5416 $x505)))
 (=> $x5421 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5434 (= ?x489 _274)))
 (=> (and $x5434 $x488) (and (= (time-to-state (+ time 1)) _275) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5434 (= ?x489 _274)))
 (let (($x5439 (and $x5434 $x505)))
 (=> $x5439 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5452 (= ?x489 _275)))
 (=> (and $x5452 $x488) (and (= (time-to-state (+ time 1)) _276) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5452 (= ?x489 _275)))
 (let (($x5457 (and $x5452 $x505)))
 (=> $x5457 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5470 (= ?x489 _276)))
 (=> (and $x5470 $x488) (and (= (time-to-state (+ time 1)) _277) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5470 (= ?x489 _276)))
 (let (($x5475 (and $x5470 $x505)))
 (=> $x5475 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5488 (= ?x489 _277)))
 (=> (and $x5488 $x488) (and (= (time-to-state (+ time 1)) _278) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5488 (= ?x489 _277)))
 (let (($x5493 (and $x5488 $x505)))
 (=> $x5493 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5506 (= ?x489 _278)))
 (=> (and $x5506 $x488) (and (= (time-to-state (+ time 1)) _279) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5506 (= ?x489 _278)))
 (let (($x5511 (and $x5506 $x505)))
 (=> $x5511 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5524 (= ?x489 _279)))
 (=> (and $x5524 $x488) (and (= (time-to-state (+ time 1)) _280) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5524 (= ?x489 _279)))
 (let (($x5529 (and $x5524 $x505)))
 (=> $x5529 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5542 (= ?x489 _280)))
 (=> (and $x5542 $x488) (and (= (time-to-state (+ time 1)) _281) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5542 (= ?x489 _280)))
 (let (($x5547 (and $x5542 $x505)))
 (=> $x5547 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5560 (= ?x489 _281)))
 (=> (and $x5560 $x488) (and (= (time-to-state (+ time 1)) _282) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5560 (= ?x489 _281)))
 (let (($x5565 (and $x5560 $x505)))
 (=> $x5565 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5578 (= ?x489 _282)))
 (=> (and $x5578 $x488) (and (= (time-to-state (+ time 1)) _283) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5578 (= ?x489 _282)))
 (let (($x5583 (and $x5578 $x505)))
 (=> $x5583 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5596 (= ?x489 _283)))
 (=> (and $x5596 $x488) (and (= (time-to-state (+ time 1)) _284) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5596 (= ?x489 _283)))
 (let (($x5601 (and $x5596 $x505)))
 (=> $x5601 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5614 (= ?x489 _284)))
 (=> (and $x5614 $x488) (and (= (time-to-state (+ time 1)) _285) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5614 (= ?x489 _284)))
 (let (($x5619 (and $x5614 $x505)))
 (=> $x5619 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5632 (= ?x489 _285)))
 (=> (and $x5632 $x488) (and (= (time-to-state (+ time 1)) _286) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5632 (= ?x489 _285)))
 (let (($x5637 (and $x5632 $x505)))
 (=> $x5637 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5650 (= ?x489 _286)))
 (=> (and $x5650 $x488) (and (= (time-to-state (+ time 1)) _287) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5650 (= ?x489 _286)))
 (let (($x5655 (and $x5650 $x505)))
 (=> $x5655 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5668 (= ?x489 _287)))
 (=> (and $x5668 $x488) (and (= (time-to-state (+ time 1)) _288) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5668 (= ?x489 _287)))
 (let (($x5673 (and $x5668 $x505)))
 (=> $x5673 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5686 (= ?x489 _288)))
 (=> (and $x5686 $x488) (and (= (time-to-state (+ time 1)) _289) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5686 (= ?x489 _288)))
 (let (($x5691 (and $x5686 $x505)))
 (=> $x5691 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5704 (= ?x489 _289)))
 (=> (and $x5704 $x488) (and (= (time-to-state (+ time 1)) _290) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5704 (= ?x489 _289)))
 (let (($x5709 (and $x5704 $x505)))
 (=> $x5709 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5722 (= ?x489 _290)))
 (=> (and $x5722 $x488) (and (= (time-to-state (+ time 1)) _291) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5722 (= ?x489 _290)))
 (let (($x5727 (and $x5722 $x505)))
 (=> $x5727 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5740 (= ?x489 _291)))
 (=> (and $x5740 $x488) (and (= (time-to-state (+ time 1)) _292) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5740 (= ?x489 _291)))
 (let (($x5745 (and $x5740 $x505)))
 (=> $x5745 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5758 (= ?x489 _292)))
 (=> (and $x5758 $x488) (and (= (time-to-state (+ time 1)) _293) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5758 (= ?x489 _292)))
 (let (($x5763 (and $x5758 $x505)))
 (=> $x5763 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5776 (= ?x489 _293)))
 (=> (and $x5776 $x488) (and (= (time-to-state (+ time 1)) _294) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5776 (= ?x489 _293)))
 (let (($x5781 (and $x5776 $x505)))
 (=> $x5781 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5794 (= ?x489 _294)))
 (=> (and $x5794 $x488) (and (= (time-to-state (+ time 1)) _295) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5794 (= ?x489 _294)))
 (let (($x5799 (and $x5794 $x505)))
 (=> $x5799 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5812 (= ?x489 _295)))
 (=> (and $x5812 $x488) (and (= (time-to-state (+ time 1)) _296) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5812 (= ?x489 _295)))
 (let (($x5817 (and $x5812 $x505)))
 (=> $x5817 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5830 (= ?x489 _296)))
 (=> (and $x5830 $x488) (and (= (time-to-state (+ time 1)) _297) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5830 (= ?x489 _296)))
 (let (($x5835 (and $x5830 $x505)))
 (=> $x5835 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5848 (= ?x489 _297)))
 (=> (and $x5848 $x488) (and (= (time-to-state (+ time 1)) _298) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5848 (= ?x489 _297)))
 (let (($x5853 (and $x5848 $x505)))
 (=> $x5853 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5866 (= ?x489 _298)))
 (=> (and $x5866 $x488) (and (= (time-to-state (+ time 1)) _299) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5866 (= ?x489 _298)))
 (let (($x5871 (and $x5866 $x505)))
 (=> $x5871 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5884 (= ?x489 _299)))
 (=> (and $x5884 $x488) (and (= (time-to-state (+ time 1)) _300) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5884 (= ?x489 _299)))
 (let (($x5889 (and $x5884 $x505)))
 (=> $x5889 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5902 (= ?x489 _300)))
 (=> (and $x5902 $x488) (and (= (time-to-state (+ time 1)) _301) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5902 (= ?x489 _300)))
 (let (($x5907 (and $x5902 $x505)))
 (=> $x5907 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5920 (= ?x489 _301)))
 (=> (and $x5920 $x488) (and (= (time-to-state (+ time 1)) _302) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5920 (= ?x489 _301)))
 (let (($x5925 (and $x5920 $x505)))
 (=> $x5925 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5938 (= ?x489 _302)))
 (=> (and $x5938 $x488) (and (= (time-to-state (+ time 1)) _303) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5938 (= ?x489 _302)))
 (let (($x5943 (and $x5938 $x505)))
 (=> $x5943 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5956 (= ?x489 _303)))
 (=> (and $x5956 $x488) (and (= (time-to-state (+ time 1)) _304) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5956 (= ?x489 _303)))
 (let (($x5961 (and $x5956 $x505)))
 (=> $x5961 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5974 (= ?x489 _304)))
 (=> (and $x5974 $x488) (and (= (time-to-state (+ time 1)) _305) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5974 (= ?x489 _304)))
 (let (($x5979 (and $x5974 $x505)))
 (=> $x5979 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x5992 (= ?x489 _305)))
 (=> (and $x5992 $x488) (and (= (time-to-state (+ time 1)) _306) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x5992 (= ?x489 _305)))
 (let (($x5997 (and $x5992 $x505)))
 (=> $x5997 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6010 (= ?x489 _306)))
 (=> (and $x6010 $x488) (and (= (time-to-state (+ time 1)) _307) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6010 (= ?x489 _306)))
 (let (($x6015 (and $x6010 $x505)))
 (=> $x6015 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6028 (= ?x489 _307)))
 (=> (and $x6028 $x488) (and (= (time-to-state (+ time 1)) _308) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6028 (= ?x489 _307)))
 (let (($x6033 (and $x6028 $x505)))
 (=> $x6033 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6046 (= ?x489 _308)))
 (=> (and $x6046 $x488) (and (= (time-to-state (+ time 1)) _309) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6046 (= ?x489 _308)))
 (let (($x6051 (and $x6046 $x505)))
 (=> $x6051 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6064 (= ?x489 _309)))
 (=> (and $x6064 $x488) (and (= (time-to-state (+ time 1)) _310) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6064 (= ?x489 _309)))
 (let (($x6069 (and $x6064 $x505)))
 (=> $x6069 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6082 (= ?x489 _310)))
 (=> (and $x6082 $x488) (and (= (time-to-state (+ time 1)) _311) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6082 (= ?x489 _310)))
 (let (($x6087 (and $x6082 $x505)))
 (=> $x6087 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6100 (= ?x489 _311)))
 (=> (and $x6100 $x488) (and (= (time-to-state (+ time 1)) _312) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6100 (= ?x489 _311)))
 (let (($x6105 (and $x6100 $x505)))
 (=> $x6105 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6118 (= ?x489 _312)))
 (=> (and $x6118 $x488) (and (= (time-to-state (+ time 1)) _313) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6118 (= ?x489 _312)))
 (let (($x6123 (and $x6118 $x505)))
 (=> $x6123 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6136 (= ?x489 _313)))
 (=> (and $x6136 $x488) (and (= (time-to-state (+ time 1)) _314) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6136 (= ?x489 _313)))
 (let (($x6141 (and $x6136 $x505)))
 (=> $x6141 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6154 (= ?x489 _314)))
 (=> (and $x6154 $x488) (and (= (time-to-state (+ time 1)) _315) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6154 (= ?x489 _314)))
 (let (($x6159 (and $x6154 $x505)))
 (=> $x6159 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6172 (= ?x489 _315)))
 (=> (and $x6172 $x488) (and (= (time-to-state (+ time 1)) _316) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6172 (= ?x489 _315)))
 (let (($x6177 (and $x6172 $x505)))
 (=> $x6177 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6190 (= ?x489 _316)))
 (=> (and $x6190 $x488) (and (= (time-to-state (+ time 1)) _317) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6190 (= ?x489 _316)))
 (let (($x6195 (and $x6190 $x505)))
 (=> $x6195 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6208 (= ?x489 _317)))
 (=> (and $x6208 $x488) (and (= (time-to-state (+ time 1)) _318) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6208 (= ?x489 _317)))
 (let (($x6213 (and $x6208 $x505)))
 (=> $x6213 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6226 (= ?x489 _318)))
 (=> (and $x6226 $x488) (and (= (time-to-state (+ time 1)) _319) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6226 (= ?x489 _318)))
 (let (($x6231 (and $x6226 $x505)))
 (=> $x6231 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6244 (= ?x489 _319)))
 (=> (and $x6244 $x488) (and (= (time-to-state (+ time 1)) _320) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6244 (= ?x489 _319)))
 (let (($x6249 (and $x6244 $x505)))
 (=> $x6249 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6262 (= ?x489 _320)))
 (=> (and $x6262 $x488) (and (= (time-to-state (+ time 1)) _321) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6262 (= ?x489 _320)))
 (let (($x6267 (and $x6262 $x505)))
 (=> $x6267 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6280 (= ?x489 _321)))
 (=> (and $x6280 $x488) (and (= (time-to-state (+ time 1)) _322) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6280 (= ?x489 _321)))
 (let (($x6285 (and $x6280 $x505)))
 (=> $x6285 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6298 (= ?x489 _322)))
 (=> (and $x6298 $x488) (and (= (time-to-state (+ time 1)) _323) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6298 (= ?x489 _322)))
 (let (($x6303 (and $x6298 $x505)))
 (=> $x6303 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6316 (= ?x489 _323)))
 (=> (and $x6316 $x488) (and (= (time-to-state (+ time 1)) _324) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6316 (= ?x489 _323)))
 (let (($x6321 (and $x6316 $x505)))
 (=> $x6321 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6334 (= ?x489 _324)))
 (=> (and $x6334 $x488) (and (= (time-to-state (+ time 1)) _325) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6334 (= ?x489 _324)))
 (let (($x6339 (and $x6334 $x505)))
 (=> $x6339 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6352 (= ?x489 _325)))
 (=> (and $x6352 $x488) (and (= (time-to-state (+ time 1)) _326) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6352 (= ?x489 _325)))
 (let (($x6357 (and $x6352 $x505)))
 (=> $x6357 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6370 (= ?x489 _326)))
 (=> (and $x6370 $x488) (and (= (time-to-state (+ time 1)) _327) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6370 (= ?x489 _326)))
 (let (($x6375 (and $x6370 $x505)))
 (=> $x6375 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6388 (= ?x489 _327)))
 (=> (and $x6388 $x488) (and (= (time-to-state (+ time 1)) _328) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6388 (= ?x489 _327)))
 (let (($x6393 (and $x6388 $x505)))
 (=> $x6393 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6406 (= ?x489 _328)))
 (=> (and $x6406 $x488) (and (= (time-to-state (+ time 1)) _329) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6406 (= ?x489 _328)))
 (let (($x6411 (and $x6406 $x505)))
 (=> $x6411 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6424 (= ?x489 _329)))
 (=> (and $x6424 $x488) (and (= (time-to-state (+ time 1)) _330) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6424 (= ?x489 _329)))
 (let (($x6429 (and $x6424 $x505)))
 (=> $x6429 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6442 (= ?x489 _330)))
 (=> (and $x6442 $x488) (and (= (time-to-state (+ time 1)) _331) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6442 (= ?x489 _330)))
 (let (($x6447 (and $x6442 $x505)))
 (=> $x6447 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6460 (= ?x489 _331)))
 (=> (and $x6460 $x488) (and (= (time-to-state (+ time 1)) _332) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6460 (= ?x489 _331)))
 (let (($x6465 (and $x6460 $x505)))
 (=> $x6465 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6478 (= ?x489 _332)))
 (=> (and $x6478 $x488) (and (= (time-to-state (+ time 1)) _333) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6478 (= ?x489 _332)))
 (let (($x6483 (and $x6478 $x505)))
 (=> $x6483 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6496 (= ?x489 _333)))
 (=> (and $x6496 $x488) (and (= (time-to-state (+ time 1)) _334) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6496 (= ?x489 _333)))
 (let (($x6501 (and $x6496 $x505)))
 (=> $x6501 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6514 (= ?x489 _334)))
 (=> (and $x6514 $x488) (and (= (time-to-state (+ time 1)) _335) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6514 (= ?x489 _334)))
 (let (($x6519 (and $x6514 $x505)))
 (=> $x6519 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6532 (= ?x489 _335)))
 (=> (and $x6532 $x488) (and (= (time-to-state (+ time 1)) _336) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6532 (= ?x489 _335)))
 (let (($x6537 (and $x6532 $x505)))
 (=> $x6537 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6550 (= ?x489 _336)))
 (=> (and $x6550 $x488) (and (= (time-to-state (+ time 1)) _337) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6550 (= ?x489 _336)))
 (let (($x6555 (and $x6550 $x505)))
 (=> $x6555 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6568 (= ?x489 _337)))
 (=> (and $x6568 $x488) (and (= (time-to-state (+ time 1)) _338) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6568 (= ?x489 _337)))
 (let (($x6573 (and $x6568 $x505)))
 (=> $x6573 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6586 (= ?x489 _338)))
 (=> (and $x6586 $x488) (and (= (time-to-state (+ time 1)) _339) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6586 (= ?x489 _338)))
 (let (($x6591 (and $x6586 $x505)))
 (=> $x6591 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6604 (= ?x489 _339)))
 (=> (and $x6604 $x488) (and (= (time-to-state (+ time 1)) _340) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6604 (= ?x489 _339)))
 (let (($x6609 (and $x6604 $x505)))
 (=> $x6609 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6622 (= ?x489 _340)))
 (=> (and $x6622 $x488) (and (= (time-to-state (+ time 1)) _341) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6622 (= ?x489 _340)))
 (let (($x6627 (and $x6622 $x505)))
 (=> $x6627 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6640 (= ?x489 _341)))
 (=> (and $x6640 $x488) (and (= (time-to-state (+ time 1)) _342) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6640 (= ?x489 _341)))
 (let (($x6645 (and $x6640 $x505)))
 (=> $x6645 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6658 (= ?x489 _342)))
 (=> (and $x6658 $x488) (and (= (time-to-state (+ time 1)) _343) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6658 (= ?x489 _342)))
 (let (($x6663 (and $x6658 $x505)))
 (=> $x6663 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6676 (= ?x489 _343)))
 (=> (and $x6676 $x488) (and (= (time-to-state (+ time 1)) _344) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6676 (= ?x489 _343)))
 (let (($x6681 (and $x6676 $x505)))
 (=> $x6681 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6694 (= ?x489 _344)))
 (=> (and $x6694 $x488) (and (= (time-to-state (+ time 1)) _345) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6694 (= ?x489 _344)))
 (let (($x6699 (and $x6694 $x505)))
 (=> $x6699 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6712 (= ?x489 _345)))
 (=> (and $x6712 $x488) (and (= (time-to-state (+ time 1)) _346) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6712 (= ?x489 _345)))
 (let (($x6717 (and $x6712 $x505)))
 (=> $x6717 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6730 (= ?x489 _346)))
 (=> (and $x6730 $x488) (and (= (time-to-state (+ time 1)) _347) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6730 (= ?x489 _346)))
 (let (($x6735 (and $x6730 $x505)))
 (=> $x6735 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6748 (= ?x489 _347)))
 (=> (and $x6748 $x488) (and (= (time-to-state (+ time 1)) _348) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6748 (= ?x489 _347)))
 (let (($x6753 (and $x6748 $x505)))
 (=> $x6753 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6766 (= ?x489 _348)))
 (=> (and $x6766 $x488) (and (= (time-to-state (+ time 1)) _349) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6766 (= ?x489 _348)))
 (let (($x6771 (and $x6766 $x505)))
 (=> $x6771 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6784 (= ?x489 _349)))
 (=> (and $x6784 $x488) (and (= (time-to-state (+ time 1)) _350) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6784 (= ?x489 _349)))
 (let (($x6789 (and $x6784 $x505)))
 (=> $x6789 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6802 (= ?x489 _350)))
 (=> (and $x6802 $x488) (and (= (time-to-state (+ time 1)) _351) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6802 (= ?x489 _350)))
 (let (($x6807 (and $x6802 $x505)))
 (=> $x6807 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6820 (= ?x489 _351)))
 (=> (and $x6820 $x488) (and (= (time-to-state (+ time 1)) _352) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6820 (= ?x489 _351)))
 (let (($x6825 (and $x6820 $x505)))
 (=> $x6825 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6838 (= ?x489 _352)))
 (=> (and $x6838 $x488) (and (= (time-to-state (+ time 1)) _353) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6838 (= ?x489 _352)))
 (let (($x6843 (and $x6838 $x505)))
 (=> $x6843 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6856 (= ?x489 _353)))
 (=> (and $x6856 $x488) (and (= (time-to-state (+ time 1)) _354) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6856 (= ?x489 _353)))
 (let (($x6861 (and $x6856 $x505)))
 (=> $x6861 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6874 (= ?x489 _354)))
 (=> (and $x6874 $x488) (and (= (time-to-state (+ time 1)) _355) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6874 (= ?x489 _354)))
 (let (($x6879 (and $x6874 $x505)))
 (=> $x6879 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6892 (= ?x489 _355)))
 (=> (and $x6892 $x488) (and (= (time-to-state (+ time 1)) _356) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6892 (= ?x489 _355)))
 (let (($x6897 (and $x6892 $x505)))
 (=> $x6897 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6910 (= ?x489 _356)))
 (=> (and $x6910 $x488) (and (= (time-to-state (+ time 1)) _357) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6910 (= ?x489 _356)))
 (let (($x6915 (and $x6910 $x505)))
 (=> $x6915 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6928 (= ?x489 _357)))
 (=> (and $x6928 $x488) (and (= (time-to-state (+ time 1)) _358) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6928 (= ?x489 _357)))
 (let (($x6933 (and $x6928 $x505)))
 (=> $x6933 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6946 (= ?x489 _358)))
 (=> (and $x6946 $x488) (and (= (time-to-state (+ time 1)) _359) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6946 (= ?x489 _358)))
 (let (($x6951 (and $x6946 $x505)))
 (=> $x6951 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6964 (= ?x489 _359)))
 (=> (and $x6964 $x488) (and (= (time-to-state (+ time 1)) _360) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6964 (= ?x489 _359)))
 (let (($x6969 (and $x6964 $x505)))
 (=> $x6969 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x6982 (= ?x489 _360)))
 (=> (and $x6982 $x488) (and (= (time-to-state (+ time 1)) _361) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x6982 (= ?x489 _360)))
 (let (($x6987 (and $x6982 $x505)))
 (=> $x6987 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7000 (= ?x489 _361)))
 (=> (and $x7000 $x488) (and (= (time-to-state (+ time 1)) _362) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7000 (= ?x489 _361)))
 (let (($x7005 (and $x7000 $x505)))
 (=> $x7005 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7018 (= ?x489 _362)))
 (=> (and $x7018 $x488) (and (= (time-to-state (+ time 1)) _363) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7018 (= ?x489 _362)))
 (let (($x7023 (and $x7018 $x505)))
 (=> $x7023 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7036 (= ?x489 _363)))
 (=> (and $x7036 $x488) (and (= (time-to-state (+ time 1)) _364) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7036 (= ?x489 _363)))
 (let (($x7041 (and $x7036 $x505)))
 (=> $x7041 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7054 (= ?x489 _364)))
 (=> (and $x7054 $x488) (and (= (time-to-state (+ time 1)) _365) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7054 (= ?x489 _364)))
 (let (($x7059 (and $x7054 $x505)))
 (=> $x7059 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7072 (= ?x489 _365)))
 (=> (and $x7072 $x488) (and (= (time-to-state (+ time 1)) _366) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7072 (= ?x489 _365)))
 (let (($x7077 (and $x7072 $x505)))
 (=> $x7077 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7090 (= ?x489 _366)))
 (=> (and $x7090 $x488) (and (= (time-to-state (+ time 1)) _367) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7090 (= ?x489 _366)))
 (let (($x7095 (and $x7090 $x505)))
 (=> $x7095 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7108 (= ?x489 _367)))
 (=> (and $x7108 $x488) (and (= (time-to-state (+ time 1)) _368) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7108 (= ?x489 _367)))
 (let (($x7113 (and $x7108 $x505)))
 (=> $x7113 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7126 (= ?x489 _368)))
 (=> (and $x7126 $x488) (and (= (time-to-state (+ time 1)) _369) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7126 (= ?x489 _368)))
 (let (($x7131 (and $x7126 $x505)))
 (=> $x7131 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7144 (= ?x489 _369)))
 (=> (and $x7144 $x488) (and (= (time-to-state (+ time 1)) _370) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7144 (= ?x489 _369)))
 (let (($x7149 (and $x7144 $x505)))
 (=> $x7149 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7162 (= ?x489 _370)))
 (=> (and $x7162 $x488) (and (= (time-to-state (+ time 1)) _371) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7162 (= ?x489 _370)))
 (let (($x7167 (and $x7162 $x505)))
 (=> $x7167 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7180 (= ?x489 _371)))
 (=> (and $x7180 $x488) (and (= (time-to-state (+ time 1)) _372) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7180 (= ?x489 _371)))
 (let (($x7185 (and $x7180 $x505)))
 (=> $x7185 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7198 (= ?x489 _372)))
 (=> (and $x7198 $x488) (and (= (time-to-state (+ time 1)) _373) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7198 (= ?x489 _372)))
 (let (($x7203 (and $x7198 $x505)))
 (=> $x7203 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7216 (= ?x489 _373)))
 (=> (and $x7216 $x488) (and (= (time-to-state (+ time 1)) _374) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7216 (= ?x489 _373)))
 (let (($x7221 (and $x7216 $x505)))
 (=> $x7221 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7234 (= ?x489 _374)))
 (=> (and $x7234 $x488) (and (= (time-to-state (+ time 1)) _375) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7234 (= ?x489 _374)))
 (let (($x7239 (and $x7234 $x505)))
 (=> $x7239 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7252 (= ?x489 _375)))
 (=> (and $x7252 $x488) (and (= (time-to-state (+ time 1)) _376) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7252 (= ?x489 _375)))
 (let (($x7257 (and $x7252 $x505)))
 (=> $x7257 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7270 (= ?x489 _376)))
 (=> (and $x7270 $x488) (and (= (time-to-state (+ time 1)) _377) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7270 (= ?x489 _376)))
 (let (($x7275 (and $x7270 $x505)))
 (=> $x7275 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7288 (= ?x489 _377)))
 (=> (and $x7288 $x488) (and (= (time-to-state (+ time 1)) _378) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7288 (= ?x489 _377)))
 (let (($x7293 (and $x7288 $x505)))
 (=> $x7293 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7306 (= ?x489 _378)))
 (=> (and $x7306 $x488) (and (= (time-to-state (+ time 1)) _379) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7306 (= ?x489 _378)))
 (let (($x7311 (and $x7306 $x505)))
 (=> $x7311 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7324 (= ?x489 _379)))
 (=> (and $x7324 $x488) (and (= (time-to-state (+ time 1)) _380) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7324 (= ?x489 _379)))
 (let (($x7329 (and $x7324 $x505)))
 (=> $x7329 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7342 (= ?x489 _380)))
 (=> (and $x7342 $x488) (and (= (time-to-state (+ time 1)) _381) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7342 (= ?x489 _380)))
 (let (($x7347 (and $x7342 $x505)))
 (=> $x7347 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7360 (= ?x489 _381)))
 (=> (and $x7360 $x488) (and (= (time-to-state (+ time 1)) _382) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7360 (= ?x489 _381)))
 (let (($x7365 (and $x7360 $x505)))
 (=> $x7365 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7378 (= ?x489 _382)))
 (=> (and $x7378 $x488) (and (= (time-to-state (+ time 1)) _383) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7378 (= ?x489 _382)))
 (let (($x7383 (and $x7378 $x505)))
 (=> $x7383 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7396 (= ?x489 _383)))
 (=> (and $x7396 $x488) (and (= (time-to-state (+ time 1)) _384) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7396 (= ?x489 _383)))
 (let (($x7401 (and $x7396 $x505)))
 (=> $x7401 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7414 (= ?x489 _384)))
 (=> (and $x7414 $x488) (and (= (time-to-state (+ time 1)) _385) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7414 (= ?x489 _384)))
 (let (($x7419 (and $x7414 $x505)))
 (=> $x7419 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7432 (= ?x489 _385)))
 (=> (and $x7432 $x488) (and (= (time-to-state (+ time 1)) _386) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7432 (= ?x489 _385)))
 (let (($x7437 (and $x7432 $x505)))
 (=> $x7437 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7450 (= ?x489 _386)))
 (=> (and $x7450 $x488) (and (= (time-to-state (+ time 1)) _387) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7450 (= ?x489 _386)))
 (let (($x7455 (and $x7450 $x505)))
 (=> $x7455 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7468 (= ?x489 _387)))
 (=> (and $x7468 $x488) (and (= (time-to-state (+ time 1)) _388) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7468 (= ?x489 _387)))
 (let (($x7473 (and $x7468 $x505)))
 (=> $x7473 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7486 (= ?x489 _388)))
 (=> (and $x7486 $x488) (and (= (time-to-state (+ time 1)) _389) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7486 (= ?x489 _388)))
 (let (($x7491 (and $x7486 $x505)))
 (=> $x7491 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7504 (= ?x489 _389)))
 (=> (and $x7504 $x488) (and (= (time-to-state (+ time 1)) _390) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7504 (= ?x489 _389)))
 (let (($x7509 (and $x7504 $x505)))
 (=> $x7509 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7522 (= ?x489 _390)))
 (=> (and $x7522 $x488) (and (= (time-to-state (+ time 1)) _391) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7522 (= ?x489 _390)))
 (let (($x7527 (and $x7522 $x505)))
 (=> $x7527 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7540 (= ?x489 _391)))
 (=> (and $x7540 $x488) (and (= (time-to-state (+ time 1)) _392) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7540 (= ?x489 _391)))
 (let (($x7545 (and $x7540 $x505)))
 (=> $x7545 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7558 (= ?x489 _392)))
 (=> (and $x7558 $x488) (and (= (time-to-state (+ time 1)) _393) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7558 (= ?x489 _392)))
 (let (($x7563 (and $x7558 $x505)))
 (=> $x7563 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7576 (= ?x489 _393)))
 (=> (and $x7576 $x488) (and (= (time-to-state (+ time 1)) _394) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7576 (= ?x489 _393)))
 (let (($x7581 (and $x7576 $x505)))
 (=> $x7581 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7594 (= ?x489 _394)))
 (=> (and $x7594 $x488) (and (= (time-to-state (+ time 1)) _395) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7594 (= ?x489 _394)))
 (let (($x7599 (and $x7594 $x505)))
 (=> $x7599 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7612 (= ?x489 _395)))
 (=> (and $x7612 $x488) (and (= (time-to-state (+ time 1)) _396) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7612 (= ?x489 _395)))
 (let (($x7617 (and $x7612 $x505)))
 (=> $x7617 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7630 (= ?x489 _396)))
 (=> (and $x7630 $x488) (and (= (time-to-state (+ time 1)) _397) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7630 (= ?x489 _396)))
 (let (($x7635 (and $x7630 $x505)))
 (=> $x7635 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7648 (= ?x489 _397)))
 (=> (and $x7648 $x488) (and (= (time-to-state (+ time 1)) _398) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7648 (= ?x489 _397)))
 (let (($x7653 (and $x7648 $x505)))
 (=> $x7653 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7666 (= ?x489 _398)))
 (=> (and $x7666 $x488) (and (= (time-to-state (+ time 1)) _399) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7666 (= ?x489 _398)))
 (let (($x7671 (and $x7666 $x505)))
 (=> $x7671 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7684 (= ?x489 _399)))
 (=> (and $x7684 $x488) (and (= (time-to-state (+ time 1)) _400) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7684 (= ?x489 _399)))
 (let (($x7689 (and $x7684 $x505)))
 (=> $x7689 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7702 (= ?x489 _400)))
 (=> (and $x7702 $x488) (and (= (time-to-state (+ time 1)) _401) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7702 (= ?x489 _400)))
 (let (($x7707 (and $x7702 $x505)))
 (=> $x7707 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7720 (= ?x489 _401)))
 (=> (and $x7720 $x488) (and (= (time-to-state (+ time 1)) _402) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7720 (= ?x489 _401)))
 (let (($x7725 (and $x7720 $x505)))
 (=> $x7725 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7738 (= ?x489 _402)))
 (=> (and $x7738 $x488) (and (= (time-to-state (+ time 1)) _403) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7738 (= ?x489 _402)))
 (let (($x7743 (and $x7738 $x505)))
 (=> $x7743 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7756 (= ?x489 _403)))
 (=> (and $x7756 $x488) (and (= (time-to-state (+ time 1)) _404) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7756 (= ?x489 _403)))
 (let (($x7761 (and $x7756 $x505)))
 (=> $x7761 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7774 (= ?x489 _404)))
 (=> (and $x7774 $x488) (and (= (time-to-state (+ time 1)) _405) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7774 (= ?x489 _404)))
 (let (($x7779 (and $x7774 $x505)))
 (=> $x7779 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7792 (= ?x489 _405)))
 (=> (and $x7792 $x488) (and (= (time-to-state (+ time 1)) _406) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7792 (= ?x489 _405)))
 (let (($x7797 (and $x7792 $x505)))
 (=> $x7797 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7810 (= ?x489 _406)))
 (=> (and $x7810 $x488) (and (= (time-to-state (+ time 1)) _407) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7810 (= ?x489 _406)))
 (let (($x7815 (and $x7810 $x505)))
 (=> $x7815 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7828 (= ?x489 _407)))
 (=> (and $x7828 $x488) (and (= (time-to-state (+ time 1)) _408) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7828 (= ?x489 _407)))
 (let (($x7833 (and $x7828 $x505)))
 (=> $x7833 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7846 (= ?x489 _408)))
 (=> (and $x7846 $x488) (and (= (time-to-state (+ time 1)) _409) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7846 (= ?x489 _408)))
 (let (($x7851 (and $x7846 $x505)))
 (=> $x7851 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7864 (= ?x489 _409)))
 (=> (and $x7864 $x488) (and (= (time-to-state (+ time 1)) _410) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7864 (= ?x489 _409)))
 (let (($x7869 (and $x7864 $x505)))
 (=> $x7869 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7882 (= ?x489 _410)))
 (=> (and $x7882 $x488) (and (= (time-to-state (+ time 1)) _411) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7882 (= ?x489 _410)))
 (let (($x7887 (and $x7882 $x505)))
 (=> $x7887 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7900 (= ?x489 _411)))
 (=> (and $x7900 $x488) (and (= (time-to-state (+ time 1)) _412) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7900 (= ?x489 _411)))
 (let (($x7905 (and $x7900 $x505)))
 (=> $x7905 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7918 (= ?x489 _412)))
 (=> (and $x7918 $x488) (and (= (time-to-state (+ time 1)) _413) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7918 (= ?x489 _412)))
 (let (($x7923 (and $x7918 $x505)))
 (=> $x7923 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7936 (= ?x489 _413)))
 (=> (and $x7936 $x488) (and (= (time-to-state (+ time 1)) _414) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7936 (= ?x489 _413)))
 (let (($x7941 (and $x7936 $x505)))
 (=> $x7941 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7954 (= ?x489 _414)))
 (=> (and $x7954 $x488) (and (= (time-to-state (+ time 1)) _415) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7954 (= ?x489 _414)))
 (let (($x7959 (and $x7954 $x505)))
 (=> $x7959 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7972 (= ?x489 _415)))
 (=> (and $x7972 $x488) (and (= (time-to-state (+ time 1)) _416) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7972 (= ?x489 _415)))
 (let (($x7977 (and $x7972 $x505)))
 (=> $x7977 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x7990 (= ?x489 _416)))
 (=> (and $x7990 $x488) (and (= (time-to-state (+ time 1)) _417) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x7990 (= ?x489 _416)))
 (let (($x7995 (and $x7990 $x505)))
 (=> $x7995 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8008 (= ?x489 _417)))
 (=> (and $x8008 $x488) (and (= (time-to-state (+ time 1)) _418) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8008 (= ?x489 _417)))
 (let (($x8013 (and $x8008 $x505)))
 (=> $x8013 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8026 (= ?x489 _418)))
 (=> (and $x8026 $x488) (and (= (time-to-state (+ time 1)) _419) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8026 (= ?x489 _418)))
 (let (($x8031 (and $x8026 $x505)))
 (=> $x8031 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8044 (= ?x489 _419)))
 (=> (and $x8044 $x488) (and (= (time-to-state (+ time 1)) _420) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8044 (= ?x489 _419)))
 (let (($x8049 (and $x8044 $x505)))
 (=> $x8049 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8062 (= ?x489 _420)))
 (=> (and $x8062 $x488) (and (= (time-to-state (+ time 1)) _421) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8062 (= ?x489 _420)))
 (let (($x8067 (and $x8062 $x505)))
 (=> $x8067 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8080 (= ?x489 _421)))
 (=> (and $x8080 $x488) (and (= (time-to-state (+ time 1)) _422) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8080 (= ?x489 _421)))
 (let (($x8085 (and $x8080 $x505)))
 (=> $x8085 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8098 (= ?x489 _422)))
 (=> (and $x8098 $x488) (and (= (time-to-state (+ time 1)) _423) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8098 (= ?x489 _422)))
 (let (($x8103 (and $x8098 $x505)))
 (=> $x8103 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8116 (= ?x489 _423)))
 (=> (and $x8116 $x488) (and (= (time-to-state (+ time 1)) _424) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8116 (= ?x489 _423)))
 (let (($x8121 (and $x8116 $x505)))
 (=> $x8121 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8134 (= ?x489 _424)))
 (=> (and $x8134 $x488) (and (= (time-to-state (+ time 1)) _425) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8134 (= ?x489 _424)))
 (let (($x8139 (and $x8134 $x505)))
 (=> $x8139 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8152 (= ?x489 _425)))
 (=> (and $x8152 $x488) (and (= (time-to-state (+ time 1)) _426) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8152 (= ?x489 _425)))
 (let (($x8157 (and $x8152 $x505)))
 (=> $x8157 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8170 (= ?x489 _426)))
 (=> (and $x8170 $x488) (and (= (time-to-state (+ time 1)) _427) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8170 (= ?x489 _426)))
 (let (($x8175 (and $x8170 $x505)))
 (=> $x8175 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8188 (= ?x489 _427)))
 (=> (and $x8188 $x488) (and (= (time-to-state (+ time 1)) _428) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8188 (= ?x489 _427)))
 (let (($x8193 (and $x8188 $x505)))
 (=> $x8193 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8206 (= ?x489 _428)))
 (=> (and $x8206 $x488) (and (= (time-to-state (+ time 1)) _429) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8206 (= ?x489 _428)))
 (let (($x8211 (and $x8206 $x505)))
 (=> $x8211 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let (($x483 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (let ((?x487 (input-arg0 time)))
 (let (($x488 (and (distinct ?x487 0) true)))
 (let ((?x489 (time-to-state time)))
 (let (($x8224 (= ?x489 _429)))
 (=> (and $x8224 $x488) (and (= (time-to-state (+ time 1)) _430) $x483))))))))
 )
(assert
 (forall ((time Int) )(let ((?x481 (+ time 1)))
 (let ((?x484 (time-to-state ?x481)))
 (let (($x504 (= ?x484 ERR)))
 (let ((?x487 (input-arg0 time)))
 (let (($x505 (= ?x487 1)))
 (let ((?x489 (time-to-state time)))
 (let (($x8224 (= ?x489 _429)))
 (let (($x8229 (and $x8224 $x505)))
 (=> $x8229 $x504))))))))))
 )
(assert
 (forall ((time Int) )(let ((?x489 (time-to-state time)))
 (let (($x8232 (= ?x489 ERR)))
 (and $x8232 (and (distinct (input-arg0 time) 1) true)))))
 )
(assert
 (and (distinct _0 _1 ERR _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12 _13 _14 _15 _16 _17 _18 _19 _20 _21 _22 _23 _24 _25 _26 _27 _28 _29 _30 _31 _32 _33 _34 _35 _36 _37 _38 _39 _40 _41 _42 _43 _44 _45 _46 _47 _48 _49 _50 _51 _52 _53 _54 _55 _56 _57 _58 _59 _60 _61 _62 _63 _64 _65 _66 _67 _68 _69 _70 _71 _72 _73 _74 _75 _76 _77 _78 _79 _80 _81 _82 _83 _84 _85 _86 _87 _88 _89 _90 _91 _92 _93 _94 _95 _96 _97 _98 _99 _100 _101 _102 _103 _104 _105 _106 _107 _108 _109 _110 _111 _112 _113 _114 _115 _116 _117 _118 _119 _120 _121 _122 _123 _124 _125 _126 _127 _128 _129 _130 _131 _132 _133 _134 _135 _136 _137 _138 _139 _140 _141 _142 _143 _144 _145 _146 _147 _148 _149 _150 _151 _152 _153 _154 _155 _156 _157 _158 _159 _160 _161 _162 _163 _164 _165 _166 _167 _168 _169 _170 _171 _172 _173 _174 _175 _176 _177 _178 _179 _180 _181 _182 _183 _184 _185 _186 _187 _188 _189 _190 _191 _192 _193 _194 _195 _196 _197 _198 _199 _200 _201 _202 _203 _204 _205 _206 _207 _208 _209 _210 _211 _212 _213 _214 _215 _216 _217 _218 _219 _220 _221 _222 _223 _224 _225 _226 _227 _228 _229 _230 _231 _232 _233 _234 _235 _236 _237 _238 _239 _240 _241 _242 _243 _244 _245 _246 _247 _248 _249 _250 _251 _252 _253 _254 _255 _256 _257 _258 _259 _260 _261 _262 _263 _264 _265 _266 _267 _268 _269 _270 _271 _272 _273 _274 _275 _276 _277 _278 _279 _280 _281 _282 _283 _284 _285 _286 _287 _288 _289 _290 _291 _292 _293 _294 _295 _296 _297 _298 _299 _300 _301 _302 _303 _304 _305 _306 _307 _308 _309 _310 _311 _312 _313 _314 _315 _316 _317 _318 _319 _320 _321 _322 _323 _324 _325 _326 _327 _328 _329 _330 _331 _332 _333 _334 _335 _336 _337 _338 _339 _340 _341 _342 _343 _344 _345 _346 _347 _348 _349 _350 _351 _352 _353 _354 _355 _356 _357 _358 _359 _360 _361 _362 _363 _364 _365 _366 _367 _368 _369 _370 _371 _372 _373 _374 _375 _376 _377 _378 _379 _380 _381 _382 _383 _384 _385 _386 _387 _388 _389 _390 _391 _392 _393 _394 _395 _396 _397 _398 _399 _400 _401 _402 _403 _404 _405 _406 _407 _408 _409 _410 _411 _412 _413 _414 _415 _416 _417 _418 _419 _420 _421 _422 _423 _424 _425 _426 _427 _428 _429 _430) true))
(check-sat)
