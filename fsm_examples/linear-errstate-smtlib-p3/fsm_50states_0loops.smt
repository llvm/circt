; 
(set-info :status unknown)
(declare-sort STATE 0)
 (declare-fun _0 () STATE)
(declare-fun time-to-state (Int) STATE)
(declare-fun input-arg0 (Int) Int)
(declare-fun var1_0 (Int) Int)
(declare-fun _1 () STATE)
(declare-fun ERR () STATE)
(declare-fun _2 () STATE)
(declare-fun _3 () STATE)
(declare-fun _4 () STATE)
(declare-fun _5 () STATE)
(declare-fun _6 () STATE)
(declare-fun _7 () STATE)
(declare-fun _8 () STATE)
(declare-fun _9 () STATE)
(declare-fun _10 () STATE)
(declare-fun _11 () STATE)
(declare-fun _12 () STATE)
(declare-fun _13 () STATE)
(declare-fun _14 () STATE)
(declare-fun _15 () STATE)
(declare-fun _16 () STATE)
(declare-fun _17 () STATE)
(declare-fun _18 () STATE)
(declare-fun _19 () STATE)
(declare-fun _20 () STATE)
(declare-fun _21 () STATE)
(declare-fun _22 () STATE)
(declare-fun _23 () STATE)
(declare-fun _24 () STATE)
(declare-fun _25 () STATE)
(declare-fun _26 () STATE)
(declare-fun _27 () STATE)
(declare-fun _28 () STATE)
(declare-fun _29 () STATE)
(declare-fun _30 () STATE)
(declare-fun _31 () STATE)
(declare-fun _32 () STATE)
(declare-fun _33 () STATE)
(declare-fun _34 () STATE)
(declare-fun _35 () STATE)
(declare-fun _36 () STATE)
(declare-fun _37 () STATE)
(declare-fun _38 () STATE)
(declare-fun _39 () STATE)
(declare-fun _40 () STATE)
(declare-fun _41 () STATE)
(declare-fun _42 () STATE)
(declare-fun _43 () STATE)
(declare-fun _44 () STATE)
(declare-fun _45 () STATE)
(declare-fun _46 () STATE)
(declare-fun _47 () STATE)
(declare-fun _48 () STATE)
(declare-fun _49 () STATE)
(declare-fun _50 () STATE)
(assert
 (let ((?x59 (time-to-state 0)))
 (= ?x59 _0)))
(assert
 (let ((?x79 (input-arg0 0)))
 (= ?x79 0)))
(assert
 (let ((?x81 (var1_0 0)))
 (= ?x81 0)))
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _0) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _1) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x110 (= ?x109 _0)))
 (let (($x126 (and $x110 $x125)))
 (=> $x126 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _1) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _2) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x140 (= ?x109 _1)))
 (let (($x145 (and $x140 $x125)))
 (=> $x145 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _2) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _3) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x158 (= ?x109 _2)))
 (let (($x163 (and $x158 $x125)))
 (=> $x163 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _3) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _4) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x176 (= ?x109 _3)))
 (let (($x181 (and $x176 $x125)))
 (=> $x181 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _4) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _5) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x194 (= ?x109 _4)))
 (let (($x199 (and $x194 $x125)))
 (=> $x199 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _5) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _6) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x212 (= ?x109 _5)))
 (let (($x217 (and $x212 $x125)))
 (=> $x217 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _6) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _7) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x230 (= ?x109 _6)))
 (let (($x235 (and $x230 $x125)))
 (=> $x235 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _7) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _8) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x248 (= ?x109 _7)))
 (let (($x253 (and $x248 $x125)))
 (=> $x253 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _8) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _9) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x266 (= ?x109 _8)))
 (let (($x271 (and $x266 $x125)))
 (=> $x271 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _9) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _10) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x284 (= ?x109 _9)))
 (let (($x289 (and $x284 $x125)))
 (=> $x289 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _10) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _11) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x302 (= ?x109 _10)))
 (let (($x307 (and $x302 $x125)))
 (=> $x307 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _11) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _12) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x320 (= ?x109 _11)))
 (let (($x325 (and $x320 $x125)))
 (=> $x325 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _12) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _13) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x338 (= ?x109 _12)))
 (let (($x343 (and $x338 $x125)))
 (=> $x343 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _13) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _14) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x356 (= ?x109 _13)))
 (let (($x361 (and $x356 $x125)))
 (=> $x361 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _14) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _15) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x374 (= ?x109 _14)))
 (let (($x379 (and $x374 $x125)))
 (=> $x379 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _15) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _16) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x392 (= ?x109 _15)))
 (let (($x397 (and $x392 $x125)))
 (=> $x397 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _16) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _17) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x410 (= ?x109 _16)))
 (let (($x415 (and $x410 $x125)))
 (=> $x415 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _17) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _18) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x428 (= ?x109 _17)))
 (let (($x433 (and $x428 $x125)))
 (=> $x433 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _18) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _19) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x446 (= ?x109 _18)))
 (let (($x451 (and $x446 $x125)))
 (=> $x451 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _19) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _20) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x464 (= ?x109 _19)))
 (let (($x469 (and $x464 $x125)))
 (=> $x469 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _20) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _21) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x482 (= ?x109 _20)))
 (let (($x487 (and $x482 $x125)))
 (=> $x487 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _21) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _22) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x500 (= ?x109 _21)))
 (let (($x505 (and $x500 $x125)))
 (=> $x505 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _22) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _23) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x518 (= ?x109 _22)))
 (let (($x523 (and $x518 $x125)))
 (=> $x523 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _23) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _24) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x536 (= ?x109 _23)))
 (let (($x541 (and $x536 $x125)))
 (=> $x541 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _24) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _25) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x554 (= ?x109 _24)))
 (let (($x559 (and $x554 $x125)))
 (=> $x559 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _25) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _26) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x572 (= ?x109 _25)))
 (let (($x577 (and $x572 $x125)))
 (=> $x577 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _26) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _27) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x590 (= ?x109 _26)))
 (let (($x595 (and $x590 $x125)))
 (=> $x595 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _27) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _28) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x608 (= ?x109 _27)))
 (let (($x613 (and $x608 $x125)))
 (=> $x613 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _28) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _29) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x626 (= ?x109 _28)))
 (let (($x631 (and $x626 $x125)))
 (=> $x631 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _29) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _30) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x644 (= ?x109 _29)))
 (let (($x649 (and $x644 $x125)))
 (=> $x649 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _30) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _31) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x662 (= ?x109 _30)))
 (let (($x667 (and $x662 $x125)))
 (=> $x667 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _31) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _32) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x680 (= ?x109 _31)))
 (let (($x685 (and $x680 $x125)))
 (=> $x685 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _32) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _33) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x698 (= ?x109 _32)))
 (let (($x703 (and $x698 $x125)))
 (=> $x703 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _33) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _34) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x716 (= ?x109 _33)))
 (let (($x721 (and $x716 $x125)))
 (=> $x721 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _34) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _35) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x734 (= ?x109 _34)))
 (let (($x739 (and $x734 $x125)))
 (=> $x739 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _35) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _36) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x752 (= ?x109 _35)))
 (let (($x757 (and $x752 $x125)))
 (=> $x757 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _36) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _37) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x770 (= ?x109 _36)))
 (let (($x775 (and $x770 $x125)))
 (=> $x775 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _37) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _38) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x788 (= ?x109 _37)))
 (let (($x793 (and $x788 $x125)))
 (=> $x793 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _38) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _39) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x806 (= ?x109 _38)))
 (let (($x811 (and $x806 $x125)))
 (=> $x811 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _39) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _40) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x824 (= ?x109 _39)))
 (let (($x829 (and $x824 $x125)))
 (=> $x829 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _40) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _41) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x842 (= ?x109 _40)))
 (let (($x847 (and $x842 $x125)))
 (=> $x847 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _41) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _42) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x860 (= ?x109 _41)))
 (let (($x865 (and $x860 $x125)))
 (=> $x865 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _42) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _43) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x878 (= ?x109 _42)))
 (let (($x883 (and $x878 $x125)))
 (=> $x883 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _43) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _44) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x896 (= ?x109 _43)))
 (let (($x901 (and $x896 $x125)))
 (=> $x901 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _44) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _45) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x914 (= ?x109 _44)))
 (let (($x919 (and $x914 $x125)))
 (=> $x919 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _45) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _46) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x932 (= ?x109 _45)))
 (let (($x937 (and $x932 $x125)))
 (=> $x937 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _46) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _47) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x950 (= ?x109 _46)))
 (let (($x955 (and $x950 $x125)))
 (=> $x955 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _47) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _48) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x968 (= ?x109 _47)))
 (let (($x973 (and $x968 $x125)))
 (=> $x973 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _48) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _49) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x986 (= ?x109 _48)))
 (let (($x991 (and $x986 $x125)))
 (=> $x991 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let (($x103 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _49) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _50) $x103))))
 )
(assert
 (forall ((time Int) )(let ((?x101 (+ time 1)))
 (let ((?x104 (time-to-state ?x101)))
 (let (($x124 (= ?x104 ERR)))
 (let ((?x107 (input-arg0 time)))
 (let (($x125 (= ?x107 1)))
 (let ((?x109 (time-to-state time)))
 (let (($x1004 (= ?x109 _49)))
 (let (($x1009 (and $x1004 $x125)))
 (=> $x1009 $x124))))))))))
 )
(assert
 (forall ((time Int) )(let ((?x109 (time-to-state time)))
 (let (($x1012 (= ?x109 ERR)))
 (and $x1012 (and (distinct (input-arg0 time) 1) true)))))
 )
(assert
 (and (distinct _0 _1 ERR _2 _3 _4 _5 _6 _7 _8 _9 _10 _11 _12 _13 _14 _15 _16 _17 _18 _19 _20 _21 _22 _23 _24 _25 _26 _27 _28 _29 _30 _31 _32 _33 _34 _35 _36 _37 _38 _39 _40 _41 _42 _43 _44 _45 _46 _47 _48 _49 _50) true))
(check-sat)
