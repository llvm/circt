; 
(set-info :status unknown)
(declare-sort STATE 0)
 (declare-fun _0 () STATE)
(declare-fun time-to-state (Int) STATE)
(declare-fun input-arg0 (Int) Int)
(declare-fun var1_0 (Int) Int)
(declare-fun _1 () STATE)
(declare-fun ERR () STATE)
(declare-fun _2 () STATE)
(declare-fun _3 () STATE)
(declare-fun _4 () STATE)
(declare-fun _5 () STATE)
(assert
 (let ((?x14 (time-to-state 0)))
 (= ?x14 _0)))
(assert
 (let ((?x34 (input-arg0 0)))
 (= ?x34 0)))
(assert
 (let ((?x36 (var1_0 0)))
 (= ?x36 0)))
(assert
 (forall ((time Int) )(let (($x58 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _0) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _1) $x58))))
 )
(assert
 (forall ((time Int) )(let ((?x56 (+ time 1)))
 (let ((?x59 (time-to-state ?x56)))
 (let (($x79 (= ?x59 ERR)))
 (let ((?x62 (input-arg0 time)))
 (let (($x80 (= ?x62 1)))
 (let ((?x64 (time-to-state time)))
 (let (($x65 (= ?x64 _0)))
 (let (($x81 (and $x65 $x80)))
 (=> $x81 $x79))))))))))
 )
(assert
 (forall ((time Int) )(let (($x58 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _1) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _2) $x58))))
 )
(assert
 (forall ((time Int) )(let ((?x56 (+ time 1)))
 (let ((?x59 (time-to-state ?x56)))
 (let (($x79 (= ?x59 ERR)))
 (let ((?x62 (input-arg0 time)))
 (let (($x80 (= ?x62 1)))
 (let ((?x64 (time-to-state time)))
 (let (($x95 (= ?x64 _1)))
 (let (($x100 (and $x95 $x80)))
 (=> $x100 $x79))))))))))
 )
(assert
 (forall ((time Int) )(let (($x58 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _2) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _3) $x58))))
 )
(assert
 (forall ((time Int) )(let ((?x56 (+ time 1)))
 (let ((?x59 (time-to-state ?x56)))
 (let (($x79 (= ?x59 ERR)))
 (let ((?x62 (input-arg0 time)))
 (let (($x80 (= ?x62 1)))
 (let ((?x64 (time-to-state time)))
 (let (($x113 (= ?x64 _2)))
 (let (($x118 (and $x113 $x80)))
 (=> $x118 $x79))))))))))
 )
(assert
 (forall ((time Int) )(let (($x58 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _3) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _4) $x58))))
 )
(assert
 (forall ((time Int) )(let ((?x56 (+ time 1)))
 (let ((?x59 (time-to-state ?x56)))
 (let (($x79 (= ?x59 ERR)))
 (let ((?x62 (input-arg0 time)))
 (let (($x80 (= ?x62 1)))
 (let ((?x64 (time-to-state time)))
 (let (($x131 (= ?x64 _3)))
 (let (($x136 (and $x131 $x80)))
 (=> $x136 $x79))))))))))
 )
(assert
 (forall ((time Int) )(let (($x58 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) _4) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) _5) $x58))))
 )
(assert
 (forall ((time Int) )(let ((?x56 (+ time 1)))
 (let ((?x59 (time-to-state ?x56)))
 (let (($x79 (= ?x59 ERR)))
 (let ((?x62 (input-arg0 time)))
 (let (($x80 (= ?x62 1)))
 (let ((?x64 (time-to-state time)))
 (let (($x149 (= ?x64 _4)))
 (let (($x154 (and $x149 $x80)))
 (=> $x154 $x79))))))))))
 )
(assert
 (forall ((time Int) )(let ((?x64 (time-to-state time)))
 (let (($x157 (= ?x64 ERR)))
 (and $x157 (and (distinct (input-arg0 time) 1) true)))))
 )
(assert
 (and (distinct _0 _1 ERR _2 _3 _4 _5) true))
(check-sat)
