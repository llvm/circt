; 
(set-info :status unknown)
(declare-fun time-to-state (Int) Int)
(declare-fun var0_0 (Int) Int)
(assert
 (forall ((time Int) )(let (($x248 (<= time 160)))
 (let (($x256 (= (var0_0 (+ time 1)) (+ (var0_0 time) 1))))
 (let (($x10 (= (var0_0 0) 0)))
 (let (($x368 (and (and (and (= (time-to-state 0) 0) $x10) $x10) (and (= (time-to-state (+ time 1)) 1) $x256))))
 (let (($x370 (and (and $x368 (and (= (time-to-state (+ time 1)) 2) $x256)) (and (= (time-to-state (+ time 1)) 3) $x256))))
 (let (($x372 (and (and $x370 (and (= (time-to-state (+ time 1)) 4) $x256)) (and (= (time-to-state (+ time 1)) 5) $x256))))
 (let (($x374 (and (and $x372 (and (= (time-to-state (+ time 1)) 6) $x256)) (and (= (time-to-state (+ time 1)) 7) $x256))))
 (let (($x376 (and (and $x374 (and (= (time-to-state (+ time 1)) 8) $x256)) (and (= (time-to-state (+ time 1)) 9) $x256))))
 (let (($x378 (and (and $x376 (and (= (time-to-state (+ time 1)) 10) $x256)) (and (= (time-to-state (+ time 1)) 11) $x256))))
 (let (($x380 (and (and $x378 (and (= (time-to-state (+ time 1)) 12) $x256)) (and (= (time-to-state (+ time 1)) 13) $x256))))
 (let (($x382 (and (and $x380 (and (= (time-to-state (+ time 1)) 14) $x256)) (and (= (time-to-state (+ time 1)) 15) $x256))))
 (let (($x384 (and (and $x382 (and (= (time-to-state (+ time 1)) 16) $x256)) (and (= (time-to-state (+ time 1)) 17) $x256))))
 (let (($x386 (and (and $x384 (and (= (time-to-state (+ time 1)) 18) $x256)) (and (= (time-to-state (+ time 1)) 19) $x256))))
 (let (($x388 (and (and $x386 (and (= (time-to-state (+ time 1)) 20) $x256)) (and (= (time-to-state (+ time 1)) 21) $x256))))
 (let (($x390 (and (and $x388 (and (= (time-to-state (+ time 1)) 22) $x256)) (and (= (time-to-state (+ time 1)) 23) $x256))))
 (let (($x392 (and (and $x390 (and (= (time-to-state (+ time 1)) 24) $x256)) (and (= (time-to-state (+ time 1)) 25) $x256))))
 (let (($x394 (and (and $x392 (and (= (time-to-state (+ time 1)) 26) $x256)) (and (= (time-to-state (+ time 1)) 27) $x256))))
 (let (($x396 (and (and $x394 (and (= (time-to-state (+ time 1)) 28) $x256)) (and (= (time-to-state (+ time 1)) 29) $x256))))
 (let (($x398 (and (and $x396 (and (= (time-to-state (+ time 1)) 30) $x256)) (and (= (time-to-state (+ time 1)) 31) $x256))))
 (let (($x400 (and (and $x398 (and (= (time-to-state (+ time 1)) 32) $x256)) (and (= (time-to-state (+ time 1)) 33) $x256))))
 (let (($x402 (and (and $x400 (and (= (time-to-state (+ time 1)) 34) $x256)) (and (= (time-to-state (+ time 1)) 35) $x256))))
 (let (($x404 (and (and $x402 (and (= (time-to-state (+ time 1)) 36) $x256)) (and (= (time-to-state (+ time 1)) 37) $x256))))
 (let (($x406 (and (and $x404 (and (= (time-to-state (+ time 1)) 38) $x256)) (and (= (time-to-state (+ time 1)) 39) $x256))))
 (let (($x408 (and (and $x406 (and (= (time-to-state (+ time 1)) 40) $x256)) (and (= (time-to-state (+ time 1)) 41) $x256))))
 (let (($x410 (and (and $x408 (and (= (time-to-state (+ time 1)) 42) $x256)) (and (= (time-to-state (+ time 1)) 43) $x256))))
 (let (($x412 (and (and $x410 (and (= (time-to-state (+ time 1)) 44) $x256)) (and (= (time-to-state (+ time 1)) 45) $x256))))
 (let (($x414 (and (and $x412 (and (= (time-to-state (+ time 1)) 46) $x256)) (and (= (time-to-state (+ time 1)) 47) $x256))))
 (let (($x416 (and (and $x414 (and (= (time-to-state (+ time 1)) 48) $x256)) (and (= (time-to-state (+ time 1)) 49) $x256))))
 (let (($x418 (and (and $x416 (and (= (time-to-state (+ time 1)) 50) $x256)) (and (= (time-to-state (+ time 1)) 51) $x256))))
 (let (($x420 (and (and $x418 (and (= (time-to-state (+ time 1)) 52) $x256)) (and (= (time-to-state (+ time 1)) 53) $x256))))
 (let (($x422 (and (and $x420 (and (= (time-to-state (+ time 1)) 54) $x256)) (and (= (time-to-state (+ time 1)) 55) $x256))))
 (and (and (and $x422 (and (distinct (time-to-state time) 54) true)) (> time 0)) $x248)))))))))))))))))))))))))))))))))
 )
(check-sat)
