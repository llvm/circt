//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements datapath ops.
//
//===----------------------------------------------------------------------===//

#include "circt/Dialect/Datapath/DatapathOps.h"

using namespace circt;
using namespace datapath;

LogicalResult CompressOp::verify() {
  // The compressor must reduce the number of operands by at least 1 otherwise
  // it fails to perform any reduction.
  if (getNumOperands() < 3)
    return emitOpError("Requires 3 or more arguments - otherwise use add");

  if (getNumResults() >= getNumOperands())
    return emitOpError("Must reduce the number of operands by at least 1");

  if (getNumResults() < 2)
    return emitOpError("Must produce at least 2 results");

  return success();
}

// Parser for the custom type format
// Parser for "<num-inputs> x <input-type> -> <output-type>"
static ParseResult parseCompressFormat(
    OpAsmParser &parser,
    SmallVectorImpl<Type> &inputTypes,
    SmallVectorImpl<Type> &resultTypes) {
  
  int64_t inputCount;
  Type inputElementType;
  
  if (parser.parseInteger(inputCount) ||
      parser.parseKeyword("x") ||
      parser.parseType(inputElementType))
    return failure();
  
  // Parse arrow
  if (parser.parseArrow())
    return failure();
  
  // Parse output types
  if (parser.parseLParen())
    return failure();
  
  Type resultType;
  if (parser.parseType(resultType))
    return failure();
  
  resultTypes.push_back(resultType);
  
  // Parse additional output types
  while (parser.parseOptionalComma().succeeded()) {
    if (parser.parseType(resultType))
      return failure();
    resultTypes.push_back(resultType);
  }
  
  if (parser.parseRParen())
    return failure();
  
  // Fill input types
  inputTypes.assign(inputCount, inputElementType);
  
  return success();
}

// Printer for "<num-inputs> x <input-type> -> <output-type>"
static void printCompressFormat(
    OpAsmPrinter &printer,
    Operation *op,
    TypeRange inputTypes,
    TypeRange resultTypes) {
  
  // Print input types as "count x type"
  printer << inputTypes.size() << " x " << inputTypes[0];
  
  printer << " -> ";
  
  // Print output types as tuple
  printer << "(";
  llvm::interleaveComma(resultTypes, printer);
  printer << ")";
}

//===----------------------------------------------------------------------===//
// TableGen generated logic.
//===----------------------------------------------------------------------===//

// Provide the autogenerated implementation guts for the Op classes.
#define GET_OP_CLASSES
#include "circt/Dialect/Datapath/Datapath.cpp.inc"
