//===- Server.h - ESI cosim RPC servers -------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// Various classes used to implement the RPC server classes generated by
// CapnProto. Capnp C++ RPC servers are based on 'libkj' and its asynchrony
// model, which is very foreign. This is what the 'kj' namespace is along with
// alternate collections and other utility code.
//
//===----------------------------------------------------------------------===//

#ifndef COSIM_SERVER_H
#define COSIM_SERVER_H

#include "cosim/Endpoint.h"
#include "cosim/LowLevel.h"
#include <thread>

namespace esi {
namespace cosim {

/// The main RpcServer. Does not implement any capnp RPC interfaces but contains
/// the capnp main RPC server. We run the capnp server in its own thread to be
/// more responsive to network traffic and so as to not slow down the
/// simulation.
class RpcServer {
public:
  EndpointRegistry endpoints;
  LowLevel lowLevelBridge;

  RpcServer();
  ~RpcServer();

  /// Start and stop the server thread.
  void run(uint16_t port);
  void stop();

  void setManifest(unsigned int esiVersion,
                   const std::vector<uint8_t> &manifest) {
    this->esiVersion = esiVersion;
    compressedManifest = manifest;
  }

private:
  using Lock = std::lock_guard<std::mutex>;

  /// The thread's main loop function. Exits on shutdown.
  void mainLoop(uint16_t port);

  std::thread *mainThread;
  volatile bool stopSig;
  std::mutex m;

  unsigned int esiVersion = -1;
  std::vector<uint8_t> compressedManifest;
};

} // namespace cosim
} // namespace esi

#endif
