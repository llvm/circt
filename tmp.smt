(set-logic HORN)
(declare-fun _0 (Int Int Int) Bool)
(declare-fun _1 (Int Int Int) Bool)
(declare-fun ERR (Int Int Int) Bool)
(declare-fun _2 (Int Int Int) Bool)
(declare-fun _3 (Int Int Int) Bool)
(declare-fun _4 (Int Int Int) Bool)
(declare-fun _5 (Int Int Int) Bool)
(declare-fun _6 (Int Int Int) Bool)
(declare-fun _7 (Int Int Int) Bool)
(declare-fun _8 (Int Int Int) Bool)
(declare-fun _9 (Int Int Int) Bool)
(declare-fun _10 (Int Int Int) Bool)
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (= time 0) (_0 input0 0 time)) :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_0 input0 var1 time) (distinct input0 0))
         (_1 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_0 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_1 input0 var1 time) (distinct input0 0))
         (_2 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_1 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_2 input0 var1 time) (distinct input0 0))
         (_3 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_2 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_3 input0 var1 time) (distinct input0 0))
         (_4 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_3 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_4 input0 var1 time) (distinct input0 0))
         (_5 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_4 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_5 input0 var1 time) (distinct input0 0))
         (_6 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_5 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_6 input0 var1 time) (distinct input0 0))
         (_7 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_6 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_7 input0 var1 time) (distinct input0 0))
         (_8 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_7 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_8 input0 var1 time) (distinct input0 0))
         (_9 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_8 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_9 input0 var1 time) (distinct input0 0))
         (_10 input0 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (and (_9 input0 var1 time) (= input0 1)) (ERR input0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (= input0 1) (not (ERR input0 var1 (+ time 1)))) :weight 0)))
(check-sat)
