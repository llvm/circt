; 
(set-info :status unknown)
(declare-fun _0 (Int Int Int) Bool)
(declare-fun input-arg0 (Int) Int)
(declare-fun _1 (Int Int Int) Bool)
(declare-fun ERR (Int Int Int) Bool)
(declare-fun _2 (Int Int Int) Bool)
(declare-fun _3 (Int Int Int) Bool)
(declare-fun _4 (Int Int Int) Bool)
(declare-fun _5 (Int Int Int) Bool)
(declare-fun _6 (Int Int Int) Bool)
(declare-fun _7 (Int Int Int) Bool)
(declare-fun _8 (Int Int Int) Bool)
(declare-fun _9 (Int Int Int) Bool)
(declare-fun _10 (Int Int Int) Bool)
(declare-fun _11 (Int Int Int) Bool)
(declare-fun _12 (Int Int Int) Bool)
(declare-fun _13 (Int Int Int) Bool)
(declare-fun _14 (Int Int Int) Bool)
(declare-fun _15 (Int Int Int) Bool)
(declare-fun _16 (Int Int Int) Bool)
(declare-fun _17 (Int Int Int) Bool)
(declare-fun _18 (Int Int Int) Bool)
(declare-fun _19 (Int Int Int) Bool)
(declare-fun _20 (Int Int Int) Bool)
(declare-fun _21 (Int Int Int) Bool)
(declare-fun _22 (Int Int Int) Bool)
(declare-fun _23 (Int Int Int) Bool)
(declare-fun _24 (Int Int Int) Bool)
(declare-fun _25 (Int Int Int) Bool)
(declare-fun _26 (Int Int Int) Bool)
(declare-fun _27 (Int Int Int) Bool)
(declare-fun _28 (Int Int Int) Bool)
(declare-fun _29 (Int Int Int) Bool)
(declare-fun _30 (Int Int Int) Bool)
(declare-fun _31 (Int Int Int) Bool)
(declare-fun _32 (Int Int Int) Bool)
(declare-fun _33 (Int Int Int) Bool)
(declare-fun _34 (Int Int Int) Bool)
(declare-fun _35 (Int Int Int) Bool)
(declare-fun _36 (Int Int Int) Bool)
(declare-fun _37 (Int Int Int) Bool)
(declare-fun _38 (Int Int Int) Bool)
(declare-fun _39 (Int Int Int) Bool)
(declare-fun _40 (Int Int Int) Bool)
(declare-fun _41 (Int Int Int) Bool)
(declare-fun _42 (Int Int Int) Bool)
(declare-fun _43 (Int Int Int) Bool)
(declare-fun _44 (Int Int Int) Bool)
(declare-fun _45 (Int Int Int) Bool)
(declare-fun _46 (Int Int Int) Bool)
(declare-fun _47 (Int Int Int) Bool)
(declare-fun _48 (Int Int Int) Bool)
(declare-fun _49 (Int Int Int) Bool)
(declare-fun _50 (Int Int Int) Bool)
(declare-fun _51 (Int Int Int) Bool)
(declare-fun _52 (Int Int Int) Bool)
(declare-fun _53 (Int Int Int) Bool)
(declare-fun _54 (Int Int Int) Bool)
(declare-fun _55 (Int Int Int) Bool)
(declare-fun _56 (Int Int Int) Bool)
(declare-fun _57 (Int Int Int) Bool)
(declare-fun _58 (Int Int Int) Bool)
(declare-fun _59 (Int Int Int) Bool)
(declare-fun _60 (Int Int Int) Bool)
(declare-fun _61 (Int Int Int) Bool)
(declare-fun _62 (Int Int Int) Bool)
(declare-fun _63 (Int Int Int) Bool)
(declare-fun _64 (Int Int Int) Bool)
(declare-fun _65 (Int Int Int) Bool)
(declare-fun _66 (Int Int Int) Bool)
(declare-fun _67 (Int Int Int) Bool)
(declare-fun _68 (Int Int Int) Bool)
(declare-fun _69 (Int Int Int) Bool)
(declare-fun _70 (Int Int Int) Bool)
(assert
 (forall ((var1 Int) )(let ((?x15 (input-arg0 0)))
 (_0 ?x15 0 0)))
 )
(assert
 (forall ((time Int) )(let (($x67 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x64 (_0 ?x62 var1 time)))
 (=> (and $x64 $x63) (_1 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x67)))))
 )
(assert
 (forall ((time Int) )(let (($x92 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x64 (_0 ?x62 var1 time)))
 (let (($x74 (and $x64 $x73)))
 (=> $x74 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x92)))))
 )
(assert
 (forall ((time Int) )(let (($x106 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x103 (_1 ?x62 var1 time)))
 (=> (and $x103 $x63) (_2 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x106)))))
 )
(assert
 (forall ((time Int) )(let (($x110 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x103 (_1 ?x62 var1 time)))
 (let (($x95 (and $x103 $x73)))
 (=> $x95 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x110)))))
 )
(assert
 (forall ((time Int) )(let (($x130 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x127 (_2 ?x62 var1 time)))
 (=> (and $x127 $x63) (_3 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x130)))))
 )
(assert
 (forall ((time Int) )(let (($x134 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x127 (_2 ?x62 var1 time)))
 (let (($x120 (and $x127 $x73)))
 (=> $x120 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x134)))))
 )
(assert
 (forall ((time Int) )(let (($x154 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x151 (_3 ?x62 var1 time)))
 (=> (and $x151 $x63) (_4 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x154)))))
 )
(assert
 (forall ((time Int) )(let (($x158 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x151 (_3 ?x62 var1 time)))
 (let (($x144 (and $x151 $x73)))
 (=> $x144 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x158)))))
 )
(assert
 (forall ((time Int) )(let (($x178 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x175 (_4 ?x62 var1 time)))
 (=> (and $x175 $x63) (_5 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x178)))))
 )
(assert
 (forall ((time Int) )(let (($x182 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x175 (_4 ?x62 var1 time)))
 (let (($x168 (and $x175 $x73)))
 (=> $x168 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x182)))))
 )
(assert
 (forall ((time Int) )(let (($x202 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x199 (_5 ?x62 var1 time)))
 (=> (and $x199 $x63) (_6 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x202)))))
 )
(assert
 (forall ((time Int) )(let (($x206 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x199 (_5 ?x62 var1 time)))
 (let (($x192 (and $x199 $x73)))
 (=> $x192 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x206)))))
 )
(assert
 (forall ((time Int) )(let (($x226 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x223 (_6 ?x62 var1 time)))
 (=> (and $x223 $x63) (_7 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x226)))))
 )
(assert
 (forall ((time Int) )(let (($x230 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x223 (_6 ?x62 var1 time)))
 (let (($x216 (and $x223 $x73)))
 (=> $x216 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x230)))))
 )
(assert
 (forall ((time Int) )(let (($x250 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x247 (_7 ?x62 var1 time)))
 (=> (and $x247 $x63) (_8 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x250)))))
 )
(assert
 (forall ((time Int) )(let (($x254 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x247 (_7 ?x62 var1 time)))
 (let (($x240 (and $x247 $x73)))
 (=> $x240 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x254)))))
 )
(assert
 (forall ((time Int) )(let (($x274 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x271 (_8 ?x62 var1 time)))
 (=> (and $x271 $x63) (_9 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x274)))))
 )
(assert
 (forall ((time Int) )(let (($x278 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x271 (_8 ?x62 var1 time)))
 (let (($x264 (and $x271 $x73)))
 (=> $x264 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x278)))))
 )
(assert
 (forall ((time Int) )(let (($x298 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x295 (_9 ?x62 var1 time)))
 (=> (and $x295 $x63) (_10 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x298)))))
 )
(assert
 (forall ((time Int) )(let (($x302 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x295 (_9 ?x62 var1 time)))
 (let (($x288 (and $x295 $x73)))
 (=> $x288 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x302)))))
 )
(assert
 (forall ((time Int) )(let (($x322 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x319 (_10 ?x62 var1 time)))
 (=> (and $x319 $x63) (_11 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x322)))))
 )
(assert
 (forall ((time Int) )(let (($x326 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x319 (_10 ?x62 var1 time)))
 (let (($x312 (and $x319 $x73)))
 (=> $x312 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x326)))))
 )
(assert
 (forall ((time Int) )(let (($x346 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x343 (_11 ?x62 var1 time)))
 (=> (and $x343 $x63) (_12 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x346)))))
 )
(assert
 (forall ((time Int) )(let (($x350 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x343 (_11 ?x62 var1 time)))
 (let (($x336 (and $x343 $x73)))
 (=> $x336 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x350)))))
 )
(assert
 (forall ((time Int) )(let (($x370 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x367 (_12 ?x62 var1 time)))
 (=> (and $x367 $x63) (_13 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x370)))))
 )
(assert
 (forall ((time Int) )(let (($x374 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x367 (_12 ?x62 var1 time)))
 (let (($x360 (and $x367 $x73)))
 (=> $x360 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x374)))))
 )
(assert
 (forall ((time Int) )(let (($x394 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x391 (_13 ?x62 var1 time)))
 (=> (and $x391 $x63) (_14 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x394)))))
 )
(assert
 (forall ((time Int) )(let (($x398 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x391 (_13 ?x62 var1 time)))
 (let (($x384 (and $x391 $x73)))
 (=> $x384 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x398)))))
 )
(assert
 (forall ((time Int) )(let (($x418 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x415 (_14 ?x62 var1 time)))
 (=> (and $x415 $x63) (_15 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x418)))))
 )
(assert
 (forall ((time Int) )(let (($x422 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x415 (_14 ?x62 var1 time)))
 (let (($x408 (and $x415 $x73)))
 (=> $x408 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x422)))))
 )
(assert
 (forall ((time Int) )(let (($x442 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x439 (_15 ?x62 var1 time)))
 (=> (and $x439 $x63) (_16 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x442)))))
 )
(assert
 (forall ((time Int) )(let (($x446 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x439 (_15 ?x62 var1 time)))
 (let (($x432 (and $x439 $x73)))
 (=> $x432 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x446)))))
 )
(assert
 (forall ((time Int) )(let (($x466 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x463 (_16 ?x62 var1 time)))
 (=> (and $x463 $x63) (_17 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x466)))))
 )
(assert
 (forall ((time Int) )(let (($x470 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x463 (_16 ?x62 var1 time)))
 (let (($x456 (and $x463 $x73)))
 (=> $x456 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x470)))))
 )
(assert
 (forall ((time Int) )(let (($x490 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x487 (_17 ?x62 var1 time)))
 (=> (and $x487 $x63) (_18 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x490)))))
 )
(assert
 (forall ((time Int) )(let (($x494 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x487 (_17 ?x62 var1 time)))
 (let (($x480 (and $x487 $x73)))
 (=> $x480 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x494)))))
 )
(assert
 (forall ((time Int) )(let (($x514 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x511 (_18 ?x62 var1 time)))
 (=> (and $x511 $x63) (_19 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x514)))))
 )
(assert
 (forall ((time Int) )(let (($x518 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x511 (_18 ?x62 var1 time)))
 (let (($x504 (and $x511 $x73)))
 (=> $x504 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x518)))))
 )
(assert
 (forall ((time Int) )(let (($x538 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x535 (_19 ?x62 var1 time)))
 (=> (and $x535 $x63) (_20 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x538)))))
 )
(assert
 (forall ((time Int) )(let (($x542 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x535 (_19 ?x62 var1 time)))
 (let (($x528 (and $x535 $x73)))
 (=> $x528 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x542)))))
 )
(assert
 (forall ((time Int) )(let (($x562 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x559 (_20 ?x62 var1 time)))
 (=> (and $x559 $x63) (_21 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x562)))))
 )
(assert
 (forall ((time Int) )(let (($x566 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x559 (_20 ?x62 var1 time)))
 (let (($x552 (and $x559 $x73)))
 (=> $x552 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x566)))))
 )
(assert
 (forall ((time Int) )(let (($x586 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x583 (_21 ?x62 var1 time)))
 (=> (and $x583 $x63) (_22 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x586)))))
 )
(assert
 (forall ((time Int) )(let (($x590 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x583 (_21 ?x62 var1 time)))
 (let (($x576 (and $x583 $x73)))
 (=> $x576 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x590)))))
 )
(assert
 (forall ((time Int) )(let (($x610 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x607 (_22 ?x62 var1 time)))
 (=> (and $x607 $x63) (_23 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x610)))))
 )
(assert
 (forall ((time Int) )(let (($x614 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x607 (_22 ?x62 var1 time)))
 (let (($x600 (and $x607 $x73)))
 (=> $x600 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x614)))))
 )
(assert
 (forall ((time Int) )(let (($x634 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x631 (_23 ?x62 var1 time)))
 (=> (and $x631 $x63) (_24 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x634)))))
 )
(assert
 (forall ((time Int) )(let (($x638 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x631 (_23 ?x62 var1 time)))
 (let (($x624 (and $x631 $x73)))
 (=> $x624 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x638)))))
 )
(assert
 (forall ((time Int) )(let (($x658 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x655 (_24 ?x62 var1 time)))
 (=> (and $x655 $x63) (_25 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x658)))))
 )
(assert
 (forall ((time Int) )(let (($x662 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x655 (_24 ?x62 var1 time)))
 (let (($x648 (and $x655 $x73)))
 (=> $x648 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x662)))))
 )
(assert
 (forall ((time Int) )(let (($x682 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x679 (_25 ?x62 var1 time)))
 (=> (and $x679 $x63) (_26 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x682)))))
 )
(assert
 (forall ((time Int) )(let (($x686 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x679 (_25 ?x62 var1 time)))
 (let (($x672 (and $x679 $x73)))
 (=> $x672 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x686)))))
 )
(assert
 (forall ((time Int) )(let (($x706 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x703 (_26 ?x62 var1 time)))
 (=> (and $x703 $x63) (_27 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x706)))))
 )
(assert
 (forall ((time Int) )(let (($x710 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x703 (_26 ?x62 var1 time)))
 (let (($x696 (and $x703 $x73)))
 (=> $x696 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x710)))))
 )
(assert
 (forall ((time Int) )(let (($x730 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x727 (_27 ?x62 var1 time)))
 (=> (and $x727 $x63) (_28 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x730)))))
 )
(assert
 (forall ((time Int) )(let (($x734 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x727 (_27 ?x62 var1 time)))
 (let (($x720 (and $x727 $x73)))
 (=> $x720 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x734)))))
 )
(assert
 (forall ((time Int) )(let (($x754 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x751 (_28 ?x62 var1 time)))
 (=> (and $x751 $x63) (_29 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x754)))))
 )
(assert
 (forall ((time Int) )(let (($x758 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x751 (_28 ?x62 var1 time)))
 (let (($x744 (and $x751 $x73)))
 (=> $x744 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x758)))))
 )
(assert
 (forall ((time Int) )(let (($x778 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x775 (_29 ?x62 var1 time)))
 (=> (and $x775 $x63) (_30 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x778)))))
 )
(assert
 (forall ((time Int) )(let (($x782 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x775 (_29 ?x62 var1 time)))
 (let (($x768 (and $x775 $x73)))
 (=> $x768 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x782)))))
 )
(assert
 (forall ((time Int) )(let (($x802 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x799 (_30 ?x62 var1 time)))
 (=> (and $x799 $x63) (_31 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x802)))))
 )
(assert
 (forall ((time Int) )(let (($x806 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x799 (_30 ?x62 var1 time)))
 (let (($x792 (and $x799 $x73)))
 (=> $x792 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x806)))))
 )
(assert
 (forall ((time Int) )(let (($x826 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x823 (_31 ?x62 var1 time)))
 (=> (and $x823 $x63) (_32 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x826)))))
 )
(assert
 (forall ((time Int) )(let (($x830 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x823 (_31 ?x62 var1 time)))
 (let (($x816 (and $x823 $x73)))
 (=> $x816 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x830)))))
 )
(assert
 (forall ((time Int) )(let (($x850 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x847 (_32 ?x62 var1 time)))
 (=> (and $x847 $x63) (_33 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x850)))))
 )
(assert
 (forall ((time Int) )(let (($x854 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x847 (_32 ?x62 var1 time)))
 (let (($x840 (and $x847 $x73)))
 (=> $x840 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x854)))))
 )
(assert
 (forall ((time Int) )(let (($x874 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x871 (_33 ?x62 var1 time)))
 (=> (and $x871 $x63) (_34 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x874)))))
 )
(assert
 (forall ((time Int) )(let (($x878 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x871 (_33 ?x62 var1 time)))
 (let (($x864 (and $x871 $x73)))
 (=> $x864 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x878)))))
 )
(assert
 (forall ((time Int) )(let (($x898 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x895 (_34 ?x62 var1 time)))
 (=> (and $x895 $x63) (_35 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x898)))))
 )
(assert
 (forall ((time Int) )(let (($x902 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x895 (_34 ?x62 var1 time)))
 (let (($x888 (and $x895 $x73)))
 (=> $x888 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x902)))))
 )
(assert
 (forall ((time Int) )(let (($x922 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x919 (_35 ?x62 var1 time)))
 (=> (and $x919 $x63) (_36 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x922)))))
 )
(assert
 (forall ((time Int) )(let (($x926 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x919 (_35 ?x62 var1 time)))
 (let (($x912 (and $x919 $x73)))
 (=> $x912 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x926)))))
 )
(assert
 (forall ((time Int) )(let (($x946 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x943 (_36 ?x62 var1 time)))
 (=> (and $x943 $x63) (_37 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x946)))))
 )
(assert
 (forall ((time Int) )(let (($x950 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x943 (_36 ?x62 var1 time)))
 (let (($x936 (and $x943 $x73)))
 (=> $x936 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x950)))))
 )
(assert
 (forall ((time Int) )(let (($x970 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x967 (_37 ?x62 var1 time)))
 (=> (and $x967 $x63) (_38 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x970)))))
 )
(assert
 (forall ((time Int) )(let (($x974 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x967 (_37 ?x62 var1 time)))
 (let (($x960 (and $x967 $x73)))
 (=> $x960 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x974)))))
 )
(assert
 (forall ((time Int) )(let (($x994 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x991 (_38 ?x62 var1 time)))
 (=> (and $x991 $x63) (_39 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x994)))))
 )
(assert
 (forall ((time Int) )(let (($x998 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x991 (_38 ?x62 var1 time)))
 (let (($x984 (and $x991 $x73)))
 (=> $x984 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x998)))))
 )
(assert
 (forall ((time Int) )(let (($x1018 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1015 (_39 ?x62 var1 time)))
 (=> (and $x1015 $x63) (_40 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1018)))))
 )
(assert
 (forall ((time Int) )(let (($x1022 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1015 (_39 ?x62 var1 time)))
 (let (($x1008 (and $x1015 $x73)))
 (=> $x1008 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1022)))))
 )
(assert
 (forall ((time Int) )(let (($x1042 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1039 (_40 ?x62 var1 time)))
 (=> (and $x1039 $x63) (_41 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1042)))))
 )
(assert
 (forall ((time Int) )(let (($x1046 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1039 (_40 ?x62 var1 time)))
 (let (($x1032 (and $x1039 $x73)))
 (=> $x1032 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1046)))))
 )
(assert
 (forall ((time Int) )(let (($x1066 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1063 (_41 ?x62 var1 time)))
 (=> (and $x1063 $x63) (_42 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1066)))))
 )
(assert
 (forall ((time Int) )(let (($x1070 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1063 (_41 ?x62 var1 time)))
 (let (($x1056 (and $x1063 $x73)))
 (=> $x1056 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1070)))))
 )
(assert
 (forall ((time Int) )(let (($x1090 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1087 (_42 ?x62 var1 time)))
 (=> (and $x1087 $x63) (_43 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1090)))))
 )
(assert
 (forall ((time Int) )(let (($x1094 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1087 (_42 ?x62 var1 time)))
 (let (($x1080 (and $x1087 $x73)))
 (=> $x1080 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1094)))))
 )
(assert
 (forall ((time Int) )(let (($x1114 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1111 (_43 ?x62 var1 time)))
 (=> (and $x1111 $x63) (_44 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1114)))))
 )
(assert
 (forall ((time Int) )(let (($x1118 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1111 (_43 ?x62 var1 time)))
 (let (($x1104 (and $x1111 $x73)))
 (=> $x1104 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1118)))))
 )
(assert
 (forall ((time Int) )(let (($x1138 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1135 (_44 ?x62 var1 time)))
 (=> (and $x1135 $x63) (_45 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1138)))))
 )
(assert
 (forall ((time Int) )(let (($x1142 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1135 (_44 ?x62 var1 time)))
 (let (($x1128 (and $x1135 $x73)))
 (=> $x1128 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1142)))))
 )
(assert
 (forall ((time Int) )(let (($x1162 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1159 (_45 ?x62 var1 time)))
 (=> (and $x1159 $x63) (_46 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1162)))))
 )
(assert
 (forall ((time Int) )(let (($x1166 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1159 (_45 ?x62 var1 time)))
 (let (($x1152 (and $x1159 $x73)))
 (=> $x1152 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1166)))))
 )
(assert
 (forall ((time Int) )(let (($x1186 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1183 (_46 ?x62 var1 time)))
 (=> (and $x1183 $x63) (_47 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1186)))))
 )
(assert
 (forall ((time Int) )(let (($x1190 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1183 (_46 ?x62 var1 time)))
 (let (($x1176 (and $x1183 $x73)))
 (=> $x1176 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1190)))))
 )
(assert
 (forall ((time Int) )(let (($x1210 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1207 (_47 ?x62 var1 time)))
 (=> (and $x1207 $x63) (_48 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1210)))))
 )
(assert
 (forall ((time Int) )(let (($x1214 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1207 (_47 ?x62 var1 time)))
 (let (($x1200 (and $x1207 $x73)))
 (=> $x1200 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1214)))))
 )
(assert
 (forall ((time Int) )(let (($x1234 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1231 (_48 ?x62 var1 time)))
 (=> (and $x1231 $x63) (_49 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1234)))))
 )
(assert
 (forall ((time Int) )(let (($x1238 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1231 (_48 ?x62 var1 time)))
 (let (($x1224 (and $x1231 $x73)))
 (=> $x1224 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1238)))))
 )
(assert
 (forall ((time Int) )(let (($x1258 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1255 (_49 ?x62 var1 time)))
 (=> (and $x1255 $x63) (_50 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1258)))))
 )
(assert
 (forall ((time Int) )(let (($x1262 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1255 (_49 ?x62 var1 time)))
 (let (($x1248 (and $x1255 $x73)))
 (=> $x1248 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1262)))))
 )
(assert
 (forall ((time Int) )(let (($x1282 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1279 (_50 ?x62 var1 time)))
 (=> (and $x1279 $x63) (_51 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1282)))))
 )
(assert
 (forall ((time Int) )(let (($x1286 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1279 (_50 ?x62 var1 time)))
 (let (($x1272 (and $x1279 $x73)))
 (=> $x1272 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1286)))))
 )
(assert
 (forall ((time Int) )(let (($x1306 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1303 (_51 ?x62 var1 time)))
 (=> (and $x1303 $x63) (_52 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1306)))))
 )
(assert
 (forall ((time Int) )(let (($x1310 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1303 (_51 ?x62 var1 time)))
 (let (($x1296 (and $x1303 $x73)))
 (=> $x1296 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1310)))))
 )
(assert
 (forall ((time Int) )(let (($x1330 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1327 (_52 ?x62 var1 time)))
 (=> (and $x1327 $x63) (_53 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1330)))))
 )
(assert
 (forall ((time Int) )(let (($x1334 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1327 (_52 ?x62 var1 time)))
 (let (($x1320 (and $x1327 $x73)))
 (=> $x1320 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1334)))))
 )
(assert
 (forall ((time Int) )(let (($x1354 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1351 (_53 ?x62 var1 time)))
 (=> (and $x1351 $x63) (_54 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1354)))))
 )
(assert
 (forall ((time Int) )(let (($x1358 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1351 (_53 ?x62 var1 time)))
 (let (($x1344 (and $x1351 $x73)))
 (=> $x1344 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1358)))))
 )
(assert
 (forall ((time Int) )(let (($x1378 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1375 (_54 ?x62 var1 time)))
 (=> (and $x1375 $x63) (_55 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1378)))))
 )
(assert
 (forall ((time Int) )(let (($x1382 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1375 (_54 ?x62 var1 time)))
 (let (($x1368 (and $x1375 $x73)))
 (=> $x1368 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1382)))))
 )
(assert
 (forall ((time Int) )(let (($x1402 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1399 (_55 ?x62 var1 time)))
 (=> (and $x1399 $x63) (_56 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1402)))))
 )
(assert
 (forall ((time Int) )(let (($x1406 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1399 (_55 ?x62 var1 time)))
 (let (($x1392 (and $x1399 $x73)))
 (=> $x1392 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1406)))))
 )
(assert
 (forall ((time Int) )(let (($x1426 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1423 (_56 ?x62 var1 time)))
 (=> (and $x1423 $x63) (_57 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1426)))))
 )
(assert
 (forall ((time Int) )(let (($x1430 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1423 (_56 ?x62 var1 time)))
 (let (($x1416 (and $x1423 $x73)))
 (=> $x1416 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1430)))))
 )
(assert
 (forall ((time Int) )(let (($x1450 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1447 (_57 ?x62 var1 time)))
 (=> (and $x1447 $x63) (_58 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1450)))))
 )
(assert
 (forall ((time Int) )(let (($x1454 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1447 (_57 ?x62 var1 time)))
 (let (($x1440 (and $x1447 $x73)))
 (=> $x1440 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1454)))))
 )
(assert
 (forall ((time Int) )(let (($x1474 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1471 (_58 ?x62 var1 time)))
 (=> (and $x1471 $x63) (_59 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1474)))))
 )
(assert
 (forall ((time Int) )(let (($x1478 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1471 (_58 ?x62 var1 time)))
 (let (($x1464 (and $x1471 $x73)))
 (=> $x1464 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1478)))))
 )
(assert
 (forall ((time Int) )(let (($x1498 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1495 (_59 ?x62 var1 time)))
 (=> (and $x1495 $x63) (_60 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1498)))))
 )
(assert
 (forall ((time Int) )(let (($x1502 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1495 (_59 ?x62 var1 time)))
 (let (($x1488 (and $x1495 $x73)))
 (=> $x1488 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1502)))))
 )
(assert
 (forall ((time Int) )(let (($x1522 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1519 (_60 ?x62 var1 time)))
 (=> (and $x1519 $x63) (_61 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1522)))))
 )
(assert
 (forall ((time Int) )(let (($x1526 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1519 (_60 ?x62 var1 time)))
 (let (($x1512 (and $x1519 $x73)))
 (=> $x1512 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1526)))))
 )
(assert
 (forall ((time Int) )(let (($x1546 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1543 (_61 ?x62 var1 time)))
 (=> (and $x1543 $x63) (_62 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1546)))))
 )
(assert
 (forall ((time Int) )(let (($x1550 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1543 (_61 ?x62 var1 time)))
 (let (($x1536 (and $x1543 $x73)))
 (=> $x1536 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1550)))))
 )
(assert
 (forall ((time Int) )(let (($x1570 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1567 (_62 ?x62 var1 time)))
 (=> (and $x1567 $x63) (_63 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1570)))))
 )
(assert
 (forall ((time Int) )(let (($x1574 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1567 (_62 ?x62 var1 time)))
 (let (($x1560 (and $x1567 $x73)))
 (=> $x1560 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1574)))))
 )
(assert
 (forall ((time Int) )(let (($x1594 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1591 (_63 ?x62 var1 time)))
 (=> (and $x1591 $x63) (_64 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1594)))))
 )
(assert
 (forall ((time Int) )(let (($x1598 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1591 (_63 ?x62 var1 time)))
 (let (($x1584 (and $x1591 $x73)))
 (=> $x1584 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1598)))))
 )
(assert
 (forall ((time Int) )(let (($x1618 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1615 (_64 ?x62 var1 time)))
 (=> (and $x1615 $x63) (_65 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1618)))))
 )
(assert
 (forall ((time Int) )(let (($x1622 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1615 (_64 ?x62 var1 time)))
 (let (($x1608 (and $x1615 $x73)))
 (=> $x1608 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1622)))))
 )
(assert
 (forall ((time Int) )(let (($x1642 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1639 (_65 ?x62 var1 time)))
 (=> (and $x1639 $x63) (_66 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1642)))))
 )
(assert
 (forall ((time Int) )(let (($x1646 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1639 (_65 ?x62 var1 time)))
 (let (($x1632 (and $x1639 $x73)))
 (=> $x1632 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1646)))))
 )
(assert
 (forall ((time Int) )(let (($x1666 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1663 (_66 ?x62 var1 time)))
 (=> (and $x1663 $x63) (_67 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1666)))))
 )
(assert
 (forall ((time Int) )(let (($x1670 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1663 (_66 ?x62 var1 time)))
 (let (($x1656 (and $x1663 $x73)))
 (=> $x1656 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1670)))))
 )
(assert
 (forall ((time Int) )(let (($x1690 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1687 (_67 ?x62 var1 time)))
 (=> (and $x1687 $x63) (_68 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1690)))))
 )
(assert
 (forall ((time Int) )(let (($x1694 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1687 (_67 ?x62 var1 time)))
 (let (($x1680 (and $x1687 $x73)))
 (=> $x1680 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1694)))))
 )
(assert
 (forall ((time Int) )(let (($x1714 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1711 (_68 ?x62 var1 time)))
 (=> (and $x1711 $x63) (_69 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1714)))))
 )
(assert
 (forall ((time Int) )(let (($x1718 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1711 (_68 ?x62 var1 time)))
 (let (($x1704 (and $x1711 $x73)))
 (=> $x1704 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1718)))))
 )
(assert
 (forall ((time Int) )(let (($x1738 (forall ((var1 Int) )(let ((?x62 (input-arg0 time)))
 (let (($x63 (and (distinct ?x62 0) true)))
 (let (($x1735 (_69 ?x62 var1 time)))
 (=> (and $x1735 $x63) (_70 (input-arg0 (+ time 1)) (+ var1 1) (+ time 1)))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1738)))))
 )
(assert
 (forall ((time Int) )(let (($x1742 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1735 (_69 ?x62 var1 time)))
 (let (($x1728 (and $x1735 $x73)))
 (=> $x1728 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1742)))))
 )
(assert
 (forall ((time Int) )(let (($x1742 (forall ((var1 Int) )(let ((?x59 (+ time 1)))
 (let ((?x60 (input-arg0 ?x59)))
 (let (($x57 (ERR ?x60 var1 ?x59)))
 (let ((?x62 (input-arg0 time)))
 (let (($x73 (= ?x62 1)))
 (let (($x1735 (_69 ?x62 var1 time)))
 (let (($x1728 (and $x1735 $x73)))
 (=> $x1728 $x57)))))))))
 ))
 (let (($x69 (>= time 0)))
 (let (($x70 (and $x69 (< time 80))))
 (=> $x70 $x1742)))))
 )
(check-sat)
