; 
(set-info :status unknown)
(declare-fun _0 (Int Int) Bool)
(declare-fun _6 (Int Int) Bool)
(declare-fun _7 (Int Int) Bool)
(declare-fun _1 (Int Int) Bool)
(declare-fun _2 (Int Int) Bool)
(declare-fun _8 (Int Int) Bool)
(declare-fun _9 (Int Int) Bool)
(declare-fun _3 (Int Int) Bool)
(declare-fun _4 (Int Int) Bool)
(declare-fun _5 (Int Int) Bool)
(declare-fun _10 (Int Int) Bool)
(assert
 (_0 0 0))
(assert
 (forall ((time Int) )(let (($x70 (forall ((var0_p Int) )(let (($x66 (exists ((var0 Int) )(or false (and (_6 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_7 var0_p (+ time 1)) $x66)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x70)))))
 )
(assert
 (forall ((time Int) )(let (($x98 (forall ((var0_p Int) )(let (($x95 (exists ((var0 Int) )(or false (and (_1 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_2 var0_p (+ time 1)) $x95)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x98)))))
 )
(assert
 (forall ((time Int) )(let (($x114 (forall ((var0_p Int) )(let (($x111 (exists ((var0 Int) )(or false (and (_8 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_9 var0_p (+ time 1)) $x111)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x114)))))
 )
(assert
 (forall ((time Int) )(let (($x130 (forall ((var0_p Int) )(let (($x127 (exists ((var0 Int) )(or false (and (_3 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_4 var0_p (+ time 1)) $x127)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x130)))))
 )
(assert
 (forall ((time Int) )(let (($x146 (forall ((var0_p Int) )(let (($x143 (exists ((var0 Int) )(or false (and (_5 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_6 var0_p (+ time 1)) $x143)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x146)))))
 )
(assert
 (forall ((time Int) )(let (($x162 (forall ((var0_p Int) )(let (($x159 (exists ((var0 Int) )(or false (and (_0 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_1 var0_p (+ time 1)) $x159)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x162)))))
 )
(assert
 (forall ((time Int) )(let (($x178 (forall ((var0_p Int) )(let (($x175 (exists ((var0 Int) )(or false (and (_7 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_8 var0_p (+ time 1)) $x175)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x178)))))
 )
(assert
 (forall ((time Int) )(let (($x194 (forall ((var0_p Int) )(let (($x191 (exists ((var0 Int) )(or false (and (_2 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_3 var0_p (+ time 1)) $x191)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x194)))))
 )
(assert
 (forall ((time Int) )(let (($x210 (forall ((var0_p Int) )(let (($x207 (exists ((var0 Int) )(or false (and (_9 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_10 var0_p (+ time 1)) $x207)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x210)))))
 )
(assert
 (forall ((time Int) )(let (($x226 (forall ((var0_p Int) )(let (($x223 (exists ((var0 Int) )(or false (and (_4 var0 time) (= var0_p (+ var0 1)))))
 ))
 (= (_5 var0_p (+ time 1)) $x223)))
 ))
 (let (($x72 (>= time 0)))
 (let (($x73 (and $x72 (< time 20))))
 (=> $x73 $x226)))))
 )
(assert
 (exists ((time Int) )(let (($x52 (forall ((var0 Int) )(let (($x39 (= var0 9)))
 (let (($x54 (_9 var0 time)))
 (and (distinct $x54 $x39) true))))
 ))
 (=> (and (>= time 0) (< time 19)) $x52)))
 )
(check-sat)
