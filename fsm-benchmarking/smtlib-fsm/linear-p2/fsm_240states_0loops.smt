(set-logic HORN)
(declare-fun _0 (Int Int) Bool)
(declare-fun _1 (Int Int) Bool)
(declare-fun _2 (Int Int) Bool)
(declare-fun _3 (Int Int) Bool)
(declare-fun _4 (Int Int) Bool)
(declare-fun _5 (Int Int) Bool)
(declare-fun _6 (Int Int) Bool)
(declare-fun _7 (Int Int) Bool)
(declare-fun _8 (Int Int) Bool)
(declare-fun _9 (Int Int) Bool)
(declare-fun _10 (Int Int) Bool)
(declare-fun _11 (Int Int) Bool)
(declare-fun _12 (Int Int) Bool)
(declare-fun _13 (Int Int) Bool)
(declare-fun _14 (Int Int) Bool)
(declare-fun _15 (Int Int) Bool)
(declare-fun _16 (Int Int) Bool)
(declare-fun _17 (Int Int) Bool)
(declare-fun _18 (Int Int) Bool)
(declare-fun _19 (Int Int) Bool)
(declare-fun _20 (Int Int) Bool)
(declare-fun _21 (Int Int) Bool)
(declare-fun _22 (Int Int) Bool)
(declare-fun _23 (Int Int) Bool)
(declare-fun _24 (Int Int) Bool)
(declare-fun _25 (Int Int) Bool)
(declare-fun _26 (Int Int) Bool)
(declare-fun _27 (Int Int) Bool)
(declare-fun _28 (Int Int) Bool)
(declare-fun _29 (Int Int) Bool)
(declare-fun _30 (Int Int) Bool)
(declare-fun _31 (Int Int) Bool)
(declare-fun _32 (Int Int) Bool)
(declare-fun _33 (Int Int) Bool)
(declare-fun _34 (Int Int) Bool)
(declare-fun _35 (Int Int) Bool)
(declare-fun _36 (Int Int) Bool)
(declare-fun _37 (Int Int) Bool)
(declare-fun _38 (Int Int) Bool)
(declare-fun _39 (Int Int) Bool)
(declare-fun _40 (Int Int) Bool)
(declare-fun _41 (Int Int) Bool)
(declare-fun _42 (Int Int) Bool)
(declare-fun _43 (Int Int) Bool)
(declare-fun _44 (Int Int) Bool)
(declare-fun _45 (Int Int) Bool)
(declare-fun _46 (Int Int) Bool)
(declare-fun _47 (Int Int) Bool)
(declare-fun _48 (Int Int) Bool)
(declare-fun _49 (Int Int) Bool)
(declare-fun _50 (Int Int) Bool)
(declare-fun _51 (Int Int) Bool)
(declare-fun _52 (Int Int) Bool)
(declare-fun _53 (Int Int) Bool)
(declare-fun _54 (Int Int) Bool)
(declare-fun _55 (Int Int) Bool)
(declare-fun _56 (Int Int) Bool)
(declare-fun _57 (Int Int) Bool)
(declare-fun _58 (Int Int) Bool)
(declare-fun _59 (Int Int) Bool)
(declare-fun _60 (Int Int) Bool)
(declare-fun _61 (Int Int) Bool)
(declare-fun _62 (Int Int) Bool)
(declare-fun _63 (Int Int) Bool)
(declare-fun _64 (Int Int) Bool)
(declare-fun _65 (Int Int) Bool)
(declare-fun _66 (Int Int) Bool)
(declare-fun _67 (Int Int) Bool)
(declare-fun _68 (Int Int) Bool)
(declare-fun _69 (Int Int) Bool)
(declare-fun _70 (Int Int) Bool)
(declare-fun _71 (Int Int) Bool)
(declare-fun _72 (Int Int) Bool)
(declare-fun _73 (Int Int) Bool)
(declare-fun _74 (Int Int) Bool)
(declare-fun _75 (Int Int) Bool)
(declare-fun _76 (Int Int) Bool)
(declare-fun _77 (Int Int) Bool)
(declare-fun _78 (Int Int) Bool)
(declare-fun _79 (Int Int) Bool)
(declare-fun _80 (Int Int) Bool)
(declare-fun _81 (Int Int) Bool)
(declare-fun _82 (Int Int) Bool)
(declare-fun _83 (Int Int) Bool)
(declare-fun _84 (Int Int) Bool)
(declare-fun _85 (Int Int) Bool)
(declare-fun _86 (Int Int) Bool)
(declare-fun _87 (Int Int) Bool)
(declare-fun _88 (Int Int) Bool)
(declare-fun _89 (Int Int) Bool)
(declare-fun _90 (Int Int) Bool)
(declare-fun _91 (Int Int) Bool)
(declare-fun _92 (Int Int) Bool)
(declare-fun _93 (Int Int) Bool)
(declare-fun _94 (Int Int) Bool)
(declare-fun _95 (Int Int) Bool)
(declare-fun _96 (Int Int) Bool)
(declare-fun _97 (Int Int) Bool)
(declare-fun _98 (Int Int) Bool)
(declare-fun _99 (Int Int) Bool)
(declare-fun _100 (Int Int) Bool)
(declare-fun _101 (Int Int) Bool)
(declare-fun _102 (Int Int) Bool)
(declare-fun _103 (Int Int) Bool)
(declare-fun _104 (Int Int) Bool)
(declare-fun _105 (Int Int) Bool)
(declare-fun _106 (Int Int) Bool)
(declare-fun _107 (Int Int) Bool)
(declare-fun _108 (Int Int) Bool)
(declare-fun _109 (Int Int) Bool)
(declare-fun _110 (Int Int) Bool)
(declare-fun _111 (Int Int) Bool)
(declare-fun _112 (Int Int) Bool)
(declare-fun _113 (Int Int) Bool)
(declare-fun _114 (Int Int) Bool)
(declare-fun _115 (Int Int) Bool)
(declare-fun _116 (Int Int) Bool)
(declare-fun _117 (Int Int) Bool)
(declare-fun _118 (Int Int) Bool)
(declare-fun _119 (Int Int) Bool)
(declare-fun _120 (Int Int) Bool)
(declare-fun _121 (Int Int) Bool)
(declare-fun _122 (Int Int) Bool)
(declare-fun _123 (Int Int) Bool)
(declare-fun _124 (Int Int) Bool)
(declare-fun _125 (Int Int) Bool)
(declare-fun _126 (Int Int) Bool)
(declare-fun _127 (Int Int) Bool)
(declare-fun _128 (Int Int) Bool)
(declare-fun _129 (Int Int) Bool)
(declare-fun _130 (Int Int) Bool)
(declare-fun _131 (Int Int) Bool)
(declare-fun _132 (Int Int) Bool)
(declare-fun _133 (Int Int) Bool)
(declare-fun _134 (Int Int) Bool)
(declare-fun _135 (Int Int) Bool)
(declare-fun _136 (Int Int) Bool)
(declare-fun _137 (Int Int) Bool)
(declare-fun _138 (Int Int) Bool)
(declare-fun _139 (Int Int) Bool)
(declare-fun _140 (Int Int) Bool)
(declare-fun _141 (Int Int) Bool)
(declare-fun _142 (Int Int) Bool)
(declare-fun _143 (Int Int) Bool)
(declare-fun _144 (Int Int) Bool)
(declare-fun _145 (Int Int) Bool)
(declare-fun _146 (Int Int) Bool)
(declare-fun _147 (Int Int) Bool)
(declare-fun _148 (Int Int) Bool)
(declare-fun _149 (Int Int) Bool)
(declare-fun _150 (Int Int) Bool)
(declare-fun _151 (Int Int) Bool)
(declare-fun _152 (Int Int) Bool)
(declare-fun _153 (Int Int) Bool)
(declare-fun _154 (Int Int) Bool)
(declare-fun _155 (Int Int) Bool)
(declare-fun _156 (Int Int) Bool)
(declare-fun _157 (Int Int) Bool)
(declare-fun _158 (Int Int) Bool)
(declare-fun _159 (Int Int) Bool)
(declare-fun _160 (Int Int) Bool)
(declare-fun _161 (Int Int) Bool)
(declare-fun _162 (Int Int) Bool)
(declare-fun _163 (Int Int) Bool)
(declare-fun _164 (Int Int) Bool)
(declare-fun _165 (Int Int) Bool)
(declare-fun _166 (Int Int) Bool)
(declare-fun _167 (Int Int) Bool)
(declare-fun _168 (Int Int) Bool)
(declare-fun _169 (Int Int) Bool)
(declare-fun _170 (Int Int) Bool)
(declare-fun _171 (Int Int) Bool)
(declare-fun _172 (Int Int) Bool)
(declare-fun _173 (Int Int) Bool)
(declare-fun _174 (Int Int) Bool)
(declare-fun _175 (Int Int) Bool)
(declare-fun _176 (Int Int) Bool)
(declare-fun _177 (Int Int) Bool)
(declare-fun _178 (Int Int) Bool)
(declare-fun _179 (Int Int) Bool)
(declare-fun _180 (Int Int) Bool)
(declare-fun _181 (Int Int) Bool)
(declare-fun _182 (Int Int) Bool)
(declare-fun _183 (Int Int) Bool)
(declare-fun _184 (Int Int) Bool)
(declare-fun _185 (Int Int) Bool)
(declare-fun _186 (Int Int) Bool)
(declare-fun _187 (Int Int) Bool)
(declare-fun _188 (Int Int) Bool)
(declare-fun _189 (Int Int) Bool)
(declare-fun _190 (Int Int) Bool)
(declare-fun _191 (Int Int) Bool)
(declare-fun _192 (Int Int) Bool)
(declare-fun _193 (Int Int) Bool)
(declare-fun _194 (Int Int) Bool)
(declare-fun _195 (Int Int) Bool)
(declare-fun _196 (Int Int) Bool)
(declare-fun _197 (Int Int) Bool)
(declare-fun _198 (Int Int) Bool)
(declare-fun _199 (Int Int) Bool)
(declare-fun _200 (Int Int) Bool)
(declare-fun _201 (Int Int) Bool)
(declare-fun _202 (Int Int) Bool)
(declare-fun _203 (Int Int) Bool)
(declare-fun _204 (Int Int) Bool)
(declare-fun _205 (Int Int) Bool)
(declare-fun _206 (Int Int) Bool)
(declare-fun _207 (Int Int) Bool)
(declare-fun _208 (Int Int) Bool)
(declare-fun _209 (Int Int) Bool)
(declare-fun _210 (Int Int) Bool)
(declare-fun _211 (Int Int) Bool)
(declare-fun _212 (Int Int) Bool)
(declare-fun _213 (Int Int) Bool)
(declare-fun _214 (Int Int) Bool)
(declare-fun _215 (Int Int) Bool)
(declare-fun _216 (Int Int) Bool)
(declare-fun _217 (Int Int) Bool)
(declare-fun _218 (Int Int) Bool)
(declare-fun _219 (Int Int) Bool)
(declare-fun _220 (Int Int) Bool)
(declare-fun _221 (Int Int) Bool)
(declare-fun _222 (Int Int) Bool)
(declare-fun _223 (Int Int) Bool)
(declare-fun _224 (Int Int) Bool)
(declare-fun _225 (Int Int) Bool)
(declare-fun _226 (Int Int) Bool)
(declare-fun _227 (Int Int) Bool)
(declare-fun _228 (Int Int) Bool)
(declare-fun _229 (Int Int) Bool)
(declare-fun _230 (Int Int) Bool)
(declare-fun _231 (Int Int) Bool)
(declare-fun _232 (Int Int) Bool)
(declare-fun _233 (Int Int) Bool)
(declare-fun _234 (Int Int) Bool)
(declare-fun _235 (Int Int) Bool)
(declare-fun _236 (Int Int) Bool)
(declare-fun _237 (Int Int) Bool)
(declare-fun _238 (Int Int) Bool)
(declare-fun _239 (Int Int) Bool)
(declare-fun _240 (Int Int) Bool)
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (= time 0) true (= var0 0)) (_0 var0 time)) :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (= time 0) true (= var0 0)) (_0 var0 time)) :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_0 var0 time) (_1 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_1 var0 time) (_2 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_2 var0 time) (_3 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_3 var0 time) (_4 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_4 var0 time) (_5 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_5 var0 time) (_6 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_6 var0 time) (_7 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_7 var0 time) (_8 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_8 var0 time) (_9 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_9 var0 time) (_10 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_10 var0 time) (_11 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_11 var0 time) (_12 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_12 var0 time) (_13 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_13 var0 time) (_14 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_14 var0 time) (_15 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_15 var0 time) (_16 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_16 var0 time) (_17 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_17 var0 time) (_18 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_18 var0 time) (_19 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_19 var0 time) (_20 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_20 var0 time) (_21 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_21 var0 time) (_22 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_22 var0 time) (_23 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_23 var0 time) (_24 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_24 var0 time) (_25 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_25 var0 time) (_26 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_26 var0 time) (_27 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_27 var0 time) (_28 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_28 var0 time) (_29 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_29 var0 time) (_30 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_30 var0 time) (_31 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_31 var0 time) (_32 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_32 var0 time) (_33 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_33 var0 time) (_34 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_34 var0 time) (_35 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_35 var0 time) (_36 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_36 var0 time) (_37 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_37 var0 time) (_38 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_38 var0 time) (_39 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_39 var0 time) (_40 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_40 var0 time) (_41 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_41 var0 time) (_42 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_42 var0 time) (_43 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_43 var0 time) (_44 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_44 var0 time) (_45 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_45 var0 time) (_46 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_46 var0 time) (_47 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_47 var0 time) (_48 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_48 var0 time) (_49 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_49 var0 time) (_50 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_50 var0 time) (_51 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_51 var0 time) (_52 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_52 var0 time) (_53 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_53 var0 time) (_54 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_54 var0 time) (_55 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_55 var0 time) (_56 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_56 var0 time) (_57 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_57 var0 time) (_58 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_58 var0 time) (_59 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_59 var0 time) (_60 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_60 var0 time) (_61 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_61 var0 time) (_62 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_62 var0 time) (_63 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_63 var0 time) (_64 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_64 var0 time) (_65 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_65 var0 time) (_66 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_66 var0 time) (_67 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_67 var0 time) (_68 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_68 var0 time) (_69 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_69 var0 time) (_70 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_70 var0 time) (_71 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_71 var0 time) (_72 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_72 var0 time) (_73 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_73 var0 time) (_74 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_74 var0 time) (_75 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_75 var0 time) (_76 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_76 var0 time) (_77 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_77 var0 time) (_78 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_78 var0 time) (_79 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_79 var0 time) (_80 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_80 var0 time) (_81 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_81 var0 time) (_82 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_82 var0 time) (_83 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_83 var0 time) (_84 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_84 var0 time) (_85 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_85 var0 time) (_86 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_86 var0 time) (_87 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_87 var0 time) (_88 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_88 var0 time) (_89 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_89 var0 time) (_90 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_90 var0 time) (_91 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_91 var0 time) (_92 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_92 var0 time) (_93 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_93 var0 time) (_94 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_94 var0 time) (_95 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_95 var0 time) (_96 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_96 var0 time) (_97 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_97 var0 time) (_98 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_98 var0 time) (_99 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_99 var0 time) (_100 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_100 var0 time) (_101 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_101 var0 time) (_102 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_102 var0 time) (_103 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_103 var0 time) (_104 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_104 var0 time) (_105 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_105 var0 time) (_106 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_106 var0 time) (_107 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_107 var0 time) (_108 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_108 var0 time) (_109 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_109 var0 time) (_110 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_110 var0 time) (_111 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_111 var0 time) (_112 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_112 var0 time) (_113 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_113 var0 time) (_114 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_114 var0 time) (_115 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_115 var0 time) (_116 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_116 var0 time) (_117 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_117 var0 time) (_118 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_118 var0 time) (_119 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_119 var0 time) (_120 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_120 var0 time) (_121 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_121 var0 time) (_122 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_122 var0 time) (_123 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_123 var0 time) (_124 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_124 var0 time) (_125 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_125 var0 time) (_126 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_126 var0 time) (_127 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_127 var0 time) (_128 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_128 var0 time) (_129 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_129 var0 time) (_130 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_130 var0 time) (_131 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_131 var0 time) (_132 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_132 var0 time) (_133 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_133 var0 time) (_134 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_134 var0 time) (_135 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_135 var0 time) (_136 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_136 var0 time) (_137 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_137 var0 time) (_138 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_138 var0 time) (_139 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_139 var0 time) (_140 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_140 var0 time) (_141 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_141 var0 time) (_142 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_142 var0 time) (_143 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_143 var0 time) (_144 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_144 var0 time) (_145 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_145 var0 time) (_146 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_146 var0 time) (_147 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_147 var0 time) (_148 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_148 var0 time) (_149 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_149 var0 time) (_150 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_150 var0 time) (_151 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_151 var0 time) (_152 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_152 var0 time) (_153 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_153 var0 time) (_154 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_154 var0 time) (_155 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_155 var0 time) (_156 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_156 var0 time) (_157 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_157 var0 time) (_158 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_158 var0 time) (_159 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_159 var0 time) (_160 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_160 var0 time) (_161 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_161 var0 time) (_162 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_162 var0 time) (_163 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_163 var0 time) (_164 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_164 var0 time) (_165 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_165 var0 time) (_166 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_166 var0 time) (_167 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_167 var0 time) (_168 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_168 var0 time) (_169 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_169 var0 time) (_170 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_170 var0 time) (_171 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_171 var0 time) (_172 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_172 var0 time) (_173 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_173 var0 time) (_174 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_174 var0 time) (_175 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_175 var0 time) (_176 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_176 var0 time) (_177 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_177 var0 time) (_178 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_178 var0 time) (_179 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_179 var0 time) (_180 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_180 var0 time) (_181 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_181 var0 time) (_182 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_182 var0 time) (_183 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_183 var0 time) (_184 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_184 var0 time) (_185 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_185 var0 time) (_186 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_186 var0 time) (_187 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_187 var0 time) (_188 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_188 var0 time) (_189 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_189 var0 time) (_190 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_190 var0 time) (_191 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_191 var0 time) (_192 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_192 var0 time) (_193 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_193 var0 time) (_194 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_194 var0 time) (_195 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_195 var0 time) (_196 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_196 var0 time) (_197 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_197 var0 time) (_198 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_198 var0 time) (_199 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_199 var0 time) (_200 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_200 var0 time) (_201 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_201 var0 time) (_202 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_202 var0 time) (_203 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_203 var0 time) (_204 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_204 var0 time) (_205 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_205 var0 time) (_206 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_206 var0 time) (_207 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_207 var0 time) (_208 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_208 var0 time) (_209 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_209 var0 time) (_210 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_210 var0 time) (_211 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_211 var0 time) (_212 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_212 var0 time) (_213 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_213 var0 time) (_214 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_214 var0 time) (_215 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_215 var0 time) (_216 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_216 var0 time) (_217 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_217 var0 time) (_218 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_218 var0 time) (_219 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_219 var0 time) (_220 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_220 var0 time) (_221 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_221 var0 time) (_222 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_222 var0 time) (_223 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_223 var0 time) (_224 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_224 var0 time) (_225 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_225 var0 time) (_226 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_226 var0 time) (_227 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_227 var0 time) (_228 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_228 var0 time) (_229 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_229 var0 time) (_230 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_230 var0 time) (_231 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_231 var0 time) (_232 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_232 var0 time) (_233 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_233 var0 time) (_234 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_234 var0 time) (_235 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_235 var0 time) (_236 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_236 var0 time) (_237 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_237 var0 time) (_238 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_238 var0 time) (_239 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 250))
              (=> (_239 var0 time) (_240 (+ var0 1) (+ time 1))))
          :weight 0))
     :weight 0)))
(assert (forall ((time Int))
  (! (forall ((var0 Int))
       (! (=> (and (>= time 0) (< time 249)) (= (_239 var0 time) (= var0 239)))
          :weight 0))
     :weight 0)))
(check-sat)
